'CR5000 Series Datalogger
'Program for Feedlot REA
'Last edited: 2013-07-18 by pokeeffe@wsu.edu


'*** USER-DEFINED CONSTANTS ***
Const SAVE_FLUX_DATA = TRUE	 'Save computed fluxes to table? (TRUE/FALSE)
Const SAVE_TS_DATA = TRUE	   'Save real-time data to table? (TRUE/FALSE)

Const OUTPUT_INTERVAL = 30	 'Flux data output interval in minutes

Const CSAT3_AZIMUTH = 0	     'w.r.t TRUE North

Const zm = 1.5 	'Measurement Height, m, above displacement ht
Const zo =0.04		'roughness length, m

Const x_east_max = 10000		'sampling boundary, dist from tower (meters)
Const x_south_max = 10000		'sampling boundary, dist from tower (meters)
Const x_west_max = 10000		'sampling boundary, dist from tower (meters)
Const x_north_max = 10000		'sampling boundary, dist from tower (meters)
Const wdir_min = 0			'min wind direction, wdir < min outside source area
Const wdir_max = 359		'max wind direction, wdir > max outside source area

'*** NUMERICAL CONSTANTS ***
Const CP = 1004.67 	'Estimate of heat capacity of air [J/(kg K)].
Const LV = 2440		'Estimate of the latent heat of vaporization [J/g].
Const MU_WPL = 29/18	'Ratio of the molecular weight of dry air to that of water vapor.
Const R = 8.3143e-3	'Universal gas constant [kPa m^3/(K mol) ].
Const RD = R/29		'Gas constant for dry air [kPa m^3/(K g)].
Const RV = R/18		'Gas constant for water vapor [kPa m^3/(K g)].
Const PI = 3.14159	'Mathematical constant pi

'*** PROGRAM CONSTANTS ***
Const SCAN_INTERVAL = 50	'50 mSec = 20 Hz
Const OFFSET = 20		
Const DELAY_CSAT = 2		'Fixed inherent lag of CSAT3 data (2 scans)
Const DELAY_IRGA = 2		'Set inherent lag of IRGA data (199ms for SDM/delaystep=2)
Const SDM_SPD = 30		  'Lower this value if SDM device comm is spotty

'*** HARD-WIRED CONSTANTS ***
Const YES = -1		'Yes is defined as -1 (TRUE)
Const NO = 0		'No is defined as 0 (FALSE)
Const Now = 0		'Defined in prog control menu for starting time selection
Const Pick = -10	'Defined in prog control menu 
Const Run = -11	'Defined in prog control menu 
Const Reset = -12	'Defined in prog control menu 
Const Vary = -13	'Defined in prog control menu 

'*** DEFAULT MENU VALUES ***
Const DEF_SAVE_FLAG = YES
Const DEF_SAMP_HRS = 4
Const DEF_DELAY_DAYS = 0
Const DEF_DELAY_TOD = Now
Const DEF_SAMP_FLOW = 10

'Determine scan buffer size, CSAT3 Execution Parameters and fixed lags for CSAT3 and IRGA.
Const SCAN_BUFFER_SIZE = 300*INT (1000/SCAN_INTERVAL)		'Compute 5 minute scan buffer.
Const CSAT_OPT = INT (1000/SCAN_INTERVAL)			'Compute CSAT3 Execution Parameter (10 or 20 Hz).
Const CSAT_REC_BCK = OFFSET-DELAY_CSAT				'Number of records back to align CSAT3 data.
Const IRGA_REC_BCK = OFFSET-DELAY_IRGA				'Number of records back to align IRGA data.

'WIRING
Const MFC_UP_DF = 1
Const MFC_DN_DF = 2
Const MFC_Z_SE = 5
Const PTB_SE = 17
Const HMP_T_DF = 11
Const HMP_RH_DF = 12

'SDM
Const EC100_ADDR = 1
Const CSAT3_ADDR = 3
Const LI7500_ADDR = 7


'*** VARIABLES ***

'escrow variables for EC100 data
Dim ec100_raw(12)
'alias 1 = Ux, m/s
'alias 2 = Uy, m/s
'alias 3 = Uz, m/s
'alias 4 = Ts, *C
'alias 5 = sonic diagnostic bitmap
'alias 6 = CO2, mg/m^3
'alias 7 = H2O, g/m^3
'alias 8 = gas diagnostic bitmap
'alias 9 = air temp, *C
'alias 10 = air pressure, kPa
'alias 11 = CO2 signal strength, 0-1
'alias 12 = H2O signal strength, 0-1


'Online lagged CSAT3 and IRGA data.
Public aligned_data(16)
Alias aligned_data(1) = Uz
Alias aligned_data(2) = Ux
Alias aligned_data(3) = Uy
Alias aligned_data(4) = co2
Alias aligned_data(5) = h2o
Alias aligned_data(6) = not_used_1
Alias aligned_data(7) = Ts
Alias aligned_data(8) = not_used_2
Alias aligned_data(9) = diag_csat
Alias aligned_data(10) = press
Alias aligned_data(11) = not_used_3
Alias aligned_data(12) = panel_temp
Alias aligned_data(13) = Uz_valve_lag
Alias aligned_data(14) = PortOn_5_lag
Alias aligned_data(15) = PortOn_6_lag
Units Uz = m/s
Units Ux = m/s
Units Uy = m/s
Units co2 = mg/m^3
Units h2o = g/m^3
Units Ts = C
Units diag_csat = unitless
Units press = kPa
Units panel_temp = C

Public co2_um_m
Public h2o_mm_m
Units co2_um_m = umol/mol
Units h2o_mm_m = mmol/mol

Public diag_bits(4)				'Warning flags.
Alias diag_bits(1) = del_T_f		'Delta temperature warning flag.
Alias diag_bits(2) = sig_lck_f	'Poor signal lock warning flag.
Alias diag_bits(3) = amp_h_f		'Amplitude high warning flag.
Alias diag_bits(4) = amp_l_f		'Amplitude low warning flag.
Units diag_bits = samples

'No delay meteorological variables.
Public hmp(2)		'HMP45 temperature and relative humidity.
Public hmp_e		'HMP45 vapor pressure.
Dim e_sat			'Saturated vapor pressure by Clausius-Clapeyron eqn
Dim h2o_hmp_mean	'Mean HMP45 vapor density.
Dim rho_a_mean		'Mean air density.
Dim rho_d_mean		'Density of dry air used in Webb et al. term [kg / m^3].
Public T_dew_mean	'Tdew from hmp
Public RH_mean  	'RH from HMP
Public old_RH_mean
Public batt_volt	'cr5000 battery voltage.
Alias hmp(1) = hmp_t
Alias hmp(2) = hmp_rh
Units hmp_t = C
Units hmp_rh = percent
Units hmp_e = kPa
Units e_sat = mbar
Units h2o_hmp_mean = g/m^3
Units rho_a_mean = kg/m^3
Units batt_volt = V
Units T_dew_mean = C

'MFC-specific variables  
Public MFC(3)
Alias MFC(1) = flow_rea_up
Alias MFC(2) = flow_rea_dn
Alias MFC(3) = flow_zero
Units flow_rea_up = L/min
Units flow_rea_dn = L/min
Units flow_zero = L/min

'Flux variables.
Dim Fc_wpl		'Carbon dioxide flux (IRGA), with Webb et al. term.
Dim LE_wpl		'Latent heat flux (IRGA), with Webb et al. term.
Dim Hs			'Sensible heat flux using sonic temperature.
Dim Hc			'Sensible heat flux computed from Hs and LE_wpl.
Dim tau			'Momentum flux.
Dim u_star		'Friction velocity.
Dim old_u_star
Dim Fc_irga		'Carbon dioxide flux (IRGA), without Webb et al. term.
Dim LE_irga		'Latent heat flux (IRGA), without Webb et al. term.
Dim co2_wpl_LE		'Carbon dioxide flux (IRGA), Webb et al. term due to latent heat flux.
Dim co2_wpl_H		'Carbon dioxide flux (IRGA), Webb et al. term due to sensible heat flux.
Dim h2o_wpl_LE		'Latent heat flux (IRGA), Webb et al. term due to latent heat flux.
Dim h2o_wpl_H		'Latent heat flux (IRGA), Webb et al. term due to sensible heat flux.
Dim cov_out(52)	'Covariance: wind/scalars, wind vector, hmp_t_mean, e_mean, co2_mean, press_mean, Ts_mean
Units Fc_wpl = mg/(m^2 s)
Units LE_wpl = W/m^2
Units Hs = W/m^2
Units Hc = W/m^2
Units tau = kg/(m s^2)
Units u_star = m/s
Units Fc_irga = mg/(m^2 s)
Units LE_irga = W/m^2
Units co2_wpl_LE = mg/(m^2 s)
Units co2_wpl_H = mg/(m^2 s)
Units h2o_wpl_LE = W/m^2
Units h2o_wpl_H = W/m^2


'Aliases for covariances.
Alias cov_out(1) = cov_Uz_Uz
Alias cov_out(2) = cov_Uz_Ux
Alias cov_out(3) = cov_Uz_Uy
Alias cov_out(4) = cov_Uz_co2
Alias cov_out(5) = cov_Uz_h2o	'(6) omitted
Alias cov_out(7) = cov_Uz_Ts	'(8) omitted
Alias cov_out(9) = cov_Ux_Ux
Alias cov_out(10) = cov_Ux_Uy
Alias cov_out(11) = cov_Ux_co2
Alias cov_out(12) = cov_Ux_h2o	'(13) omitted
Alias cov_out(14) = cov_Ux_Ts	'(15) omitted
Alias cov_out(16) = cov_Uy_Uy
Alias cov_out(17) = cov_Uy_co2
Alias cov_out(18) = cov_Uy_h2o	'(19) omitted
Alias cov_out(20) = cov_Uy_Ts	'(21) omitted
Alias cov_out(22) = cov_co2_co2	'(23...26) omitted
Alias cov_out(27) = cov_h2o_h2o	'(28...33) omitted
Alias cov_out(34) = cov_Ts_Ts	'(35...38) omitted
Units cov_Uz_Uz	= (m/s)^2
Units cov_Uz_Ux = (m/s)^2
Units cov_Uz_Uy = (m/s)^2
Units cov_Uz_co2 = mg/(m^2 s)
Units cov_Uz_h2o = g/(m^2 s)
Units cov_Uz_Ts = m C/s
Units cov_Ux_Ux = (m/s)^2
Units cov_Ux_Uy = (m/s)^2
Units cov_Ux_co2 = mg/(m^2 s)
Units cov_Ux_h2o = g/(m^2 s)
Units cov_Ux_Ts = m C/s
Units cov_Uy_Uy = (m/s)^2
Units cov_Uy_co2 = mg/(m^2 s)
Units cov_Uy_h2o = g/(m^2 s)
Units cov_Uy_Ts = m C/s
Units cov_co2_co2 = (mg/m^3)^2
Units cov_h2o_h2o = (g/m^3)^2
Units cov_Ts_Ts = C^2


'Wind directions and speed.
Alias cov_out(39) = wnd_dir_compass
Alias cov_out(41) = wnd_spd
Alias cov_out(42) = rslt_wnd_spd
Alias cov_out(43) = wnd_dir_csat3
Alias cov_out(44) = std_wnd_dir
Alias cov_out(45) = hmp_t_mean
Alias cov_out(46) = hmp_e_mean
Alias cov_out(47) = co2_mean
Alias cov_out(48) = press_mean
Alias cov_out(49) = Ts_mean
Alias cov_out(50) = Ux_mean
Alias cov_out(51) = Uy_mean
Alias cov_out(52) = Uz_mean
Units wnd_dir_compass = degrees
Units wnd_spd = m/s
Units rslt_wnd_spd = m/s
Units wnd_dir_csat3 = degrees
Units std_wnd_dir = degrees
Units hmp_t_mean = C
Units co2_mean = mg/m^3
Units press_mean = kPa
Units Ts_mean = C
Units Ux_mean = m/s
Units Uy_mean = m/s
Units Uz_mean = m/s

'REA sampling and rotation related Variables
Public CT	'rotation angles
Public ST
Public CE
Public SE
Units CT=radians
Units ST=radians
Units CE=radians
Units SE=radians
Public Uz_rot		'rotated vertical wind
Public Uz_valve	'value of Uz used for real time valve control

Public Elapse1 		'timer for controlling sampling duration
Public Startday
Public ElapseDay
Public countdown_timer		'duration of sampling
Dim cov_Uz_Uz_rot
Public sig_w
Public sig_w_rot
Units Uz_rot=m/s
Units Elapse1 = min
Units countdown_timer = min
Units sig_w =m/s
Units sig_w_rot = m/s

Public L		'Obukhov length, used for footprint
Public x70	'distance to include 70%, F/So=0.70
Public zeta	'z/L
Public itt 	'integral turbulence text
Public old_itt
Dim itt_model
Dim itt_meas
Dim Dh		'for Hsieh footprint model
Dim Ph		'for Hsieh footprint model
Dim zu		'for Hsieh footprint model

Public alpha
Public easting
Public westing
Public southing
Public northing
Public compass_diag

Public Dband		'deadband
Public K_d_mean	'correction factors for MFCs dry air
Public K_a_mean	'correction factors for MFCs moist air
Public CAO_1_mv	'output voltages for controlling chemcomb MFCs
Public CAO_2_mv	'output voltages for controlling zero air MFC
Public chemc_flow	'sample rate for chemcombs
Public makeup_flow	'sample rate for makeup air / shield gas
Units Dband = m/s
Units K_d_mean = ratio
Units K_a_mean = ratio
Units CAO_1_mv = mv
Units CAO_2_mv = mv
Units chemc_flow = L/min
Units makeup_flow = L/min

Public PortOn_1 	'MFC 1 and 2 Off/On
Public PortOn_2	'MFC 3 Off/On
Public PortOn_3	'pressure transmitter off/on
Public PortOn_4	'turns air pump off/on
Public PortOn_5	'REA valve up eddy
Public PortOn_6	'REA valve dn eddy

'Diagnostic variables.
Dim disable_flag_on(2)		'Intermediate processing disable flags.
'disable_flag_on(1)			'TRUE: CSAT3 diag warn flags on or CSAT3 has no data.
'disable_flag_on(2)			'TRUE: CSAT3 diag warn flags on. Used to filter the sum of diag warn flags.
Dim n					'Number of samples in the online covariances.
Units n = samples

'Program Control flags and variables
Public save_flag			'Specifies whether real-time site data is stored or not
Public REA_flag_on 			'Triggers start of sampling (pump/valves on)
Public control_input 		'Value designated by user via program control menu
Public control_flag 		'Compared against control_input to sense user changes
Public samp_flow			'Permits overriding of sampling rate selection
Public fin_flag_on 			'Triggers completion of sampling (pump/valves off)
Public delay_days 			'Specifies number of days before sampling, user input
Public delay_TOD 			'Specifies time of day to start sampling, user input
Public tot_samp_hrs 		'Compared against counter to signal end of sampling, user input
Public Weather_OK 
Public footprt_OK 
Public old_footprt_OK 

'No delay CSAT3 data.
Dim wind_raw(5)
Alias wind_raw(1) = Ux_raw
Alias wind_raw(2) = Uy_raw
Alias wind_raw(3) = Uz_raw
Alias wind_raw(4) = Ts_raw
Alias wind_raw(5) = diag_csat_raw
Units wind_raw = m/s
Units Ts_raw = C
Units diag_csat_raw = unitless

'No delay IRGA data.
Dim irga_raw(2)
Alias irga_raw(1) = co2_raw
Alias irga_raw(2) = h2o_raw
Units co2_raw = mmol/m^3
Units h2o_raw = mmol/m^3

'No delay analog measurements.
Dim panel_temp_raw
Units panel_temp_raw = C
Dim press_raw
Units press_raw = kPa

'Working variables
Dim co2_mm_m3			'Carbon dioxide concentration [mmol/m^3], used to compute umol/mol conc.
Dim h2o_mm_m3			'Water vapor conc [mmol/m^3], to compute vapor pressure and mmol/mol conc.
Dim sigma_wpl			'Webb et al. sigma = density of water vapor / density of dry air.
Dim scan_count 		'Number scans executed.
Dim wind_east			'East wind in compass coordinate system.
Dim wind_north			'North wind in compass coordinate system.
Dim dly_data_out(15)	'Variable array used to temporarily store the lagged record.
Dim place_holder(3)		'Place holder variable in the DataTable dly_data_out
Dim diag_csat_work 		'Working variable used to break out the CSAT3 diagnostic bits.

'clock variables
Public rTime(9)
Alias rTime(1) = rYear	
Alias rTime(2) = rMonth	
Alias rTime(3) = rDay	
Alias rTime(4) = rHour	
Alias rTime(5) = rMinute	
Alias rTime(6) = rSecond	
Alias rTime(7) = ruSecond	
Alias rTime(8) = WeekDay	
Alias rTime(9) = Day_of_Year	

'*** FINAL OUTPUT DATA TABLES ***
'Save processed data needed for flux determination
DataTable (flux,TRUE,-1)
	DataInterval (0,OUTPUT_INTERVAL,Min,10)
	CardOut (0,-1) 

	Sample (1,Fc_wpl,IEEE4)
	Sample (1,LE_wpl,IEEE4)
	Sample (1,Hs,IEEE4)
	Sample (1,Hc,IEEE4)
	Sample (1,tau,IEEE4)
	Sample (1,u_star,IEEE4)
	Sample (5,cov_Uz_Uz,IEEE4)
	Sample (1,cov_Uz_Ts,IEEE4)
	Sample (4,cov_Ux_Ux,IEEE4)
	Sample (1,cov_Ux_Ts,IEEE4)
	Sample (3,cov_Uy_Uy,IEEE4)
	Sample (1,cov_Uy_Ts,IEEE4)
	Sample (1,cov_co2_co2,IEEE4)
	Sample (1,cov_h2o_h2o,IEEE4)
	Sample (1,cov_Ts_Ts,IEEE4)

	Average (3,Uz,IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)))
	Sample (1,co2_mean,IEEE4)
	Average (1,h2o,IEEE4,NOT (SAVE_FLUX_DATA))
	Sample (1,Ts_mean,IEEE4)

	Sample (1,rho_a_mean,IEEE4)
	Sample (1,press_mean,IEEE4)
	Average (1,panel_temp,IEEE4,FALSE)

	Sample (1,wnd_dir_compass,IEEE4)
	Sample (1,wnd_dir_csat3,IEEE4)
	Sample (1,wnd_spd,IEEE4)
	Sample (1,rslt_wnd_spd,IEEE4)
	Average (1,batt_volt,IEEE4,FALSE)

	Sample (1,std_wnd_dir,IEEE4)

	'Calc total unless: CSAT3 warn/no-data flags true or save flag is false
	Totalize (1,n,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))

	'Calc total unless: CSAT3 flags & CAT3 no-data flags are false or save flag is false
	Totalize (1,n,IEEE4,NOT (disable_flag_on(1) OR disable_flag_on(3)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("csat_warnings")
	
	Sample (1,Fc_irga,IEEE4)
	Sample (1,LE_irga,IEEE4)
	Sample (1,co2_wpl_LE,IEEE4)
	Sample (1,co2_wpl_H,IEEE4)
	Sample (1,h2o_wpl_LE,IEEE4)
	Sample (1,h2o_wpl_H,IEEE4)
	Sample (1,h2o_hmp_mean,IEEE4)
	Sample (1,hmp_t_mean,IEEE4)
	Sample (1,T_dew_mean,IEEE4)
	Sample (1,RH_mean,IEEE4)

	Average (1,K_d_mean,IEEE4,False)
	Average (3,MFC(),IEEE4,FALSE)
	StdDev (3,MFC(),IEEE4,False)

	Sample (1,Dband,IEEE4)
	Average (1,Uz_raw,IEEE4,False)
	Average (1,Uz_rot,IEEE4,False)
	Sample (1,CE,IEEE4)
	Sample (1,SE,IEEE4)
	Sample (1,CT,IEEE4)
	Sample (1,ST,IEEE4)

	Sample (1,L,IEEE4)
	Sample (1,x70,IEEE4)
	Sample (1,itt,IEEE4)
	Sample (1,southing,IEEE4)
	Sample (1,easting,IEEE4)
	Sample (1,westing,IEEE4)

	Sample (1,footprt_OK,FP2)
	Sample (1,Weather_OK,FP2)

	Sample (1,tot_samp_hrs,FP2)
	Sample (1,Elapse1,FP2)

	Sample (1,delay_days,FP2)
	Sample (1,delay_TOD,FP2)

	Sample (1,REA_flag_on,FP2)
	Sample (1,fin_flag_on,FP2)
	Sample (1,PortOn_1, FP2)
	Sample (1,PortOn_2, FP2)
	Sample (1,PortOn_4, FP2)
	Totalize (1,PortOn_5,IEEE4,False)
	Totalize (1,PortOn_6,IEEE4,False)
EndTable

DataTable (ts_site,TRUE,-1)
	DataInterval (0,SCAN_INTERVAL,mSec,100)
	CardOut (0,-1) 

	Sample (1,Ux,IEEE4)
	Sample (1,Uy,IEEE4)
	Sample (1,Uz,IEEE4)
	Sample (1,Ts,IEEE4)
	Sample (1,co2,IEEE4)
	Sample (1,h2o,IEEE4)
	Sample (1,press,IEEE4)
	Sample (1,hmp_t,IEEE4)
	Sample (1,hmp_e,IEEE4)

	Sample (1,Uz_valve_lag,IEEE4)
	Sample (1,Dband,IEEE4)
	Sample (1,flow_rea_up,IEEE4)
	Sample (1,flow_rea_dn,IEEE4)
	Sample (1,flow_zero,IEEE4)
	Sample (1,PortOn_5_lag,IEEE4)
	Sample (1,PortOn_6_lag,IEEE4)
EndTable


'*** WORKING DATA TABLES ***
'Reorder the data and prepare to lag all the data. This ordering is critical 
'to correctly identifying the covariances in the output array.
DataTable (dly_data,TRUE,OFFSET)
	Sample (1,Uz_raw,IEEE4)			'1
	Sample (1,Ux_raw,IEEE4)			'2
	Sample (1,Uy_raw,IEEE4)			'3
	Sample (1,co2_raw,IEEE4)			'4
	Sample (1,h2o_raw,IEEE4)			'5
	Sample (1,place_holder(1),IEEE4) 	'6
	Sample (1,Ts_raw,IEEE4)			'7
	Sample (1,place_holder(2),IEEE4)	'8
	Sample (1,diag_csat_raw,IEEE4)	'9
	Sample (1,press_raw,IEEE4)		'10
	Sample (1,place_holder(3),IEEE4)	'11
	Sample (1,panel_temp_raw,IEEE4)	'12
	Sample (1,Uz_valve,IEEE4) 		'13
	Sample (1,PortOn_5,IEEE4)		'14
	Sample (1,PortOn_6,IEEE4)		'15
EndTable


'Compute the covariances of Uz, co2, h2o, and Ts, as well as the other cross products, required to rotate the data
'into natural wind coordinates. This data is output every OUTPUT_INTERVAL minutes on the minute.
DataTable (comp_cov,TRUE,1)
	DataInterval (0,OUTPUT_INTERVAL,Min,1)

	Covariance (8,aligned_data(1),IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)),36)
	WindVector (1,wind_east,wind_north,IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)),0,1,2)
	WindVector (1,Uy,Ux,IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)),0,1,2)

	Average (1,hmp_t,IEEE4,FALSE)
	Average (1,hmp_e,IEEE4,FALSE)
	Average (1,co2,IEEE4,NOT (SAVE_FLUX_DATA))
	Average (1,press,IEEE4,NOT (SAVE_FLUX_DATA))
	Average (1,Ts,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
	Average (1,Ux,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
	Average (1,Uy,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
	Average (1,Uz,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
EndTable


'*** PROGRAM CONTROL MENU NOTES ***
' The Program Control Menu allows the station operator to conveniently change the 
' status of the program control flags using the CR5000 keyboard display.
'
'Save met? 	"Yes"	Save real-time data to ts_site and save fluxes
' 			"No"		do not save
'Sampling: 	"Pick"	Default value - does nothing but place hold
'			"Run"	Begin a sampling run with the denuders
'			"Reset"	Restart a run with clear variables without interrupting time-series collection
'Flow L/min	"Vary" 	let the program adjust flow based on sigma W
'			10 		go with 10 L/min sampling rate always (default)
'For X hrs:	total number of hours to sample
'			"0.5,1,2,4,6,8" (4 = default)
'Delay Days?	total number of days to wait before sampling
'			"0,1,2,3,4,5,6" (0 = default)
'Start time:	24hr time of day to start sample
'			"Now,8,10,12,14,16,18" (Now = default, meaning sampling is immediate)
'Controls:	"PickCmd" Default value upon startup & after reset
'			"Run"	Start program or activate day/start_time timers
'			"Reset"	Stop running the program and reset variables


'*** PROGRAM CONTROL MENU DEFINED ***
DisplayMenu ("Program Control",TRUE)
	MenuItem ("Save met?",save_flag)
	MenuPick (Yes,No)
	MenuItem ("Sampling:",control_input)
	MenuPick (Pick,Run,Reset)
	MenuItem ("Flow L/min",samp_flow)
	MenuPick (Vary,10)
	MenuItem ("For X hrs:",tot_samp_hrs)
	MenuPick (0.5,1,2,4,6,8)
	MenuItem ("Delay Days?",delay_days)
	MenuPick (0,1,2,3,4,5,6)
	MenuItem ("Start time:",delay_TOD)
	MenuPick (Now,8,10,12,14,16,18)
EndMenu

Sub resetREA()
	delay_days = DEF_DELAY_DAYS 	'Specify default value for delay in days to start
	delay_TOD = DEF_DELAY_TOD 	'Specify default value for time of day to start
	tot_samp_hrs = DEF_SAMP_HRS 	'Specify default value for sampling duration
	samp_flow = DEF_SAMP_FLOW	'Specify default value for sampling flowrate
	REA_flag_on = FALSE 		'REA off on compile
	fin_flag_on = FALSE 		'Can't say finish until it's started
	control_input = Pick 		'Default menu value for program control
	control_flag = Pick 	 	'Real-time flag to track control changes
	weather_OK = FALSE 
	footprt_OK = FALSE
	countdown_timer = 0 		'Specify zero here - changes when REA_flag_on is tripped
	Elapse1 = 0 				'Upon initilization, set timer for sampled duration to zero
	
	'set port status indicators
	WriteIO (&B111111,&B000100) 
	PortOn_1=0 			'MFC 1/2 off
	PortOn_2=0 			'MFC 3 off
	PortOn_3=1			'pressure transmitter on (2sec warm up)
	PortOn_4=0 			'air pump off
	PortOn_5=0 			'REA valve up set to recirc
	PortOn_6=0 			'REA valve dn set to recirc

	'Activate MFC 3 on startup (zero air)
	WriteIO (&B10,&B10) 	'set port 2 high
	PortOn_2=1		'denote port 2 high with var
	CAO_2_mv=2000 		'set initial flow for makeup air MFCs: corresponds to 2.0LPM
	
	'Initialize MFCs 1,2 on startup
	CAO_1_mv=0
EndSub

'*** BEGIN PROGRAM ***
BeginProg
	
	n = 1 					'Set # of samples taken to 1 upon startup
	scan_count = 0 			'Specify a 0 here since RecNum may not start @ 0
	save_flag = DEF_SAVE_FLAG	'Specify default value for whether time series & fluxes are saved

	Call resetREA()

	CT=1.0 	'Set Inital Rotation Angles 
	ST=0
	CE=0
	SE=0

	Dband = 0.1 		'Set Deadband on compile 
	SDMSpeed (SDM_SPD) 	'Set the SDM clock speed.

	Move (Ux_raw,5,NaN,1) 	'Set all CSAT3 variables to NaN.
	Move (co2_raw,2,NaN,1) 	'Set all IRGA variables to NaN.
	
	Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)

		'get date and time
		RealTime( rTime )
		
		'Check to see if a run finished last scan and if so, reset rea variables
		If fin_flag_on Then Call resetREA()
		
		'check if user has changed sampling control (Pick/Run/Reset) and ignore any 
		'changes except Pick->Run, Pick->Reset or Run->Reset. After a reset, set to Pick
		If (NOT (control_input = control_flag)) Then
			If (control_input = Pick) Then 			'don't allow [X]->Pick 
				control_input = control_flag 
			ElseIf (control_input = Run AND control_flag = Pick) Then 	'initial Pick->Run
				control_flag = control_input 			'set flag to run, leave input on run
				Startday=Day_of_Year				'record today as the starting day
				countdown_timer = tot_samp_hrs*60		'set ending time in minutes
			ElseIf (control_input = Reset) Then 		'anytime [X]->Reset
				Elapse1 = Timer(1,Min,3)				'stop & reset timer #2, sampling duration
				Call resetREA()
			EndIf
		EndIf
		
		'Once sampling starts, reflect any change in total sampling hours specified in prog menu
		If countdown_timer > 0 Then countdown_timer = tot_samp_hrs*60 

		PanelTemp (panel_temp_raw,250) 				'CR5000 panel temperature.

    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' push EC100 (new style sonic/irga combo) to CSAT3 and LI7500 variables
    EC100(ec100_raw(1),EC100_ADDR,1)
    Ux_raw = ec100_Ux
    Uy_raw = ec100_Uy
    Uz_raw = ec100_Uz
    Ts_raw = ec100_Ts
    diag_csat = ec100_Sdiag
    co2_raw = ec100_co2       'not mmol/m^3, now mg/m^3 !!
    h2o_raw = ec100_h2o       'not mmol/m^3, now g/m^3 !!
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		VoltSe (press_raw,1,mv5000,PTB_SE,True,200,250,0.0052,80)

		Uz_rot   = Uz_raw*CT-Ux_raw*ST*CE-Uy_raw*ST*SE		'REA: rotate vertical wind speed
		Uz_valve = Uz_rot

		If (Uz_valve >= Dband AND control_flag = Run) Then
			WriteIO (&B110000,&B010000) 'set up valve sample/down valve recirc
			PortOn_5=1
			PortOn_6=0
		Elseif (Uz_valve <= -Dband AND control_flag = Run) Then
			WriteIO (&B110000,&B100000) 'set up valve recirc/down valve sample
			PortOn_5=0
			PortOn_6=1
		Else
			WriteIO (&B110000,&B000000) 'set both valves recirc
			PortOn_5=0
			PortOn_6=0
		EndIf

		'set MFCs
		ExciteCAO (CAO1,CAO_1_mv,True,False)	'denuder MFCs
		ExciteCAO (CAO2,CAO_2_mv,True,False) 	'zero air MFC

		VoltDiff (hmp_t,1,mV1000,HMP_T_DF,TRUE,200,250,0.1,-40) 	'Measure the HMP45 temp in C
		VoltDiff (hmp_rh,1,mv1000,HMP_RH_DF,True,200,250,0.1,0)	'Measure the HMP45 RH as %
		Battery (batt_volt) 						'Measure battery voltage.

		'Find the HMP45C vapor pressure (kPa)
		VaporPressure(hmp_e,hmp_t,hmp_rh)
		SatVP(e_sat,hmp_t)

		'Measure the MFCs controlling REA recirculation rate, 0-10L/min fullscale
		VoltDiff (flow_rea_up,1,mV5000,MFC_UP_DF,True,200,250,0.002,0)
		VoltDiff (flow_rea_dn,1,mV5000,11,MFC_DN_DF,200,250,0.002,0)

		'Measure the MFC controlling zero air injection, 0-5 L/min fullscale
		VoltSe (flow_zero,1,mV5000,MFC_Z_SE,True,200,250,0.001,0)

		'Lag the CSAT3 and IRGA measurements.
		CallTable dly_data

		If ( scan_count >= OFFSET ) Then
			'Load in the analog data that has been lagged by OFFSET scans.
			GetRecord (dly_data_out(1),dly_data,OFFSET)
			Move (panel_temp,1,dly_data_out(12),1)		'panel_temp
			Move (PortOn_5_lag,2,dly_data_out(14),2) 	'porton_5,porton_6
			Move (press,1,dly_data_out(10),1)			'press from LI-7500
			
			'Load in CSAT3 data that has been lagged by CSAT_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,CSAT_REC_BCK)
			Move (Uz,3,dly_data_out(1),3)				'Uz, Ux, Uy
			Move (Ts,1,dly_data_out(7),1)				'Ts
			Move (diag_csat,1,dly_data_out(9),1)		'diag_csat
			Move (Uz_valve_lag,1,dly_data_out(13),1)	'Uz_Valve

			'Load in the IRGA data that has been lagged by IRGA_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,IRGA_REC_BCK)
			Move (co2,2,dly_data_out(4),2)			'co2, h2o
			Move (not_used_3,1,dly_data_out(11),1)		

			'Copy and convert CSAT3 for compass wind vector computation.
			wind_east  = -1*Uy
			wind_north = Ux


			co2_mm_m3 = co2	/ 44	'now measured in mg/m3 !!  44 mg/mmol
			h2o_mm_m3 = h2o / 0.018 'now in g/m^3!! 18g/mol

			co2_um_m = 10^6 * co2_mm_m3 / ( press/((R/1000)*(hmp_t+273.15)) -  h2o_mm_m3 )
  		'co2_um_m = co2*(.022414*(273.15+hmp_t)/273.15*101.3/press)*1000 

			'h2o_mm_m3 = (273000000*h2o)/(22691.2*(hmp_t+273.15)) 	'from Op-2 manual, pg 9
			'h2o_mm_m = h2o_mm_m3*R*(hmp_t+273.15)/press			'Jay's original code
			'h2o_mm_m = h2o_mm_m3*(.022414*(273.15+hmp_t)/273.15*101.3/press) 'bk calc of m3 to mol of air

			'Define 61502 as NaN.
			If ( diag_csat = NaN ) Then ( diag_csat = 61502 )

			'Break up the four CSAT3 warning flags into four separate bits.
			diag_csat_work = diag_csat
			del_T_f = diag_csat_work AND &h8000
			sig_lck_f = diag_csat_work AND &h4000
			amp_h_f = diag_csat_work AND &h2000
			amp_l_f = diag_csat_work AND &h1000

			'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
			' high, including the special cases NaN (61502), a Lost Trigger (61440), No Data
			' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
			disable_flag_on(1) = diag_csat_work AND &hf000

			'Turn on only when CSAT3 diagnostic warning flags are set.
			disable_flag_on(2) = ( (del_T_f OR sig_lck_f OR amp_h_f OR amp_l_f) AND NOT (Ts = NaN) )

			'Save the four most significant bits of the CSAT3 diagnostics, except for the
			' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM
			' error (61441), or wrong CSAT3 embedded code (61442).
			If ( diag_csat_work < &hf000 ) Then ( diag_csat = INT (diag_csat_work/&h1000) )

			If save_flag Then CallTable ts_site 
			If control_flag = Run Then CallTable ts_REA

			CallTable comp_cov

			If ( comp_cov.Output(1,1) ) Then

				GetRecord (cov_out(1),comp_cov,1)

				'Compass wind direction will be between 0 and 360 degrees.
				wnd_dir_compass = wnd_dir_compass+CSAT3_AZIMUTH
				If ( wnd_dir_compass < 0 ) Then ( wnd_dir_compass = wnd_dir_compass+360 )
				wnd_dir_compass = (wnd_dir_compass) MOD 360

				'CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees.
				If ( wnd_dir_csat3 > 180 ) Then ( wnd_dir_csat3 = wnd_dir_csat3-360 )

				h2o_hmp_mean = hmp_e_mean/((hmp_t_mean+273.15)*RV)
				rho_d_mean = (press_mean-hmp_e_mean)/((hmp_t_mean+273.15)*RD)
				rho_a_mean = (rho_d_mean)/1000
				T_dew_mean = 240.97*LOG(hmp_e_mean/0.611)/(17.502 - LOG(hmp_e_mean/0.611))
				old_RH_mean = RH_mean
				RH_mean = hmp_e_mean/( 0.611*EXP(17.502*hmp_t_mean/(240.97+hmp_t_mean)) )

				'Compute online fluxes.
				Fc_irga = cov_Uz_co2
				LE_irga = LV*cov_Uz_h2o
				Hs = rho_a_mean*CP*cov_Uz_Ts

				old_u_star = u_star
				tau = SQR ((cov_Uz_Ux*cov_Uz_Ux)+(cov_Uz_Uy*cov_Uz_Uy))
				u_star = SQR (tau)
				tau = rho_a_mean*tau

				sigma_wpl = h2o_hmp_mean/rho_d_mean

				'LI-7500 Webb et al. term for water vapor Eq. (25).
				h2o_wpl_LE = MU_WPL*sigma_wpl*LE_irga
				h2o_wpl_H = ( 1+(MU_WPL*sigma_wpl) )*h2o_hmp_mean/(hmp_t_mean+273.15)*LV*cov_Uz_Ts
				LE_wpl = LE_irga + h2o_wpl_LE + h2o_wpl_H

				'Compute a sensible heat flux from Hs and LE_wpl.
				Hc = (Hs-(rho_a_mean*CP*0.51*RD*(hmp_t_mean+273.15)*(hmp_t_mean+273.15)*LE_wpl)/(press_mean*LV))*((hmp_t_mean+273.15)/(Ts_mean+273.15))

				'LI-7500 Webb et al. term for carbon dioxide Eq. (24).
				co2_wpl_LE = MU_WPL*co2_mean/rho_d_mean*cov_Uz_h2o
				co2_wpl_H  = (1+(MU_WPL*sigma_wpl))*co2_mean/(hmp_t_mean+273.15)*Hc/(rho_a_mean*CP)
				Fc_wpl = Fc_irga + co2_wpl_LE + co2_wpl_H

				'REA: Compute rotation angles from flux data
				CE = Ux_mean/SQR(Ux_mean^2+Uy_mean^2)
				SE = Uy_mean/SQR(Ux_mean^2+Uy_mean^2)
				CT = SQR(Ux_mean^2+Uy_mean^2) / SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)
				ST = Uz_mean/SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)

				'Footprint calculations, Hsieh et al, 2000
				L = -u_star^3*(hmp_t_mean+273.15)/(0.4*9.8*cov_Uz_Ts) 	'Obukohov Length
				Zu = zm*( log(zm/zo)-1+zo/zm )
				If ABS(zu/L)<0.04 then 	'neutral
					Dh = 0.97
					Ph = 1
				ElseIf L < 0 		'unstable
					Dh = 0.28
					Ph = 0.59
				Else 			'stable
					Dh=2.44
					Ph=1.33
				EndIf

				x70 = Dh/(0.357*0.4*0.4)*(ABS(L))^(1-Ph)*zu^Ph

				'check to see if footprint is within source area
				old_footprt_OK = footprt_OK
				footprt_OK = FALSE
				easting = 0
				westing = 0
				southing = 0
				northing = 0
				
				If ( wnd_dir_compass >= wdir_min AND wnd_dir_compass <= wdir_max ) Then
					If ( wnd_dir_compass >= 0 AND wnd_dir_compass <= 90 ) Then
						alpha = (PI/180)*wnd_dir_compass
						easting = sin(alpha)*x70
						northing = cos(alpha)*x70
						If ( easting < x_east_max AND northing < x_north_max ) Then
							footprt_OK = TRUE
						Endif
					Elseif ( wnd_dir_compass >= 90 AND wnd_dir_compass <= 180 ) Then
						alpha = (PI/180)*(wnd_dir_compass-90)
						easting = cos(alpha)*x70
						southing = sin(alpha)*x70
						If ( easting < x_east_max AND southing < x_south_max ) Then
							footprt_OK = TRUE
						Endif
					Elseif ( wnd_dir_compass >= 180 AND wnd_dir_compass <= 270 ) Then
						alpha = (PI/180)*(wnd_dir_compass-180)
						westing = sin(alpha)*x70
						southing = cos(alpha)*x70
						If ( westing < x_west_max AND southing < x_south_max ) Then
							footprt_OK = TRUE
						Endif
					Elseif ( wnd_dir_compass >= 270 AND wnd_dir_compass < 360) Then
						alpha = (PI/180)*(wnd_dir_compass-270)
						westing = cos(alpha)*x70
						northing = sin(alpha)*x70
						If ( westing < x_west_max AND northing < x_north_max ) Then
							footprt_OK = TRUE
						Endif
					Endif
				Endif

				'rotate sig_w
				cov_Uz_Uz_rot = cov_Uz_Uz*CT^2+cov_Ux_Ux*ST^2*CE^2+cov_Uy_Uy*ST^2*SE^2-2*cov_Uz_Ux*CT*CE*ST-2*cov_Uz_Uy*CT*ST*SE+2*cov_Ux_Uy*CE*ST^2*SE
				sig_w_rot = SQR(cov_Uz_Uz_rot)

				'integral turbulence test following Hammerle et al. (2007)
				Zeta = zm/L
				old_itt = itt
				If ( zeta < 0 AND zeta >= -2 ) Then
					itt_model = 1.25*( 1+3*ABS(zeta) )^0.333
				Endif
				If ( zeta >= 0 AND zeta < 1 ) Then
					itt_model = 1.25*( 1+0.2*zeta )
				Endif
				itt_meas = sig_w/u_star
				If ( zeta >= -2 AND zeta < 1 ) Then
					itt = 100*ABS(itt_meas-itt_model)/itt_model
				Else
					itt=999
				Endif

				'REA dynamic deadband calcuations
				sig_w = SQR(cov_Uz_Uz)		'stdev of w
				Dband = 0.5*sig_w 		'dynamic deadband

				K_d_mean = rho_d_mean/( 101/((25+273.15)*RD) ) 	'MFC correction factors K
				K_a_mean = rho_a_mean/( 101/((25+273.15)*RD) )

				'set chemcomb sampling rate, recirulation rate
				chemc_flow = sig_w*10 
				If chemc_flow > 10 Then chemc_flow = 10
				
				If samp_flow = 10 Then chemc_flow = 10

				'set flow on makup air / zero air
				makeup_flow = sig_w	
				If makeup_flow > 1.0 Then makeup_flow = 1.0
				If makeup_flow < 0.4 Then makeup_flow = 0.4
				CAO_2_mv = 5000*2*makeup_flow/5.0/K_d_mean

				Elapse1 = Timer(1,Min,4) 			'read sample duration timer

				'when delay start timer is exceeded
				ElapseDay = Day_of_Year-Startday
				IF (ElapseDay>=delay_days AND (rHour=delay_TOD OR delay_TOD=Now) AND NOT REA_flag_on ) Then 	
					REA_flag_on = TRUE
					delay_days = 0
					delay_TOD = Now
				Endif

				'check footprint & ITT are OK and it's not raining
				If (footprt_OK AND old_footprt_OK AND itt<30 AND old_itt<30 AND RH_mean<0.9 AND old_RH_mean<0.9) Then
					weather_OK = TRUE
				Else
					weather_OK = FALSE
				EndIf

				If tot_samp_hrs < 24 Then weather_OK = TRUE 		'in snapshot mode, override weather
				
				'control REA sampling: check for REA_flag, timer duration, and weather
				If ( REA_flag_on AND Elapse1 < countdown_timer AND Weather_OK ) Then
					Elapse1 = Timer(1,Min,0)	'start timer
					WriteIO (&B1000,&B1000) 	'set port 4 high, pump on
					PortOn_4=1
					WriteIO (&B11,&B11) 		'set port 1 high and port 2 high, all MFCs open
					PortOn_1=1
					PortOn_2=1
					CAO_1_mv = 5000*chemc_flow/10.0/K_d_mean 	'set MFC volt out
				Else
					WriteIO (&B1000,&B0000) 			'set port 4 low, pump off
					PortOn_4=0
					WriteIO (&B11,&B10) 				'set port 1 low/2 high, only zero air on
					PortOn_1=0
					PortOn_2=1
					CAO_1_mv=0
					Elapse1 = Timer(1,Min,1)			'stop timer
				EndIf
				
				'if total sampling duration has exceeded allotted sampling time
				If ( Elapse1 >= countdown_timer OR control_flag = Reset ) Then
					REA_flag_on = FALSE   			'turn off REA flag
					fin_flag_on = TRUE 				'set completion flag
					If NUM_DAY_CRD > 0 Then 			'If a card is used, add filemarks after finishing
						FileMark(flux)
						FileMark(ts_site)
						FileMark(ts_REA)
					EndIf
				Endif

			EndIf

			If save_flag Then CallTable flux

			scan_count = scan_count+1
		Else
			scan_count = scan_count+1
		EndIf

'		'control exhaust/cooling fan
'		If panel_temp > 35 Then
'			SW12 (1)
'		Else
'			SW12 (0)
'		Endif
		
	NextScan
EndProg
