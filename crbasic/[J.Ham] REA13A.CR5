'CR5000 Series Datalogger
'REA13x.CR5
'Program for Feedlot REA
'date: 9/24/07
'program author: Jay Ham

'The following sensors are measured:
'
'CSAT3		three dimensional sonic anemometer
'LI-7500		open path infrared gas analyzer (CO2 and H2O)
'AFC 	      	alborg mass flow controllers (4 units), MFCs
'PX181B		Vacuum gauge	Omega #PX181B-015VAC5V,0 to -14.7 psi, 1-5V out
'PX482A-3KSI	Pressure gauge Omega PX482A-3KSI, 4-20 ma, 0-3000 psi
'IRT			Everest Interscience,
'HMP45C		optional
'Rain Gauge		optional

' The sign convention for the fluxes is positive away from the surface and negative
'toward the surface.
'
' The cr5000 will introduce lags into the CSAT3, LI-7500, and cr5000 Panel
'Temperature data so that all measurements are aligned in time.  The lags are a
'function of the Scan Interval and are computed automatically by the program.
'
' The site attendant must load in several constants and calibration values.  Search
'for the text string "unique" to find the locations where unique constants and
'calibration values are entered.

'*** Unit Definitions ***

'Units	Units
'C		Celsius
'degrees	degrees (angle)
'g		grams
'J		Joules
'kg		kilograms
'kPa		kilopascals
'm		meters
'mg		milligrams
'mmol	millimoles
'mol		moles
's		seconds
'umol	micromols
'V		volts
'W		Watts

'*** Program Control Flags ***

' The Program Control Menu allows the station operator to conveniently change the
'status of the program control Flags using the cr5000 keyboard display.

'Save Fluxes?					"Yes" (default) process flux data.
'{save_flx_flag_on}		"No" do not process flux data,set NO when chemcomb being loaded
'
'Save Time Series?		"Yes" (default) save time series data.
'{save_ts_flag_on}		"No" stop collecting time series data.

'Start_new_run?      "Yes" set high to start new run,
'{new_flag_on}		    "No" (default)


'total_hours samp?		total number of hours to sample
'{tot_samp_hrs}			  "0,2,4,24,48,72" (0 = default)

'Delayed Start?			  number of hours to delay start after new_flag_on set
'{delay_start}				"0,2,24,48,72" (0 = default)

'System Reset?        "Yes" reset system vars
'{REA_reset_on}		    "No" (default)


'*** Wiring ***

'SDM INPUT
'C1		CSAT3 SDM Data (green)
'		LI-7500 SDM Data (gray)
'		SDM AO4
'C2		CSAT3 SDM Clock (white)
'		LI-7500 SDM Clock (blue)
'		SDM AO4
'C3		CSAT3 SDM Enable (brown)
'		LI-7500 SDM Enable (brown)
'		SDM AO4
'G		CSAT3 SDM reference (black)
'		CSAT3 SDM shield (clear)
'		LI-7500 SDM reference (black)
'		LI-7500 SDM shield (white)
'		SDM AO4

'Control Ports for Valve and Pump
'C1 TTL Valve OFF on MFCs 1 and 2, recircultating
'C2 TTL Valve OFF on MFCs 3 and 4, shield gas
'C3
'C4  Air Pump Control
'C5 REA Valve for chemcomb - Up Eddies (East)
'C6 REA Valve for chemcomb  - Dn Eddies (West)
'C7 Fab Control
'C8

'ANALOG INPUT
'(DE11)   Mass Flow Controller #1, REA circulate, up eddy, east
'(DE12)   Mass Flow Controller #2, REA circulate, dn eddy, west
'(DE13)   Mass Flow Controller #3, zero air, up eddy, east
'(DE14)   Mass Flow Controller #4, zero air, dn eddy, west
'(SE5)   Pressure guage on zero air tanks, w 120 ohm shunt
'(SE6)	 Vacuum Gauge
'(D4H)	 IRT +
'(D4L)	 IRT -
'(SE9)	 HMP45 Temperature
'(SE10)	 HMP45 Humidity
'(D6H)	 Pyranometer (optional)
'(D6L)	 Pyranometer
'(D7H)	 Net Radiometer (optional)
'(D7L)	 Net Radiometer
'(SE15)	 jumper to C5
'(SE16)  jumper to C6
'(SE17)	Pressure transducer, REA-Vent up
'(SE18)	Pressure transducer, REA-Vent dn
'(P1)		 Rainfall (optional)


'G		Ground on MFC power supply
'
'ANALOG OUTPUTS
'CAO1  two MFCs controlling flow through chemcombs, 0-15 L/min
'CAO2	 two MFCs controlling flow from zero air tanks, 0-10 L/min
'
'POWER IN
'12V		CR5000 (red)
'G		CR5000 (black)
'
'EXTERNAL POWER SUPPLY
'POS		CSAT3 power (red)
'		LI-7500 power (red with white)
'		CR5000 (red)
'NEG		CSAT3 power reference (black)
'		CSAT3 power shield (clear)
'		LI-7500 power reference (red with black)
'		LI-7500 ground (green)
'		CR5000 (black)


'*** Constants **

'Measurement Rate						'20 Hz
Const SCAN_INTERVAL = 50		'50 mSec

'Output period
Const OUTPUT_INTERVAL = 30	'Online flux data output interval in minutes.
Const NUM_DAY_CPU = 7			   'Number of days of data to store on the CPU.
Const NUM_DAY_CRD = 21			'Number of days of data to store on the card.

Const CSAT3_AZIMUTH = -152		'Unique value. {-152 = sonic pointing 208 deg, 208-360'
'Compass azimuth of the -x axis.  For the figure
' below, CSAT3_AZIMUTH = 90.
' () -> Compass coordinate system
' {} -> Right handed coordinate system aligned to north
'
'
'                               (N)
'                               {-y}
'                                |
'                                |
'                                |
'                                |
'                                |
'                                |
'              (W) {+x} --------[ ]----X---> {-x} (E)
'                              / |      \
'                    CSAT3 Block |      CSAT3 Transducers
'                                |
'                                |
'                                v
'                               {+y}
'                               (S)
'
'The program computes the compass wind direction, using the constant
' CSAT3_AZIMUTH, and a CSAT3 wind direction.  Good CSAT3 wind directions
' are between -90 to 0 and 0 to 90 degrees, e.g. the wind is blowing into
' the CSAT3 sensor head.


Const OFFSET = 16						'An offset delay that will be introduced to the CSAT3 and LI-7500 data.
Const DELAY_CSAT = 2					'Fixed inherent lag of the CSAT3 data (two scans).
Const DELAY_IRGA = INT (300/SCAN_INTERVAL)	'Fixed inherent lag of the LI-7500 data (three scans at 10 Hz or six scans at 20 Hz).

'Determine scan buffer size, CSAT3 Execution Parameters and fixed lags for CSAT3 and LI-7500.
Const SCAN_BUFFER_SIZE = 300*INT (1000/SCAN_INTERVAL)	'Compute 5 minute scan buffer.
Const CSAT_OPT = INT (1000/SCAN_INTERVAL)			'Compute CSAT3 Execution Parameter (10 or 20 Hz).
Const CSAT_REC_BCK = OFFSET-DELAY_CSAT				'Number of records back to align CSAT3 data.
Const IRGA_REC_BCK = OFFSET-DELAY_IRGA				'Number of records back to align LI-7500 data.

'Compute CPU and card storage size for the FLUX DataTables.
Const FLUX_SIZE_CPU = (NUM_DAY_CPU*1440)/OUTPUT_INTERVAL'Size of flux DataTable on CPU [days].
Const FLUX_SIZE_CRD = (NUM_DAY_CRD*1440)/OUTPUT_INTERVAL'Size of flux DataTable on card [days].

Const CP = 1004.67				'Estimate of heat capacity of air [J/(kg K)].
Const LV = 2440				'Estimate of the latent heat of vaporization [J/g].
Const SDM_PER = 30				'Default SDM clock speed.
Const MU_WPL = 29/18			'Ratio of the molecular weight of dry air to that of water vapor.
Const R = 8.3143e-3				'Universal gas constant [kPa m^3/(K mol) ].
Const RD = R/29				'Gas constant for dry air [kPa m^3/(K g)].
Const RV = R/18				'Gas constant for water vapor [kPa m^3/(K g)].

'Custom Menu constants.
Const YES = -1					'Yes is defined as -1 (TRUE).
Const NO = 0					'No is defined as 0 (FALSE).

'sendor height and surface roughness
Const zm = 5.6 						'Measurement Height, m, above displacement ht
Const zo =0.04						'roughtness length, m

'define source area of feedlot for footprint calculations, Larned
Const x_east_max = 300		'feedlot boundary, dist from tower, max
Const x_south_max = 1600	'feedlot boundary, dist from tower, max
Const x_west_max = 100		'feedlot boundary, dist from tower, max
Const wdir_min = 110			'min wind direction, wdir<min outside source area
Const wdir_max = 240			'max wind direction, wdir>max outside source area

'define source area of feedlot for footprint calculations, KSU Beef Unit
'Const x_east_max = 80		'feedlot boundary, dist from tower, max
'Const x_south_max = 300	'feedlot boundary, dist from tower, max
'Const x_west_max = 110		'feedlot boundary, dist from tower, max
'Const wdir_min = 90				'min wind direction, wdir<min outside source area
'Const wdir_max = 240			'max wind direction, wdir>max outside source area

'*** Variables ***

'Online lagged CSAT3 and LI-7500 data.
Public aligned_data(15)
Alias aligned_data(1) = Uz
Alias aligned_data(2) = Ux
Alias aligned_data(3) = Uy
Alias aligned_data(4) = co2
Alias aligned_data(5) = h2o
Alias aligned_data(6) = not_used_1
Alias aligned_data(7) = Ts
Alias aligned_data(8) = not_used_2
Alias aligned_data(9) = diag_csat
Alias aligned_data(10) = press
Alias aligned_data(11) = diag_irga
Alias aligned_data(12) = panel_temp
Alias aligned_data(13) = Uz_valve_lag
Alias aligned_data(14) = PortOn_5_lag
Alias aligned_data(15) = PortOn_6_lag


Units Uz = m/s
Units Ux = m/s
Units Uy = m/s
Units co2 = mg/m^3
Units h2o = g/m^3
Units Ts = C
Units diag_csat = unitless
Units press = kPa
Units diag_irga = unitless
Units panel_temp = C

Public co2_um_m
Public h2o_mm_m
Units co2_um_m = umol/mol
Units h2o_mm_m = mmol/mol


Public diag_bits(8) AS Boolean	'Warning flags.
Alias diag_bits(1) = del_T_f		'Delta temperature warning flag.
Alias diag_bits(2) = sig_lck_f	'Poor signal lock warning flag.
Alias diag_bits(3) = amp_h_f		'Amplitude high warning flag.
Alias diag_bits(4) = amp_l_f		'Amplitude low warning flag.
Alias diag_bits(5) = chopper_f	'Chopper warning flag.
Alias diag_bits(6) = detector_f	'Detector warning flag.
Alias diag_bits(7) = pll_f		'PLL warning flag.
Alias diag_bits(8) = sync_f		'Synchronization warning flag.
Units diag_bits = samples
Public agc AS Long				'Automatic gain control.
Units agc = unitless

'No delay meteorological variables.
Public hmp(2)					'HMP45C temperature and relative humidity.
Public e_hmp					'HMP45C vapor pressure.
Dim h2o_hmp_mean			'Mean HMP45C vapor density.
Dim rho_a_mean				'Mean air density.
Public T_dew_mean			'Tdew from hmp
Public RH_mean, old_RH_mean 'RH from HMP
Public batt_volt			'cr5000 battery voltage.
Alias hmp(1) = t_hmp
Alias hmp(2) = rh_hmp
Units t_hmp = C
Units rh_hmp = percent
Units e_hmp = kPa
Units h2o_hmp_mean = g/m^3
Units rho_a_mean = kg/m^3
Units batt_volt = V
Units T_dew_mean = C

'No delay meteorological variables added for REA system
Public	Rs					'pyranometer, eppley 8-48
Public	Rnet				'net radiometer, REBs, uncorrected
Public 	IRT					'infrared transducer, everest
Public  Rain_mm, old_Rain			'tipping bucket
Units 	Rs = Wm2
Units 	Rnet = Wm2
Units 	IRT = C
Units 	Rain_mm = mm

'REA-specific variables (MFCs, Pressure, Vacuum)
Public MFC(4)
Public tank_pres
Public line_vac
Public pvent(4)
Alias MFC(1)=flow_rea_up
Alias MFC(2)=flow_rea_dn
Alias MFC(3)=flow_zer_up
Alias MFC(4)=flow_zer_dn
Alias pvent(1)=pres_vent_up
Alias pvent(2)=pres_vent_dn
Alias pvent(3)=pres_ventav_up
Alias pvent(4)=pres_ventav_dn
Units flow_rea_up = L/min
Units flow_rea_dn = L/min
Units flow_zer_up = L/min
Units flow_zer_dn = L/min
Units tank_pres = psi
Units line_vac = kPa
Units pres_vent_up = in
Units pres_vent_dn = in
Units pres_ventav_up = in
Units pres_ventav_dn = in


'Flux variables.
Dim Fc_wpl				'Carbon dioxide flux (LI-7500), with Webb et al. term.
Dim LE_wpl				'Latent heat flux (LI-7500), with Webb et al. term.
Dim Hs						'Sensible heat flux using sonic temperature.
Dim Hc						'Sensible heat flux computed from Hs and LE_wpl.
Dim tau											'Momentum flux.
Dim u_star,old_u_star				'Friction velocity.
Dim Fc_irga				'Carbon dioxide flux (LI-7500), without Webb et al. term.
Dim LE_irga				'Latent heat flux (LI-7500), without Webb et al. term.
Dim co2_wpl_LE		'Carbon dioxide flux (LI-7500), Webb et al. term due to latent heat flux.
Dim co2_wpl_H			'Carbon dioxide flux (LI-7500), Webb et al. term due to sensible heat flux.
Dim h2o_wpl_LE		'Latent heat flux (LI-7500), Webb et al. term due to latent heat flux.
Dim h2o_wpl_H			'Latent heat flux (LI-7500), Webb et al. term due to sensible heat flux.
Dim cov_out(53)		'Covariances of wind and scalars, wind vector, and t_hmp_mean, e_mean, co2_mean, press_mean, and Ts_mean.
Units Fc_wpl = mg/(m^2 s)
Units LE_wpl = W/m^2
Units Hs = W/m^2
Units Hc = W/m^2
Units tau = kg/(m s^2)
Units u_star = m/s
Units Fc_irga = mg/(m^2 s)
Units LE_irga = W/m^2
Units co2_wpl_LE = mg/(m^2 s)
Units co2_wpl_H = mg/(m^2 s)
Units h2o_wpl_LE = W/m^2
Units h2o_wpl_H = W/m^2


'Aliases for covariances.
Alias cov_out(1) = cov_Uz_Uz
Alias cov_out(2) = cov_Uz_Ux
Alias cov_out(3) = cov_Uz_Uy
Alias cov_out(4) = cov_Uz_co2
Alias cov_out(5) = cov_Uz_h2o
'            6 = cov_Uz_blank1
Alias cov_out(7) = cov_Uz_Ts
'           8 = cov_Uz_blank2     8 total
Alias cov_out(9) = cov_Ux_Ux
Alias cov_out(10) = cov_Ux_Uy
Alias cov_out(11) = cov_Ux_co2
Alias cov_out(12) = cov_Ux_h2o
'            13 = cov_Ux_blank1
Alias cov_out(14) = cov_Ux_Ts
'            15 = cov_Ux_blank2   7 total
Alias cov_out(16) = cov_Uy_Uy
Alias cov_out(17) = cov_Uy_co2
Alias cov_out(18) = cov_Uy_h2o
'            19 = cov_Uy_blank1
Alias cov_out(20) = cov_Uy_Ts
'            21 = cov_Uy_blank2   6 total
Alias cov_out(22) = cov_co2_co2
'            23 = cov_co2_h2o
'            24 = cov_co2_blank1
'            25 = cov_co2_Ts
'            26 = cov_co2_blank2
Alias cov_out(27) = cov_h2o_h2o
'            28 = cov_h2o_blank1
'            29 = cov_h2o_Ts
'            30 = cov_h2o_blank2
'            31 = cov_blank1_blank1
'            32 = cov_blank1_Ts
'            33 = cov_blank1_blank2
Alias cov_out(34) = cov_Ts_Ts
'            35 = cov_Ts_blank2
'            36 = cov_blank2_blank2
Units cov_Uz_Uz = (m/s)^2
Units cov_Uz_Ux = (m/s)^2
Units cov_Uz_Uy = (m/s)^2
Units cov_Uz_co2 = mg/(m^2 s)
Units cov_Uz_h2o = g/(m^2 s)
Units cov_Uz_Ts = m C/s
Units cov_Ux_Ux = (m/s)^2
Units cov_Ux_Uy = (m/s)^2
Units cov_Ux_co2 = mg/(m^2 s)
Units cov_Ux_h2o = g/(m^2 s)
Units cov_Ux_Ts = m C/s
Units cov_Uy_Uy = (m/s)^2
Units cov_Uy_co2 = mg/(m^2 s)
Units cov_Uy_h2o = g/(m^2 s)
Units cov_Uy_Ts = m C/s
Units cov_co2_co2 = (mg/m^3)^2
Units cov_h2o_h2o = (g/m^3)^2
Units cov_Ts_Ts = C^2

'            37 = wnd_spd duplicate
'            38 = rslt_wnd_spd duplicate

'Wind directions and speed.
Alias cov_out(39) = wnd_dir_compass
Alias cov_out(41) = wnd_spd
Alias cov_out(42) = rslt_wnd_spd
Alias cov_out(43) = wnd_dir_csat3
Alias cov_out(44) = std_wnd_dir
Alias cov_out(45) = t_hmp_mean
Alias cov_out(46) = e_hmp_mean
Alias cov_out(47) = co2_mean
Alias cov_out(48) = press_mean
Alias cov_out(49) = Ts_mean

Alias cov_out(50) = Ux_mean
Alias cov_out(51) = Uy_mean
Alias cov_out(52) = Uz_mean
Alias cov_out(53) = Rain

Units wnd_dir_compass = degrees
Units wnd_spd = m/s
Units rslt_wnd_spd = m/s
Units wnd_dir_csat3 = degrees
Units std_wnd_dir = degrees
Units t_hmp_mean = C
Units co2_mean = mg/m^3
Units press_mean = kPa
Units Ts_mean = C

Units Ux_mean = m/s
Units Uy_mean = m/s
Units Uz_mean = m/s

'REA sampling and rotation related Variables

Public CT							'rotation angles
Public ST
Public CE
Public SE
Units CT=radians
Units ST=radians
Units CE=radians
Units SE=radians
Public Uz_rot				'rotated vertical wind
Public Uz_valve				'value of Uz used for real time valve control

Public Elapse1, Elapse2, 'Elapse3		' timer for controlling sampling duration
Public Startday, ElapseDay
Public countdown_timer	'duration of sampling
Dim cov_Uz_Uz_rot
Public sig_w
Public sig_w_rot
Units Uz_rot=m/s
Units Elapse1 = hr
Units Elapse2 = min
'Units Elapse3= hr
Units countdown_timer = min
Units sig_w =m/s
Units sig_w_rot = m/s

Public L					'Obukhov length, used for footprint
Public x70				'distatance to include 70%, F/So=0.70
Public zeta				'z/L
Public itt,old_itt'integral turbulence text
Dim itt_model,itt_meas
Dim Dh						'for Hsieh footprint model
Dim Ph						'for Hsieh footprint model
Dim zu						'for Hsieh footprint model
Dim alpha
Dim easting
Dim westing
Dim southing

Public Dband				'deadband
Units Dband=m/s
Public K_d_mean					'correction factors for MFCs dry air
Public K_a_mean					'correction factors for MFCs moist air
Units K_d_mean = ratio
Units K_a_mean = ratio
Public CAO_1_mv						 	'output voltages for controlling MFC
Public CAO_2_mv							'output voltages for controlling MFC
Units CAO_1_mv = mv
Units CAO_2_mv = mv
Public chemc_flow						'sample rate for chemcombs
Public makeup_flow					'sample rate for makup air / shield gas
Units chemc_flow = L/min
Units makeup_flow = L/min
Public PortOn_1 						'MFC 1 and 2 Off/On
Public PortOn_2							'MFC 3 and 4 Off/On
Public PortOn_4							'turns air pump off/on
Public PortOn_5							'REA valve up eddy
Public PortOn_6							'REA valve dn eddy

'Diagnostic variables.
Dim disable_flag_on(4) AS Boolean	'Intermediate processing disable flags.
'disable_flag_on(1)			'TRUE when CSAT3 diagnostic warning flags are on or CSAT3 has no data.
'disable_flag_on(2)			'TRUE when LI-7500 diagnostic warning flags are on or LI-7500 failed to send data.
'disable_flag_on(3)			'TRUE when CSAT3 diagnostic warning flags are on.
' Used to filter the sum of CSAT3 diagnostic warning flags.
'disable_flag_on(4)			'TRUE when LI-7500 diagnostic warning flags are on.
' Used to filter the sum of LI-500 diagnostic warning flags.
Dim n						'Number of samples in the online covariances.
Units n = samples


'Program Control flags and variables
Public save_flx_flag_on AS Boolean
Public save_ts_flag_on AS Boolean
Public REA_flag_on AS Boolean
Public new_flag_on AS Boolean
Public fin_flag_on AS Boolean
Public delay_start
Public delay_TOD
Public REA_reset_on AS Boolean
Public tot_samp_hrs
Public Weather_OK AS Boolean
Public footprt_OK AS Boolean
Public old_footprt_OK AS Boolean

'No delay CSAT3 data.
Dim wind_raw(5)
Alias wind_raw(1) = Ux_raw
Alias wind_raw(2) = Uy_raw
Alias wind_raw(3) = Uz_raw
Alias wind_raw(4) = Ts_raw
Alias wind_raw(5) = diag_csat_raw
Units wind_raw = m/s
Units Ts_raw = C
Units diag_csat_raw = unitless

'No delay LI-7500 data.
Dim irga_raw(4)
Alias irga_raw(1) = co2_raw
Alias irga_raw(2) = h2o_raw
Alias irga_raw(3) = press_raw
Alias irga_raw(4) = diag_irga_raw
Units co2_raw = umol/m^3
Units h2o_raw = mmol/m^3
Units press_raw = kPa
Units diag_irga_raw = unitless

'No delay analog measurements.
Dim panel_temp_raw
Units panel_temp_raw = C

'Working variables.
Dim co2_mm_m3					'Carbon dioxide concentration [mmol/m^3], used to compute umol/mol concentration.
Dim h2o_mm_m3					'Water vapor concentration [mmol/m^3], used to compute vapor pressure and mmol/mol concentration.
Dim sigma_wpl					'Webb et al. sigma = density of water vapor / density of dry air.
Dim scan_count AS Long			'Number scans executed.
Dim wind_east					'East wind in compass coordinate system.
Dim wind_north					'North wind in compass coordinate system.
Dim even_min_flag_on AS Boolean	'Used to synchronize the time series output to the even minute.
Dim dly_data_out(17)			'Variable used to temporarily store the lagged record.
Dim place_holder(2)				'Place holder variable in the DataTable dly_data_out.
Dim one_more_record AS Boolean	'Used to write one more time series record with a file mark.
Dim rho_d_mean					'Density of dry air used in Webb et al. term [kg / m^3].
Dim diag_csat_work AS Long		'Working variable used to break out the CSAT3 diagnostic bits.
Dim diag_irga_work AS Long		'Working variable used to break out the LI-7500 diagnostic bits.


'clock variables
Public rTime(9)	'declare as public and dimension rTime to 9
Alias rTime(1) = rYear	'assign the alias Year to rTime(1)
Alias rTime(2) = rMonth	'assign the alias Month to rTime(2)
Alias rTime(3) = rDay	'assign the alias Day to rTime(3)
Alias rTime(4) = rHour	'assign the alias Hour to rTime(4)
Alias rTime(5) = rMinute	'assign the alias Minute to rTime(5)
Alias rTime(6) = rSecond	'assign the alias Second to rTime(6)
Alias rTime(7) = ruSecond	'assign the alias uSecond to rTime(7)

Alias rTime(8) = WeekDay	'assign the alias WeekDay to rTime(8)
Alias rTime(9) = Day_of_Year	'assign the alias Day_of_Year to rTime(9)


'*** Final Output Data Tables ***

'Online flux data.
DataTable (flux,TRUE,FLUX_SIZE_CPU)
	DataInterval (0,OUTPUT_INTERVAL,Min,10)
	CardOut (0,FLUX_SIZE_CRD)

	Sample (1,Fc_wpl,IEEE4)
	Sample (1,LE_wpl,IEEE4)
	Sample (1,Hs,IEEE4)
	Sample (1,Hc,IEEE4)
	Sample (1,tau,IEEE4)
	Sample (1,u_star,IEEE4)
	Sample (5,cov_Uz_Uz,IEEE4)
	Sample (1,cov_Uz_Ts,IEEE4)
	Sample (4,cov_Ux_Ux,IEEE4)
	Sample (1,cov_Ux_Ts,IEEE4)
	Sample (3,cov_Uy_Uy,IEEE4)
	Sample (1,cov_Uy_Ts,IEEE4)
	Sample (1,cov_co2_co2,IEEE4)
	Sample (1,cov_h2o_h2o,IEEE4)
	Sample (1,cov_Ts_Ts,IEEE4)

	Average (3,Uz,IEEE4,(disable_flag_on(1) OR NOT (save_flx_flag_on)))
	Sample (1,co2_mean,IEEE4)
	Average (1,h2o,IEEE4,(disable_flag_on(2) OR NOT (save_flx_flag_on)))
	Sample (1,Ts_mean,IEEE4)

	Sample (1,rho_a_mean,IEEE4)
	Sample (1,press_mean,IEEE4)
	Average (1,panel_temp,IEEE4,FALSE)

	Sample (1,wnd_dir_compass,IEEE4)
	Sample (1,wnd_dir_csat3,IEEE4)
	Sample (1,wnd_spd,IEEE4)
	Sample (1,rslt_wnd_spd,IEEE4)
	Average (1,batt_volt,IEEE4,FALSE)

	Sample (1,std_wnd_dir,IEEE4)

	Totalize (1,n,IEEE4,disable_flag_on(1) OR disable_flag_on(2) OR NOT (save_flx_flag_on))

	Totalize (1,n,IEEE4,NOT (disable_flag_on(1) OR disable_flag_on(3)) OR NOT (save_flx_flag_on))
	FieldNames ("csat_warnings")

	Totalize (1,n,IEEE4,NOT (disable_flag_on(2) OR disable_flag_on(4)) OR NOT (save_flx_flag_on))
	FieldNames ("irga_warnings")

	Totalize (1,n,IEEE4,NOT (del_T_f) OR NOT (disable_flag_on(3)) OR NOT (save_flx_flag_on))
	FieldNames ("del_T_f_Tot")
	Totalize (1,n,IEEE4,NOT (sig_lck_f) OR NOT (disable_flag_on(3)) OR NOT (save_flx_flag_on))
	FieldNames ("sig_lck_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_h_f) OR NOT (disable_flag_on(3)) OR NOT (save_flx_flag_on))
	FieldNames ("amp_h_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_l_f) OR NOT (disable_flag_on(3)) OR NOT (save_flx_flag_on))
	FieldNames ("amp_l_f_Tot")
	Totalize (1,n,IEEE4,NOT (chopper_f) OR NOT (disable_flag_on(4)) OR NOT (save_flx_flag_on))
	FieldNames ("chopper_f_Tot")
	Totalize (1,n,IEEE4,NOT (detector_f) OR NOT (disable_flag_on(4)) OR NOT (save_flx_flag_on))
	FieldNames ("detector_f_Tot")
	Totalize (1,n,IEEE4,NOT (pll_f) OR NOT (disable_flag_on(4)) OR NOT (save_flx_flag_on))
	FieldNames ("pll_f_Tot")
	Totalize (1,n,IEEE4,NOT (sync_f) OR NOT (disable_flag_on(4)) OR NOT (save_flx_flag_on))
	FieldNames ("sync_f_Tot")
	Average (1,agc,IEEE4,disable_flag_on(2) OR NOT (save_flx_flag_on))

	Sample (1,Fc_irga,IEEE4)
	Sample (1,LE_irga,IEEE4)
	Sample (1,co2_wpl_LE,IEEE4)
	Sample (1,co2_wpl_H,IEEE4)
	Sample (1,h2o_wpl_LE,IEEE4)
	Sample (1,h2o_wpl_H,IEEE4)
	Sample (1,h2o_hmp_mean,IEEE4)
	Sample (1,t_hmp_mean,IEEE4)
	Sample (1,T_dew_mean,IEEE4)
	Sample (1,RH_mean,IEEE4)

	'REA variables
	Average (1,Rs,IEEE4,False)
	Average (1,Rnet,IEEE4,False)
	Average (1,IRT,IEEE4,FALSE)
	Totalize (1,Rain_mm,FP2,False)

	Average (1,K_d_mean,IEEE4,False)
	Average (4,MFC(),IEEE4,FALSE)
	StdDev (4,MFC(),IEEE4,False)
	Average (2,pvent(),IEEE4,FALSE)
	StdDev (2,pvent(),IEEE4,False)
	Average (1,tank_pres,IEEE4,FALSE)
	Average (1,line_vac,IEEE4,FALSE)

	Sample (1,Dband,IEEE4)
	Average (1,Uz_raw,IEEE4,False)
	Average (1,Uz_rot,IEEE4,False)
	Sample (1,CE,IEEE4)
	Sample (1,SE,IEEE4)
	Sample (1,CT,IEEE4)
	Sample (1,ST,IEEE4)

	Sample (1,L,IEEE4)
	Sample (1,x70,IEEE4)
	Sample (1,itt,IEEE4)
	Sample (1,southing,IEEE4)
	Sample (1,easting,IEEE4)
	Sample (1,westing,IEEE4)

	Sample (1,footprt_OK,boolean)
	Sample (1,Weather_OK,boolean)

	Sample(1,tot_samp_hrs,FP2)
	Sample (1,Elapse2,FP2)

	Sample(1,delay_start,FP2)
	Sample(1,delay_TOD,FP2)
	'Sample (1,Elapse3,FP2)

	Sample (1,REA_flag_on,boolean)
	Sample (1,fin_flag_on,boolean)
	Sample (1,PortOn_1, FP2)
	Sample (1,PortOn_2, FP2)
	Sample (1,PortOn_4, FP2)
	Totalize(1,PortOn_5,IEEE4,False)
	Totalize(1,PortOn_6,IEEE4,False)


EndTable


'Set "Save Time Series?" menu option to "Yes" to save time series data.
DataTable (ts_data,even_min_flag_on,-1)
	DataInterval (0,SCAN_INTERVAL,mSec,100)
	CardOut (0,-1)

	'eddy cov variables
	Sample (1,Ux,IEEE4)
	Sample (1,Uy,IEEE4)
	Sample (1,Uz,IEEE4)
	Sample (1,co2,IEEE4)
	Sample (1,h2o,IEEE4)
	Sample (1,Ts,IEEE4)
	Sample (1,press,IEEE4)
	Sample (1,diag_csat,IEEE4)
	Sample (1,t_hmp,IEEE4)
	Sample (1,e_hmp,IEEE4)

	'REA variables
	Sample (1,Uz_valve_lag,IEEE4)
	Sample (1,Dband,IEEE4)
	Sample (1,flow_rea_up,IEEE4)
	Sample (1,flow_rea_dn,IEEE4)
	Sample (1,flow_zer_up,IEEE4)
	Sample (1,flow_zer_dn,IEEE4)
	Sample (1,PortOn_5_lag,IEEE4)
	Sample (1,PortOn_6_lag,IEEE4)

EndTable


'*** Working Data Tables ***

'Reorder the data and prepare to lag all the data.
DataTable (dly_data,TRUE,OFFSET)

	Sample (1,Uz_raw,IEEE4)						'1
	Sample (1,Ux_raw,IEEE4)						'2
	Sample (1,Uy_raw,IEEE4)						'3
	Sample (1,co2_raw,IEEE4)					'4
	Sample (1,h2o_raw,IEEE4)					'5
	Sample (1,place_holder(1),IEEE4)	'6
	Sample (1,Ts_raw,IEEE4)						'7
	Sample (1,place_holder(2),IEEE4)	'8
	
	Sample (1,diag_csat_raw,IEEE4)		'9
	Sample (1,press_raw,IEEE4)				'10
	Sample (1,diag_irga_raw,IEEE4)		'11
	Sample (1,panel_temp_raw,IEEE4)		'12

	Sample (1,Uz_valve,IEEE4) 				'13
	Sample (1,PortOn_5,IEEE4)					'14
	Sample (1,PortOn_6,IEEE4)					'15
EndTable


'Compute the covariances of Uz, co2, h2o, and Ts, as well as the other cross
'products, required to rotate the data into natural wind coordinates.
'This data is output every OUTPUT_INTERVAL minutes.
DataTable (comp_cov,TRUE,1)
	DataInterval (0,OUTPUT_INTERVAL,Min,1)

	Covariance (8,aligned_data(1),IEEE4,(disable_flag_on(1) OR disable_flag_on(2) OR NOT (save_flx_flag_on)),36)
	WindVector (1,wind_east,wind_north,IEEE4,(disable_flag_on(1) OR NOT (save_flx_flag_on)),0,1,2)
	WindVector (1,Uy,Ux,IEEE4,(disable_flag_on(1) OR NOT (save_flx_flag_on)),0,1,2)
	Average (1,t_hmp,IEEE4,FALSE)
	Average (1,e_hmp,IEEE4,FALSE)
	Average (1,co2,IEEE4,disable_flag_on(2) OR NOT (save_flx_flag_on))
	Average (1,press,IEEE4,disable_flag_on(2) OR NOT (save_flx_flag_on))
	Average (1,Ts,IEEE4,disable_flag_on(1) OR NOT (save_flx_flag_on))

	Average (1,Ux,IEEE4,disable_flag_on(1) OR NOT (save_flx_flag_on))
	Average (1,Uy,IEEE4,disable_flag_on(1) OR NOT (save_flx_flag_on))
	Average (1,Uz,IEEE4,disable_flag_on(1) OR NOT (save_flx_flag_on))
	
	Totalize (1,Rain_mm,FP2,False)

EndTable



'*** Define Program Control Menu ***

DisplayMenu ("Program Control",TRUE)

	MenuItem ("Save Fluxes?",save_flx_flag_on)
	MenuPick (Yes,No)

	MenuItem ("Save Time Series?",save_ts_flag_on)
	MenuPick (Yes,No)

	MenuItem ("Start new samp run?",new_flag_on)
	MenuPick (Yes,No)

	MenuItem ("Tot Samp Duration?",tot_samp_hrs)
	MenuPick (0,2,4,24,48,72)

	MenuItem ("Delay Start Days?",delay_start)
	MenuPick (0,1,2,3,4,5,6,7)

	MenuItem ("Delay Start TOD?",delay_TOD)
	MenuPick (0,4,8,10,11,12,13,14,16,20)

	MenuItem ("System Reset?",REA_reset_on)
	MenuPick (Yes,No)

EndMenu


'*** Program ***

BeginProg

	n = 1

	'Save fluxes on compile.
	save_flx_flag_on = TRUE

	'Save time series on compile.
	save_ts_flag_on = TRUE

	'REA off on compile
	REA_flag_on = FALSE
	fin_flag_on = FALSE
	new_flag_on = FALSE
	delay_start = 0
	delay_TOD = 0
	tot_samp_hrs = 0
	REA_reset_on = FALSE
	footprt_OK = TRUE

	'set port status indicators
	PortOn_1=0
	PortOn_2=0
	PortOn_4=0
	PortOn_5=0
	PortOn_6=0

	'Set Inital Rotation Angles
	CT=1.0
	ST=0
	CE=0
	SE=0

	'Set Deadband on compile
	Dband = 0.1

	'Set all CSAT3 variables to NaN.
	Move (Ux_raw,5,NaN,1)

	'Set all LI-7500 variables to NaN.
	Move (co2_raw,4,NaN,1)

	'Set the SDM clock speed.
	SDMSpeed (SDM_PER)

	'Activate MFCs 3 and 4 on startup

	WriteIO (&B10,&B10) 'set port 2 high
	PortOn_2=1
	CAO_2_mv=2500 ' set intial flow for makeup air MFCs


	Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)

		'CR5000 panel temperature.
		PanelTemp (panel_temp_raw,250)

		'Get CSAT3 wind and sonic temperature data.
		CSAT3 (Ux_raw,1,3,91,CSAT_OPT)

		'Get LI-7500 data.
		CS7500 (co2_raw,1,7,6)

		'REA: rotate vertical wind speed
		Uz_rot = Uz_raw*CT-Ux_raw*ST*CE-Uy_raw*ST*SE
		Uz_valve=Uz_rot

		If Uz_valve>=Dband Then
			WriteIO (&B110000,&B010000) 'set port 5 high
			PortOn_5=1
			PortOn_6=0
		Elseif Uz_valve<=-Dband Then
			WriteIO (&B110000,&B100000) 'set port 6 high
			PortOn_5=0
			PortOn_6=1
		Else
			WriteIO (&B110000,&B000000) 'set ports 5 and 6 low
			PortOn_5=0
			PortOn_6=0
		EndIf

		'set MFCs
		ExciteCAO (CAO1,CAO_1_mv,True,False )
		ExciteCAO (CAO2,CAO_2_mv,True,False )

		'Measure Additional Met and REA variables variables

		'Measure the HMP45C temperature and fraction humidity.
		VoltSe (t_hmp,2,mV1000,9,TRUE,200,250,0.1,0)

		'Measure battery voltage.
		Battery (batt_volt)

		'Find the engineering units for the HMP45C temperature.
		t_hmp = t_hmp-40

		't_hmp=panel_temp_raw 'jmh
		'rh_hmp=50							'jmh

		'Find the HMP45C vapor pressure (kPa).
		VaporPressure (e_hmp,t_hmp,rh_hmp)

		'pyranometer
		VoltDiff (Rs,1,mV200,6,False,200,250,99.1,0) 'unique value
		If Rs<0 Then Rs=0

		'net radiometer
		VoltDiff(Rnet,1,mV200,7,True,200,250,1,0)
		If Rnet>=0 Then
			Rnet=Rnet*10   	'postive mult, unique value
		Else
			Rnet=Rnet*10		'neg mult, unique value
		EndIf

		'IRT
		VoltDiff (IRT,1,mV1000,4,False,200,250,0.14,-40)

		'Rain gauge
		PulseCount(Rain_mm,1,1,2,0,0.1,0)

		'Measure the MFCs controlling REA recirculation rate, 0-15L/min fullscale
		VoltDiff (flow_rea_up,2,mV5000,11,True,200,250,0.003,0)


		'Measure the MFCs controlling zero air injection, 0-1 L/min fullscale
		VoltDiff (flow_zer_up,2,mV5000,13,True,200,250,0.0002,0)


		'Measure the Pressure gauge on the zero air cylinders, Psi
		VoltSe (tank_pres,1,mV5000,5,True,200,250,0.75,-750) 	' current output
		'VoltSe (tank_pres,1,mV5000,5,True,200,250,0.6,0) 			' volt output

		'Meausure the vacuum in REA flow loop, kPa
		VoltSe (line_vac,1,mV5000,6,True,200,250,0.00768,-3.69)

		'Meausure the pressire through vents on REA valves, 0 to 15" of h20
		VoltSe (pres_vent_up,2,mV5000,17,True,200,250,0.003,0)

		AvgRun (pres_ventav_up,2,pres_vent_up,40)

		'Lag the CSAT3 and LI-7500 measurements.
		CallTable dly_data

		If ( scan_count >= OFFSET ) Then

			'Load in the analog data that has been lagged by OFFSET scans.
			GetRecord (dly_data_out(1),dly_data,OFFSET)
			Move (panel_temp,1,dly_data_out(12),1)	'panel_temp
			Move (PortOn_5_lag,2,dly_data_out(14),2) 'porton_5,porton_6

			'Load in CSAT3 data that has been lagged by CSAT_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,CSAT_REC_BCK)
			Move (Uz,3,dly_data_out(1),3)		'Uz, Ux, Uy
			Move (Ts,1,dly_data_out(7),1)		'Ts
			Move (diag_csat,1,dly_data_out(9),1)	'diag_csat
			Move (Uz_valve_lag,1,dly_data_out(13),1)		'Uz_Valve

			'Load in the LI-7500 data that has been lagged by IRGA_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,IRGA_REC_BCK)
			Move (co2,2,dly_data_out(4),2)		'co2, h2o
			Move (press,2,dly_data_out(10),2)		'press, diag_irga

			'Copy and convert CSAT3 for compass wind vector computation.
			wind_east = -1*Uy
			wind_north = Ux

			'Save the molar density to compute molar concentration.
			co2_mm_m3 = co2
			h2o_mm_m3 = h2o

			'Compute the molar concentration of CO2 and H2O.
			co2_um_m = co2_mm_m3*R*(t_hmp+273.15)/press*1000
			h2o_mm_m = h2o_mm_m3*R*(t_hmp+273.15)/press

			'Convert LI-7500 data from molar density [mmol/m^3] to mass density.
			' 44 [g/mol] - molecular weight of carbon dioxide
			' 0.018 [g/mmol] - molecular weight of water vapor
			If ( NOT (co2 = -99999) ) Then ( co2 = co2*44 )
			h2o = h2o*0.018

			'Define 61502 as NaN.
			If ( diag_csat = NaN ) Then ( diag_csat = 61502 )

			'Break up the four CSAT3 warning flags into four separate bits.
			diag_csat_work = diag_csat
			del_T_f = diag_csat_work AND &h8000
			sig_lck_f = diag_csat_work AND &h4000
			amp_h_f = diag_csat_work AND &h2000
			amp_l_f = diag_csat_work AND &h1000

			'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
			' high, including the special cases NaN (61502), a Lost Trigger (61440), No Data
			' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
			disable_flag_on(1) = diag_csat_work AND &hf000



			'Turn on only when CSAT3 diagnostic warning flags are set.
			disable_flag_on(3) = ( (del_T_f OR sig_lck_f OR amp_h_f OR amp_l_f) AND NOT (Ts = NaN) )

			'Save the four most significant bits of the CSAT3 diagnostics, except for the
			' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM
			' error (61441), or wrong CSAT3 embedded code (61442).
			If ( diag_csat_work < &hf000 ) Then ( diag_csat = INT (diag_csat_work/&h1000) )

			'process diagnostics for LI-7500

			'Swap the LI-7500 diagnostic bit state.
			diag_irga = diag_irga XOR &h00f0
			diag_irga_work = diag_irga

			'Turn on the intermediate processing disable flag when the LI-7500 has failed to
			' send data to the CR1000 via SDM.  Set all flags high and rail the AGC to 94.
			If ( (co2 < -99990) OR (co2 = NaN) ) Then (diag_irga_work = &h00ff)

			'Compute the AGC.
			agc = INT ((diag_irga_work AND &h000f)*6.25+0.5)

			'Break up the four LI-7500 warning flags into four separate bits.
			chopper_f = diag_irga_work AND &h0080
			detector_f = diag_irga_work AND &h0040
			pll_f = diag_irga_work AND &h0020
			sync_f = diag_irga_work AND &h0010

			'Turn on the intermediate processing disable flag when any LI-7500 warning flag
			' is high, including the special cases NaN or an SDM error.
			disable_flag_on(2) = diag_irga_work AND &h00f0

			'Turn on only when LI-7500 diagnostic warning flags are set.
			disable_flag_on(4) = ( (chopper_f OR detector_f OR pll_f OR sync_f) AND NOT (diag_irga_work >= &h00ff) )

			'Save only the four most significant bits of the LI-7500 diagnostic word.
			diag_irga = INT (diag_irga_work/&h0010)


			'Write a file mark to the time series table every hour.  The filemark is written
			' only to the card if time series data are being stored.
			If ( (even_min_flag_on) AND (IfTime (0,60,Min)) ) Then ( FileMark (ts_data) )

			'Start saving the time series data on an even minute boundary.
			If ( (save_ts_flag_on) AND (NOT (even_min_flag_on)) ) Then
				If ( IfTime (0,1,Min) ) Then ( even_min_flag_on = TRUE )

			Else
				If ( (NOT (save_ts_flag_on)) AND (even_min_flag_on) AND (NOT (one_more_record)) ) Then
					FileMark (ts_data)
					one_more_record = TRUE

				Else
					If (one_more_record) THEN
						one_more_record = FALSE
						even_min_flag_on = FALSE

					EndIf

				EndIf

			EndIf

			'Save adjusted time series data.
			CallTable ts_data

			CallTable comp_cov

			If ( comp_cov.Output(1,1) ) Then

				GetRecord (cov_out(1),comp_cov,1)

				'Compass wind direction will be between 0 and 360 degrees.
				wnd_dir_compass = wnd_dir_compass+CSAT3_AZIMUTH
				if wnd_dir_compass<0 then wnd_dir_compass=wnd_dir_compass+360
				wnd_dir_compass = (wnd_dir_compass) MOD 360

				'CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees.
				If ( wnd_dir_csat3 ) > 180 Then ( wnd_dir_csat3 = wnd_dir_csat3-360 )

				h2o_hmp_mean = e_hmp_mean/((t_hmp_mean+273.15)*RV)
				'          = (kPa-kPa K g)/(K kPa m^3)
				rho_d_mean = (press_mean-e_hmp_mean)/((t_hmp_mean+273.15)*RD)  'g/m^3
				rho_a_mean = (rho_d_mean)/1000                                 'kg/m^3
				T_dew_mean = 240.97*LN(e_hmp_mean/0.611)/(17.502-LN(e_hmp_mean/0.611))
				old_RH_mean=RH_mean
				RH_mean=e_hmp_mean/(0.611*EXP(17.502*t_hmp_mean/(240.97+t_hmp_mean)))

				'Compute online fluxes.
				Fc_irga = cov_Uz_co2
				LE_irga = LV*cov_Uz_h2o
				Hs = rho_a_mean*CP*cov_Uz_Ts

				old_u_star=u_star
				tau = SQR ((cov_Uz_Ux*cov_Uz_Ux)+(cov_Uz_Uy*cov_Uz_Uy))
				u_star = SQR (tau)
				tau = rho_a_mean*tau

				sigma_wpl = h2o_hmp_mean/rho_d_mean

				'LI-7500 Webb et al. term for water vapor Eq. (25).
				h2o_wpl_LE = MU_WPL*sigma_wpl*LE_irga
				h2o_wpl_H = (1+(MU_WPL*sigma_wpl))*h2o_hmp_mean/(t_hmp_mean+273.15)*LV*cov_Uz_Ts
				LE_wpl = LE_irga+h2o_wpl_LE+h2o_wpl_H

				'Compute a sensible heat flux from Hs and LE_wpl.
				Hc = (Hs-(rho_a_mean*CP*0.51*RD*(t_hmp_mean+273.15)*(t_hmp_mean+273.15)*LE_wpl)/(press_mean*LV))*((t_hmp_mean+273.15)/(Ts_mean+273.15))

				'LI-7500 Webb et al. term for carbon dioxide Eq. (24).
				co2_wpl_LE = MU_WPL*co2_mean/rho_d_mean*cov_Uz_h2o
				co2_wpl_H  = (1+(MU_WPL*sigma_wpl))*co2_mean/(t_hmp_mean+273.15)*Hc/(rho_a_mean*CP)
				Fc_wpl = Fc_irga+co2_wpl_LE+co2_wpl_H

				'REA: Compute rotation angles from 30 min data
				CE = Ux_mean/SQR(Ux_mean^2+Uy_mean^2)
				SE = Uy_mean/SQR(Ux_mean^2+Uy_mean^2)
				CT = SQR(Ux_mean^2+Uy_mean^2)/SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)
				ST = Uz_mean/SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)

				'Footprint calculations, Hsieh et al, 2000
				L=-u_star^3*(t_hmp_mean+273.15)/(0.4*9.8*cov_Uz_Ts) 'Obukohov Length
				zu=zm*(ln(zm/zo)-1+zo/zm)
				If ABS(zu/L)<0.04 then   'neutral
					Dh = 0.97
					Ph = 1
				ElseIf L < 0            'unstable
					Dh = 0.28
					Ph = 0.59
				Else                  	'stable
					Dh=2.44
					Ph=1.33
				EndIf

				x70=Dh/(0.357*0.4*0.4)*(ABS(L))^(1-Ph)*zu^Ph

				'check to see if footprint is within source area

				old_footprt_OK = footprt_OK
				footprt_OK=FALSE
				easting=0
				westing=0
				southing=0
				If wnd_dir_compass >wdir_min AND wnd_dir_compass<wdir_max then
					If wnd_dir_compass<=180 then
						alpha=3.1416/180*(wnd_dir_compass-90)
						easting=cos(alpha)*x70
						southing=sin(alpha)*x70
						If easting<x_east_max AND southing<x_south_max then
							footprt_OK=TRUE
						endif
					else
						alpha=3.1416/180*(270-wnd_dir_compass)
						westing=cos(alpha)*x70
						southing=sin(alpha)*x70
						If westing<x_west_max AND southing<x_south_max then
							footprt_OK=TRUE
						endif
					endif
				endif

				'rotate sig_w
				cov_Uz_Uz_rot = cov_Uz_Uz*CT^2 + cov_Ux_Ux*ST^2*CE^2 + cov_Uy_Uy*ST^2*SE^2 -2*cov_Uz_Ux*CT*CE*ST - 2*cov_Uz_Uy*CT*ST*SE + 2*cov_Ux_Uy*CE*ST^2*SE
				sig_w_rot=sqr(cov_Uz_Uz_rot)

				'integral turblence test following Hammerle et al. (2007).
				zeta=zm/L
				old_itt=itt
				if zeta < 0 AND zeta >= -2 then
					itt_model =1.25*(1+3*abs(zeta))^0.333
				endif
				if zeta >= 0 AND zeta < 1 then
					itt_model=1.25*(1+0.2*zeta)
				endif
				itt_meas = sig_w/u_star
				if zeta >= -2 AND zeta < 1 then
					itt=100*abs(itt_meas-itt_model)/itt_model
				else
					itt=999
				endif

				'REA dynamic deadband calcuations
				sig_w = SQR(cov_Uz_Uz)												'stdev of w
				Dband= 0.5*sig_w 													 		'dynamic deadband

				K_d_mean = rho_d_mean/(101/((25+273.15)*RD)) 	'MFC correction factors K
				K_a_mean = rho_a_mean/(101/((25+273.15)*RD))

				'set chemcomb sampling rate, recirulation rate
				chemc_flow = sig_w*10			'use 10 for larned, dynamic samp rate chemcomb, L/min
				if chemc_flow > 10 then chemc_flow=10
				if tot_samp_hrs<24 then chemc_flow=10 'in snapshot mode

				'set flow on makup air / zero air
				makeup_flow = sig_w									' dynamic samp rate chemcomb, L/min
				if makeup_flow > 1.0 then makeup_flow = 1.0
				if makeup_flow < 0.4 then makeup_flow = 0.4
				CAO_2_mv=5000*makeup_flow/1.0/K_d_mean

				'get date and time
				RealTime( rTime )

				'actions at start of new sampling run
				IF new_flag_on then
					Startday=Day_of_Year
					'Elapse3 = Timer(3,Hr,2)				'reset timer #3, delayed start
					Elapse2 = Timer( 2,Min,3)			'stop and reset timer #2, sampled duration
					countdown_timer=tot_samp_hrs*60
					fin_flag_on = FALSE
					new_flag_on = FALSE
				endif

				'Elapse3 = Timer( 3,Hr,4)				'read delay start timer
				Elapse2 = Timer( 2,Min,4) 			'read sample duration timer

				ElapseDay=Day_of_Year-Startday
				IF (ElapseDay >= delay_start) AND (rHour=delay_TOD) AND NOT REA_flag_on then 	'if delay start timer exceeded
					REA_flag_on=TRUE
					'Elapse3 = Timer( 3,Hr,1)
					delay_start=0
					delay_TOD=0
				Endif
				
				old_Rain=Rain
				' see if the weather conditions are acceptable for last two 30-min cycles
				IF footprt_OK AND old_footprt_OK AND itt<30 AND old_itt<30 AND RH_mean<0.9 AND old_RH_mean<0.9 AND Rain=0 AND old_Rain=0 then
					weather_OK = TRUE
				else
					weather_OK = FALSE
				endif

				If tot_samp_hrs<24 then weather_OK = TRUE  'in snapshot mode, override weather

				If REA_reset_on then
					REA_flag_on = FALSE
					fin_flag_on = FALSE
					new_flag_on = FALSE
					delay_start = 0
					delay_TOD = 0
					tot_samp_hrs = 0
					weather_OK = FALSE
					REA_reset_on=FALSE
					PortOn_1=0
					PortOn_2=0
					PortOn_4=0
					PortOn_5=0
					PortOn_6=0
					Elapse2 = Timer( 2,Min,1)'stop timer
					'Elapse3 = Timer( 3,Min,1)'stop timer
				EndIf

				'control REA sampling: check for REA_flag, timer duration, and weather
				IF REA_flag_on AND Elapse2<countdown_timer AND weather_OK then
					Elapse2 = Timer( 2,Min,0)'start timer
					WriteIO (&B1000,&B1000) 'set port 4 high, pump on
					PortOn_4=1
					WriteIO (&B11,&B11) 'set port 1 high and port 2 high, MFCs on
					PortOn_1=1
					PortOn_2=1
					CAO_1_mv=5000*chemc_flow/15/K_d_mean 'set MFC vout
				Else
					WriteIO (&B1000,&B0000) 'set port 4 low
					PortOn_4=0
					WriteIO (&B11,&B10) 'set port 1 low, port 2 high
					PortOn_1=0
					PortOn_2=1
					CAO_1_mv=0
					Elapse2 = Timer( 2,Min,1)'stop timer
				EndIf
				Elapse1=Elapse2/60 'convert timer to min for reporting

				'if total sampling duration has exceeded allotted sampling time
				If Elapse2 >= countdown_timer then
					REA_flag_on=FALSE   'turn off REA flag
					fin_flag_on = TRUE ' set completion flag
				endif

				'control exhaust/cooling fan
				If panel_temp>35 then
					SW12 (1 )
				else
					SW12 (0 )
				endif

			EndIf

			'Write a file mark to the flux table.
			If ( IfTime (0,1,Day) ) Then ( FileMark (flux) )
			CallTable flux

		Else
			scan_count = scan_count+1

		EndIf


	NextScan

EndProg

'EndProg
