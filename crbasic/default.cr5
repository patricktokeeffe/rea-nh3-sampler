''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Denuder-based Relaxed Eddy Accumulation (REA) Flux Measurement System
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
'
' Contact:  Patrick O'Keeffe
'           pokeeffe@wsu.edu
'           (509) 335-7246
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'manually update VERSION with results of `git describe` prior to pushing to
'datalogger but do not check-in file with other than empty string
Const VERSION = ""

'=====================  DEVICE CONFIGURATION  ================================
Const SDM_CSAT3_LI7500_1 = 1 'aliases for menu
Const SDM_CSAT3A_EC150_2 = 2
ConstTable
  Const DATA_SRCS = SDM_CSAT3_LI7500_1
  'Const DATA_SRCS = SDM_CSAT3A_EC150_2
  'things which MUST be constants and therefore cannot be in "settings file"
  Const SDM_SPEED = 30   'default: 30 usec; accepts 8 usec - 3 msec
  Const CSAT_ADDR = 3    'default CSAT3 SDM address: 3
  Const LI7500_ADDR = 7  'default LI7500 SDM address: 7
  Const EC100_ADDR = 1   'default EC100/EC150/CSAT3A address: 1

  'self-imposed value limits on some settings options
  Const RUNTIME_MIN = 0.5 'hrs
  Const RUNTIME_MAX = 24 'hrs
  Const UPDNFLOW_MIN = 2 'sLpm, max specified under analog scaling
  Const ZEROFLOW_MIN = 0.4 'sLpm, max specified under analog scaling
  Const DECLIN_MIN = -35 'deg E of TN
  Const DECLIN_MAX = 35 'deg E of TN
EndConstTable

'----- WIRING -----
Const HMP_T_DF = 11
Const HMP_RH_DF = 12

Const MFC_UP_DF = 1
Const MFC_DN_DF = 2
Const MFC_UPDN_CAO = 1 'MFCs share port

Const MFC_ZERO_SE = 5  'note: single-ended
Const MFC_ZERO_CAO = 2

Const C_UPDN_OFF = 1 'C1: valve off for UP/DN MFCs
'Const C_ZERO_OFF = 2 'C2: valve off for zero MFC
'Const C_UPDN_PRG = 3 'C3: valve purge for UP/DN MFCs <- not implemented XXX
'Const C_ZERO_PRG = 4 'C4: valve purge for zero MFC
Const C_VLV_UP = 5   'C5: relay: 3-way valve at UP denuder inlet
Const C_VLV_DN = 6   'C6: relay: 3-way valve at DN denuder inlet
Const C_PUMP_ON = 7  'C7: relay: pump power
Const C_MFC_ON = 8   'C8: relay: MFC power

'----- ANALOG SCALING -----
Const HMP_T_MULT = (60 + 40) / 1000    '-40* - 60* / 0-1V
Const HMP_T_OFF = -40
Const HMP_RH_MULT = (100 - 0) / 1000   '0-100% / 0-1V
Const HMP_RH_OFF = 0

Const UPDNFLOW_MAX = 10 '<-- used 4 settings validation
Const MFC_UPDN_MULT = UPDNFLOW_MAX / 5000 '0-10 sLpm / 0-5V
Const MFC_UPDN_OFF = 0

Const ZEROFLOW_MAX = 5 '<-- used 4 settings validation
Const MFC_ZERO_MULT = ZEROFLOW_MAX / 5000 '0-5 sLpm / 0-5V
Const MFC_ZERO_OFF = 0


'==========================  IMPORTANT CONSTANTS  ============================
'----- PHYSICAL -----
Const Cpd = 1004.67 'specific heat capacity: dry air    J/(kg K)
'Const Cw = 1820 'specific heat capacity: water    J/(kg K)
Const MW_h2o = 18.01528 'molar weight of water    g/mol
Const MW_co2 = 44.010 'molar weight of CO2    g/mol
Const MW_air = 28.98 'molar weight of dry air    g/mol
Const MU_WPL = MW_air/MW_h2o
Const R_ = 8.3144621e-6 'universal gas constant    (kPa m^3)/(K mmol)
Const Rd = 287.058 'specific gas constant: dry air    J/(kg K)
Const Rv = 461.495 'specific gas constant: water vapor    J/(kg K)
Const K_ = 0.41 'Von Karman constant    dimless
Const G_ = 9.81 'Gravity    m/s^2
Const PI = 3.14159

'Omega FMA5400 series option 1: 14.7 psia and 70*F
Const MFC_STP_T = 21.11 + 273.15
Const MFC_STP_P = 101.35

'Omega FMA5400 series option 2: 0*C and 1.01 bar abs
'Const MFC_STP_T = 0
'Const MFC_STP_P = 101

'==========================  PROGRAM OPERATION  ==============================

Const INTEG = 250      'analog integration time
Const FAST_INTV = 100  'length of main scan, msec = 10 Hz
Const FAST_BUFF = 50   '5 second buffer
Const SLOW_INTV = 1    'length of secondary scan, seconds = 1 Hz
Const STAT_INTV = 30   'frequency of output statistics, minutes

'----- SDM device options -----
Const CSAT3_CMD = 91  'trigger + get wind & temp data
Const CSAT3_OPT = INT(1000/FAST_INTV) 'calc Hz from interval
Const LI7500_CMD = 6  'get co2, h2o, press & diagnostic
Const EC100_CMD = 1  'get Ux/Uy/Uz, Ts, sonic diag, CO2, H2O, etc

'----- SDM device delays -----
Const CSAT3_DELAY = 2  'fixed @ 2 measurements
Const LI7500_DELAY = 2 'SDM/RS232: BaseDelay=186ms & DelayStep=2 -> Delay=199ms
Const EC100_DELAY = 0  'TODO
Const LAG_SCANS = 5    'large enough to accomodate all delays

Const RUN_TIMER = 1 'aliases
Const START = 0
Const STOP_RESET = 3
Const QUERY = 4

'===============================  VARIABLES  =================================

'---------- SENSORS ----------
Public sonic(5)
Alias sonic(1) = sonic_Ux
Alias sonic(2) = sonic_Uy
Alias sonic(3) = sonic_Uz
Alias sonic(4) = sonic_Ts
Alias sonic(5) = sonic_diag
Units sonic = m/s
Units sonic_Ts = degC
Units sonic_diag = bitmap

Public disable_sonic As Boolean

Public fast_co2_est
Units fast_co2_est = ppm

Public irga(4)
Alias irga(1) = irga_CO2
Alias irga(2) = irga_H2O
Alias irga(3) = irga_press
Alias irga(4) = irga_diag
Units irga = mmol/m^3
Units irga_press = kPa
Units irga_diag = bitmap

#If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
  Dim ec100_raw(12) 'Campbellsci EC100/EC150/CSAT3A

  Public extra_irga(3)
  Alias extra_irga(1) = irga_tmpr
  Alias extra_irga(2) = irga_CO2_signal
  Alias extra_irga(3) = irga_H2O_signal
  Units irga_tmpr = degC
  Units irga_CO2_signal = ratio
  Units irga_H2O_signal = ratio
#EndIf

Public disable_irga As Boolean

Public hmp45c(2)
Alias hmp45c(1) = hmp_T
Alias hmp45c(2) = hmp_RH
Units hmp_T = degC
Units hmp_RH = %

Public hmp_e 'derived, not measured
Units hmp_e = kPa

Public flow(3)
Alias flow(1) = flow_up
Alias flow(2) = flow_dn
Alias flow(3) = flow_zero
Units flow = sLpm

Public cr5k(2)
Alias cr5k(1) = LoggerTemp
Alias cr5k(2) = LoggerVoltage
Units LoggerTemp = degC
Units LoggerVoltage = Volts

'---------- PROCESSING -----------
Public Uz_rot 'for real-time coord rotation
Units Uz_rot = m/s

Dim dummy(3) = {0, 0, 0}
Dim lagged(14) 'HINT length of `work_lag` table output
Public aligned(14)
Alias aligned(1)  = lag_Ux
Alias aligned(2)  = lag_Uy
Alias aligned(3)  = lag_Uz
Alias aligned(4)  = lag_Ts
Alias aligned(5)  = lag_sonic_diag
Alias aligned(6)  = lag_CO2
Alias aligned(7)  = lag_H2O
Alias aligned(8)  = lag_irga_press
Alias aligned(9)  = lag_irga_diag
Alias aligned(10) = lag_irga_tmpr
Alias aligned(11) = lag_CO2_signal
Alias aligned(12) = lag_H2O_signal
Alias aligned(13) = lag_vlv_up_on
Alias aligned(14) = lag_vlv_dn_on
Units lag_Ux = m/s
Units lag_Uy = m/s
Units lag_Uz = m/s
Units lag_Ts = degC
Units lag_sonic_diag = bitmap
Units lag_CO2 = mmol/m^3
Units lag_H2O = mmol/m^3
Units lag_irga_press = kPa
Units lag_irga_diag = bitmap
Units lag_irga_tmpr = degC
Units lag_CO2_signal = ratio
Units lag_H2O_signal = ratio

Public cov_sonic(1,4)'= [ [Ts,  Ux, Uy, Uz] ]
Public cov_irga(2,4) '= [ [CO2, Ux, Uy, Uz],
                     '    [H2O, Ux, Uy, Uz],
                     '    [Tc,  Ux, Uy, Uz] ]  <-- Tc not implemented!
Public cov_out(37)
Alias cov_out(1)  = Ux_Avg 'Average() x4
Alias cov_out(2)  = Uy_Avg
Alias cov_out(3)  = Uz_Avg
Alias cov_out(4)  = Ts_Avg
Alias cov_out(5)  = Ts_Std 'Covariance(cov_sonic(1,1) .. limit:10)
Alias cov_out(6)  = cov_Ts_Ux
Alias cov_out(7)  = cov_Ts_Uy
Alias cov_out(8)  = cov_Ts_Uz
Alias cov_out(9)  = Ux_Std
Alias cov_out(10) = cov_Ux_Uy
Alias cov_out(11) = cov_Ux_Uz
Alias cov_out(12) = Uy_Std
Alias cov_out(13) = cov_Uy_Uz
Alias cov_out(14) = Uz_Std
Alias cov_out(15) = WS_sclr_Avg 'WindVector(..option 0)
Alias cov_out(16) = WD_unit_Avg
Alias cov_out(17) = WD_Yamartino_Std
'Alias cov_out(18) = WS_slcr_Avg (dup) 'WindVector(..option 2)
Alias cov_out(19) = WS_rslt_Avg
Alias cov_out(20) = WD_rslt_Avg
Alias cov_out(21) = WD_CSI_Std
Alias cov_out(22) = CO2_Avg 'Average() x3
Alias cov_out(23) = H2O_Avg
Alias cov_out(24) = irga_press_Avg
Alias cov_out(25) = irga_tmpr_Avg 'Average/Sample() x3
Alias cov_out(26) = irga_CO2_signal_Avg
Alias cov_out(27) = irga_H2O_signal_Avg
Alias cov_out(28) = CO2_Std 'Covariance(cov_irga(1,1) .. limit:4)
Alias cov_out(29) = cov_CO2_Ux
Alias cov_out(30) = cov_CO2_Uy
Alias cov_out(31) = cov_CO2_Uz
Alias cov_out(32) = H2O_Std 'Covariance(cov_irga(2,1) .. limit:4)
Alias cov_out(33) = cov_H2O_Ux
Alias cov_out(34) = cov_H2O_Uy
Alias cov_out(35) = cov_H2O_Uz
'  Alias cov_out() = Tc_Std 'Covariance(cov_irga(3,1) .. limit:4)
'  Alias cov_out() = cov_Tc_Ux
'  Alias cov_out() = cov_Tc_Uy
'  Alias cov_out() = cov_Tc_Uz
Alias cov_out(36) = hmp_T_Avg 'Average() x2
Alias cov_out(37) = hmp_e_Avg
Units Ux_Avg = m/s
Units Uy_Avg = m/s
Units Uz_Avg = m/s
Units Ts_Avg = degC
Units Ts_Std = degC
'Units cov_Ts_Uz = K*m/s
Units Uz_Std = m/s
Units WS_sclr_Avg = m/s
Units WD_unit_Avg = degEofN
Units WD_Yamartino_Std = deg
Units WS_rslt_Avg = m/s
Units WD_rslt_Avg = degEofN
Units WD_CSI_Std = deg
Units CO2_Avg = mmol/m^3
Units H2O_Avg = mmol/m^3
Units irga_press_Avg = kPa
Units irga_tmpr_Avg = degC
Units irga_CO2_signal_Avg = ratio
Units irga_H2O_signal_Avg = ratio
Units CO2_Std = mmol/m^3
'Units cov_CO2_Uz = mmol/(s m^2)
Units H2O_Std = mmol/m^3
'Units cov_H2O_Uz = mmol/(s m^2)
Units hmp_T_Avg = degC
Units hmp_e_Avg = kPa

Public rea_out(3) 
Alias rea_out(1) = vlv_up_on_Tot
Alias rea_out(2) = vlv_dn_on_Tot
Alias rea_out(3) = vlv_possible
Units vlv_up_on_Tot = scans
Units vlv_dn_on_Tot = scans
Units vlv_possible = scans

Dim sqrt_UV 'double-rotation calcs
Dim sqrt_UVW
Public rot_angles(4)
Alias rot_angles(1) = CT
Alias rot_angles(2) = ST
Alias rot_angles(3) = CE
Alias rot_angles(4) = SE
Units rot_angles = radian

Public rotated(4) 'double-rotation outputs
Alias rotated(1) = U_Avg
Alias rotated(2) = V_Avg
Alias rotated(3) = W_Avg
Alias rotated(4) = W_Std
Units rotated = m/s

Public hmp_e_sat_Avg 'derived from stats
Public hmp_RH_Avg
Public hmp_Tdew_Avg
Units hmp_e_sat_Avg = kPa
Units hmp_RH_Avg = %
Units hmp_Tdew_Avg = degC

Public L_      'Obukhov length
Public u_star 'friction velocity
Public tau    'surface stress
Public rho_c  'carbon dioxide mass density
Public rho_v  'water vapor mass density
Public rho_d  'dry air mass density
Public rho_a  'ambient (moist) air mass density
Public Lv     'latent heat of vaporization of water
Public itt    'integral turbulence test
Public x70    'estimate of 70% of footprint length
Units L_ = m
Units u_star = m/s
Units tau = Pa
Units rho_c = mg/m^3
Units rho_v = g/m^3
Units rho_d = g/m^3
Units rho_a = kg/m^3
Units Lv = J/g
Units itt = dimless 'TODO
Units x70 = m 'TODO verify

Public CO2_ppm_Avg 'mean CO2 dry mixing ratio
Units CO2_ppm_Avg = ppmV

Dim sigma_wpl   'ratio of water vapor to dry air
Public Fco2_raw 'uncorrected CO2 flux (e.g. plain covariance)
Public Fco2_LE_wpl 'water vapor WPL80 term
Public Fco2_H_wpl 'temperature WPL80 term
Public Fco2     'carbon dioxide flux
Public LE_raw   'uncorrected water vapor flux (plain cov.)
Public LE_wpl   'combined WPL80 term
Public LE       'latent heat flux
Public Hs_raw   'sensible heat flux using virtual temp
Public Hs       'sensible heat flux TODO
Units Fco2_raw = mg/(m^2 s)
Units Fco2_LE_wpl = mg/(m^2 s)
Units Fco2_H_wpl = mg/(m^2 s)
Units Fco2 = mg/(m^2 s)
Units LE_raw = W/m^2
Units LE_wpl = W/m^2
Units LE = W/m^2
Units Hs_raw = W/m^2
Units Hs = W/m^2

'---------- OPERATING VARIABLES ----------
Public shield_ON As Boolean 'menus
Public run_queued As Boolean
Public run_aborted As Boolean

Public run_already_queued As Boolean 'state flags
Public shld_already_ON As Boolean
Public is_running As Boolean

Dim rtime(9)
Alias rtime(4) = hrofday
Alias rtime(5) = minofhr

Public run_sched(3) As Long
Alias run_sched(1) = start_run
Alias run_sched(2) = run_dur
Alias run_sched(3) = elapsed_time
Units run_sched = min

Public flow_SPvals(3)
Alias flow_SPvals(1) = shld_SPval
Alias flow_SPvals(2) = zero_SPval
'Alias flow_SPvals(3) = samp_SPval '<< necessary?

Public flow_setpnt(2) 'TODO Dim
Alias flow_setpnt(1) = setpnt_zero
Alias flow_setpnt(2) = setpnt_updn

Public mean_up_flow
Public mean_dn_flow
Public decreasing_flow As Boolean 'XXX TST

Public deadband
Dim neg_deadband
Units deadband = m/s

Public vlv_up_ON As Boolean
Public vlv_dn_ON As Boolean

Dim just_had_1hz_scan As Boolean 'data table exclusion flags
Dim inbetween_1hz_scan As Boolean


'============================ SETTINGS RETENTION =============================
Dim filehandle As Long
Const WRITEFILE = 0
Const READFILE = 1
Const Automatic = True 'for menus
Const LastState = True

'----- DEFAULT SETTINGS -----
Const SETTINGS_FILE = "CPU:rea_settings.dat"
Const NUM_SETTINGS = {18}

Const DEF_FLOW_AUTO_SHLD = LastState
Const DEF_FLOWSP_WAIT = 2.0 'sLpm
Const DEF_FLOWSP_ZERO = 0.5 'sLpm
Const DEF_FLOWSP_AUTO = Automatic
Const DEF_FLOWSP_UPDN = 10 'sLpm
Const DEF_DBAND_MULT = 0.5 '0 < X <= 1
Const DEF_DBAND_MIN = 0.05 'm/s
Const DEF_DBAND_DEF = 0.1 'm/s
Const DEF_SONIC_AZIMUTH = -1 'degEofN, -1=disabled
Const DEF_SONIC_HEIGHT = 0 'm, 0=disabled
#If (DATA_SRCS=SDM_CSAT3_LI7500_1) Then
  Const DEF_IRGA_VERT_SEP = -99 'cm
  Const DEF_IRGA_HORZ_SEP = -99 'cm
#ElseIf (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
  Const DEF_IRGA_VERT_SEP = 0 'TODO insert predefined values
  Const DEF_IRGA_HORZ_SEP = 0 'based on closest bracket setting
#EndIf
Const DEF_SITE_DECLIN = 0 'degEofTN, 0=disabled
Const DEF_SITE_FETCH_N = 0 'm, 0=disabled
Const DEF_SITE_FETCH_E = 0 'm, 0=disabled
Const DEF_SITE_FETCH_S = 0 'm, 0=disabled
Const DEF_SITE_FETCH_W = 0 'm, 0=disabled
Const DEF_SITE_RUFNESS = 0 'm, 0=disabled

Public choice(NUM_SETTINGS)
Alias choice(1)  = ch_flow_auto_shld
Alias choice(2)  = ch_flowSP_shld
Alias choice(3)  = ch_flowSP_zero
Alias choice(4)  = ch_flowSP_auto
Alias choice(5)  = ch_flowSP_updn
Alias choice(6)  = ch_dband_mult
Alias choice(7)  = ch_dband_min
Alias choice(8)  = ch_dband_def
Alias choice(9)  = ch_sonic_azimuth
Alias choice(10) = ch_sonic_height
Alias choice(11) = ch_irga_vert_sep
Alias choice(12) = ch_irga_horz_sep
Alias choice(13) = ch_site_declin
Alias choice(14) = ch_site_fetch_N
Alias choice(15) = ch_site_fetch_E
Alias choice(16) = ch_site_fetch_S
Alias choice(17) = ch_site_fetch_W
Alias choice(18) = ch_site_rufness

Public settings(NUM_SETTINGS)
Alias settings(1)  = flow_auto_shld
Alias settings(2)  = flowSP_wait
Alias settings(3)  = flowSP_zero
Alias settings(4)  = flowSP_auto
Alias settings(5)  = flowSP_updn
Alias settings(6)  = dband_mult
Alias settings(7)  = dband_min
Alias settings(8)  = dband_def
Alias settings(9)  = sonic_azimuth
Alias settings(10)  = sonic_height
Alias settings(11) = irga_vert_sep
Alias settings(12) = irga_horz_sep
Alias settings(13) = site_declin
Alias settings(14) = site_fetch_N
Alias settings(15) = site_fetch_E
Alias settings(16) = site_fetch_S
Alias settings(17) = site_fetch_W
Alias settings(18) = site_rufness
'HINT define units despite non-Public b/c many are saved to `info` table
'Units flow_auto_shld = boolean
Units flowSP_wait = sLpm
Units flowSP_zero = sLpm
'Units flowSP_auto = boolean
Units flowSP_updn = sLpm
Units dband_mult = ratio
Units dband_min = m/s
Units dband_def = m/s
Units sonic_azimuth = degEofN
Units sonic_height = m
Units irga_vert_sep = cm
Units irga_horz_sep = cm
Units site_declin = degEofTN
Units site_fetch_N = m
Units site_fetch_E = m
Units site_fetch_S = m
Units site_fetch_W = m
Units site_rufness = cm

'----- DEFAULT SCHEDULE -----
Const SCHEDULE_FILE = "CPU:rea_schedule.dat"
Const NUM_SCHEDULE = {4}

Const DEF_RUN_DURATION = 1 'hr
Const DEF_RUN_BEGINTOD = 0 'XXX use 0 not False b/c False renders as 2.1E+06
Const DEF_RUN_DELAY = 0 'hr
Const DEF_RUN_TOD = 0 'hour of day

Public sch_choice(NUM_SCHEDULE)
Alias sch_choice(1) = ch_run_duration
Alias sch_choice(2) = ch_run_begintod
Alias sch_choice(3) = ch_run_delay
Alias sch_choice(4) = ch_run_tod

Public sch_settings(NUM_SCHEDULE)
Alias sch_settings(1) = run_duration 'hr
Alias sch_settings(2) = run_begintod 'boolean
Alias sch_settings(3) = run_delay 'hr
Alias sch_settings(4) = run_tod 'hr of day

'----- LAST STATE RETENTION -----
Const SHLDSTATE_FILE = "CPU:rea_shield_state.dat"
Public lastrun_shield_ON 'Boolean (but must be float to save in calfile)


'===============================  DATA TABLES  ===============================

'----- WORKING TABLES -----
DataTable(work_lag,TRUE,LAG_SCANS)
  Sample(5,sonic(1),IEEE4)
  Sample(4,irga(1),IEEE4)
  #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
    Sample(3,extra_irga(1),IEEE4)
  #Else
    Sample(3,dummy(1),FP2)
  #EndIf
  Sample(1,vlv_up_ON,Boolean)
  Sample(1,vlv_dn_ON,Boolean)
EndTable

DataTable(work_cov,TRUE,1)
  DataInterval(0,STAT_INTV,Min,5)
  Average(1,lag_Ux,IEEE4,disable_sonic)
  Average(1,lag_Uy,IEEE4,disable_sonic)
  Average(1,lag_Uz,IEEE4,disable_sonic)
  Average(1,lag_Ts,IEEE4,disable_sonic)
  Covariance(4,cov_sonic(1,1),IEEE4,disable_sonic,10)
  WindVector(1,-1*lag_Uy,lag_Ux,IEEE4,disable_sonic,0,1,0)
  'Opt0: mean horiz WS, unit vctr mean WD, and std WD using Yamartino eqn
  WindVector(1,-1*lag_Uy,lag_Ux,IEEE4,disable_sonic,0,1,2)
  'Opt2: mean horiz WS, rslt mean WS, rslt mean WD, WS-weighted WD sdev CSI eqn
  'TODO sonic_uptime

  Average(1,lag_CO2,IEEE4,disable_irga)
  Average(1,lag_H2O,IEEE4,disable_irga)
  Average(1,lag_irga_press,IEEE4,disable_irga)
  #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
    Average(1,lag_irga_tmpr,IEEE4,disable_irga)
    Average(1,lag_CO2_signal,IEEE4,disable_irga)
    Average(1,lag_H2O_signal,IEEE4,disable_irga)
  #Else
    Sample(3,dummy(1),FP2)
  #EndIf
  Covariance(4,cov_irga(1,1),IEEE4,disable_irga,4)
  Covariance(4,cov_irga(1,2),IEEE4,disable_irga,4)
  'Covariance(4,cov_irga(1,3),IEEE4,disable_irga,4)

  Average(1,hmp_T,IEEE4,(inbetween_1hz_scan OR hmp_T=NAN))
  Average(1,hmp_e,IEEE4,(inbetween_1hz_scan OR hmp_e=NAN))
EndTable

DataTable(work_rea,True,-1)
  DataInterval(0,STAT_INTV,Min,5)
  
  Totalize(1,vlv_up_ON,UINT4,vlv_up_ON=NAN)
  Totalize(1,vlv_dn_ON,UINT4,vlv_dn_ON=NAN)
  Totalize(1,1,UINT4,False)
EndTable

'----- FINAL OUTPUTS -----
DataTable(ts_fast,True,600)
  DataInterval(0,FAST_INTV,mSec,10)
  CardOut(1,-1) 'XXX make fixed size in days
  Sample(1,sonic_Ux,IEEE4)
  Sample(1,sonic_Uy,IEEE4)
  Sample(1,sonic_Uz,IEEE4)
  Sample(1,sonic_Ts,IEEE4)
  Sample(1,sonic_diag,IEEE4)
  Sample(1,irga_CO2,IEEE4)
  Sample(1,irga_H2O,IEEE4)
  Sample(1,irga_press,IEEE4)
  Sample(1,irga_diag,IEEE4)
  #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
    Sample(1,irga_tmpr,IEEE4)
    Sample(1,irga_CO2_signal,IEEE4)
    Sample(1,irga_H2O_signal,IEEE4)
  #EndIf
  Sample(1,Uz_rot,FP2)
  Sample(1,vlv_up_ON,Boolean)
  Sample(1,vlv_dn_ON,Boolean)
EndTable

DataTable(ts_slow,True,60)
  DataInterval(0,SLOW_INTV,Sec,10)
  CardOut(1,-1) 'XXX make fixed size in days
  Sample(1,hmp_T,IEEE4)
  Sample(1,hmp_RH,IEEE4)
  Sample(1,flow_up,IEEE4)
    FieldNames("massFlow_up")
  Sample(1,flow_dn,IEEE4)
    FieldNames("massFlow_dn")
  Sample(1,flow_zero,IEEE4)
    FieldNames("massFlow_zero")
EndTable

DataTable(stats,True,48)
  DataInterval(0,STAT_INTV,Min,10)
  CardOut(1,-1)

  Sample(1,CO2_ppm_Avg,IEEE4)
  Sample(1,CO2_Avg,IEEE4)
  Sample(1,CO2_Std,IEEE4)
  Sample(1,H2O_Avg,IEEE4)
  Sample(1,H2O_Std,IEEE4)
  Sample(1,irga_press_Avg,IEEE4)
  #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
    Sample(1,irga_tmpr_Avg,IEEE4)
    Sample(1,irga_CO2_signal_Avg,IEEE4)
    Sample(1,irga_H2O_signal_Avg,IEEE4)
  #EndIf

  Sample(1,Ts_Avg,IEEE4)
  Sample(1,Ts_Std,IEEE4)

  Sample(1,Uz_Std,IEEE4)
  Sample(1,L_,IEEE4)
  Sample(1,u_star,IEEE4)
  Sample(1,tau,IEEE4)
  Sample(1,itt,IEEE4)
  Sample(1,x70,IEEE4)

  Sample(1,Fco2,IEEE4)
  Sample(1,Fco2_raw,IEEE4)
  Sample(1,Fco2_LE_wpl,IEEE4)
  Sample(1,Fco2_H_wpl,IEEE4)
  Sample(1,LE,IEEE4)
  Sample(1,LE_raw,IEEE4)
  Sample(1,LE_wpl,IEEE4)
  Sample(1,Hs,IEEE4)
  Sample(1,Hs_raw,IEEE4)

  Sample(1,CE,IEEE4)
  Sample(1,SE,IEEE4)
  Sample(1,CT,IEEE4)
  Sample(1,ST,IEEE4)
  Sample(1,W_Std,IEEE4)

  Sample(1,WS_sclr_Avg,IEEE4)
  Sample(1,WS_rslt_Avg,IEEE4)
  Sample(1,WD_unit_Avg,IEEE4)
  Sample(1,WD_rslt_Avg,IEEE4)
  Sample(1,WD_CSI_Std,IEEE4)

  Sample(1,hmp_T_Avg,IEEE4)
  Sample(1,hmp_Tdew_Avg,IEEE4)
  Sample(1,hmp_RH_Avg,IEEE4)
  Sample(1,hmp_e_Avg,IEEE4)

  Sample(1,rho_a,IEEE4)
  Sample(1,rho_d,IEEE4)
  Sample(1,rho_v,IEEE4)
  Sample(1,rho_c,IEEE4)
  Sample(1,Lv,IEEE4)

  Average(1,flow_zero,IEEE4,(inbetween_1hz_scan OR flow_zero=NAN))
    FieldNames("massFlow_zero_Avg")
  Average(1,flow_up,IEEE4,(inbetween_1hz_scan OR flow_up=NAN))
    FieldNames("massFlow_up_Avg")
  Average(1,flow_dn,IEEE4,(inbetween_1hz_scan OR flow_dn=NAN))
    FieldNames("massFlow_dn_Avg")
  Totalize(1,vlv_up_ON,UINT4,vlv_up_ON=NAN)
  Totalize(1,vlv_dn_ON,UINT4,vlv_dn_ON=NAN)
  Totalize(1,1,UINT4,False)

'  Sample(1,logger_tmpr,IEEE4)
'  Sample(1,logger_power,IEEE4)
EndTable

'DataTable(rea,True,-1) 'XXX rea on trigger?
'  DataInterval(0,STAT_INTV,Min,10)
'  CardOut(1,-1) 'XXX make fixed size in days
'  
'  Sample(1,Uz_Std,FP2) '<-- W_std?
'  'sample beta
'  Sample(1,flow_up_Avg,IEEE4)
'    FieldNames("massFlow_up_Avg")
'  Sample(1,flow_dn_Avg,IEEE4)
'    FieldNames("massFlow_dn_Avg")
'  Sample(1,volFlow_up_Avg,IEEE4)
'  Sample(1,volFlow_dn_Avg,IEEE4)
'  Sample(1,vlv_up_on_Tot/vlv_possible,FP2)
'    FieldNames("frac_up_on")
'  Sample(1,vlv_dn_on_Tot/vlv_possible,FP2)
'    FieldNames("frac_dn_on")
'EndTable

DataTable(info,1,50)
  CardOut(1,200)
  Sample(1,flowSP_wait,FP2)
    FieldNames("flow_zero_waiting")
  Sample(1,flowSP_zero,FP2)
    FieldNames("flow_zero_running")
'  Sample(1,(IIF(flowSP_auto, "automatic", "manual")),String)
'  Sample(1,flowSP_updn,FP2)
    FieldNames("flow_sample")
  Sample(1,dband_mult,FP2)
    FieldNames("deadband_mult")
  Sample(1,dband_min,FP2)
    FieldNames("deadband_min")
  Sample(1,dband_def,FP2)
    FieldNames("deadband_default")
  Sample(1,sonic_azimuth,FP2)
    FieldNames("sonic_azimuth")
  Sample(1,sonic_height,FP2)
    FieldNames("sonic_height")
  Sample(1,site_declin,FP2)
    FieldNames("site_mag_declin")
  Sample(1,site_rufness,FP2)
    FieldNames("site_roughness")
  Sample(1,site_fetch_N,IEEE4)
    FieldNames("site_fetch_N")
  Sample(1,site_fetch_E,IEEE4)
    FieldNames("site_fetch_E")
  Sample(1,site_fetch_S,IEEE4)
    FieldNames("site_fetch_S")
  Sample(1,site_fetch_W,IEEE4)
    FieldNames("site_fetch_W")
  Sample(1,DATA_SRCS,FP2)
    FieldNames("sonic_irga_source")
  Sample(1,Status.CompileResults,String)
    FieldNames("CompileResults")
  Sample(1,Status.CardStatus,String)
    FieldNames("CardStatus")
'FIXME XXX TODO :: the CR5000 apparently does not have a RunSignature field
'  in the Status table but the compiler doesn't mind. In contrast, there is
'  a ProgSignature field but the compiler apparently doesn't know about it.
  Sample(1,Status.RunSignature,UINT2)
    FieldNames("RunSig")
'  Sample(1,Status.ProgSignature,UINT2)
'    FieldNames("ProgSig")
  Sample(1,VERSION,String)
    FieldNames("ProgVersion")
EndTable


'==============================  CUSTOM MENU  ================================
Const Yes = True
Const Enable = True
Const At_TOD = True
Const Cancel = False
Const Disable = False
Const Manual = False
Const Delayed = False
Const AlwaysOff = False
Const A_ = 10
Const B_ = 11
Const C_ = 12
Const D_ = 13
Const E_ = 14
Dim save_schedule As Boolean
Dim discard_schedule As Boolean
Dim reset_schedule As Boolean
Dim save_settings As Boolean
Dim discard_settings As Boolean
Dim reset_settings As Boolean
Dim recompile As Boolean

DisplayMenu("REA DAQ",-1)
  DisplayValue("is running", is_running)
'  SubMenu("View REA data")
'    DisplayValue("Status", somevar) 'MetOnly / Armed / Running / Spent
'  EndSubMenu

  SubMenu("Run control")
    SubMenu("Schedule")
      MenuItem("Duration", ch_run_duration)
      MenuItem("Begin time", ch_run_begintod)
        MenuPick(Delayed, At_TOD)
      MenuItem("Time delay", ch_run_delay)
        MenuPick(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5, 6, 7, 8, 9, 10, 11, 12)
      MenuItem("Time of day", ch_run_tod)
      SubMenu("Apply/cancel")
        MenuItem("Save now?", save_schedule)
          MenuPick(Cancel, Yes)
        MenuItem("Discard?", discard_schedule)
          MenuPick(Cancel, Yes)
        MenuItem("Set default?", reset_schedule)
          MenuPick(Cancel, Yes)
      EndSubMenu
    EndSubMenu
    MenuItem("Shield flow", shield_ON)
      MenuPick(Enable, Disable)
    MenuItem("Queue run", run_queued)
      MenuPick(Cancel, Yes)
    MenuItem("Abort run", run_aborted)
      MenuPick(Cancel, Yes)
'    MenuItem("CurrentState",  'TODO
  EndSubMenu

  SubMenu("Settings")
    SubMenu("Flow rates")
      MenuItem("Shield startup", ch_flow_auto_shld)
        MenuPick(LastState,AlwaysOff)
      MenuItem("Standby shield rate", ch_flowSP_shld)
      MenuItem("Running shield rate", ch_flowSP_zero)
      MenuItem("Sample SP mode", ch_flowSP_auto)
        MenuPick(Automatic, Manual)
      MenuItem("Manual rate", ch_flowSP_updn)
    EndSubMenu
    SubMenu("Deadband")
      MenuItem("Mult. [0-1)", ch_dband_mult)
      MenuItem("Minimum, m/s", ch_dband_min)
      MenuItem("Default, m/s", ch_dband_def)
    EndSubMenu
    SubMenu("Site & sensors")
      MenuItem("Sonic azimuth", ch_sonic_azimuth)
      MenuItem("Sonic height", ch_sonic_height)
      MenuItem("IRGA vert. sep.", ch_irga_vert_sep)
      MenuItem("IRGA horz. sep.", ch_irga_horz_sep)
      MenuItem("Mag. declin.", ch_site_declin)
      MenuItem("Max fetch N", ch_site_fetch_N)
      MenuItem("Max fetch E", ch_site_fetch_E)
      MenuItem("Max fetch S", ch_site_fetch_S)
      MenuItem("Max fetch W", ch_site_fetch_W)
      MenuItem("Roughness length", ch_site_rufness)
    EndSubMenu
    SubMenu("Apply/cancel")
      MenuItem("Save now?", save_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Discard?", discard_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Set default?", reset_settings)
        MenuPick(Cancel, Yes)
    EndSubMenu
  EndSubMenu

  SubMenu("Initial setup")
    MenuItem("sonic/IRGA", DATA_SRCS)
      MenuPick(DATA_SRCS, SDM_CSAT3_LI7500_1, SDM_CSAT3A_EC150_2)
    'SDM speed must be set through const table, menupick would be too onerous
    MenuItem("SDM addr: CSAT3", CSAT_ADDR)
      MenuPick(CSAT_ADDR,0,1,2,3,4,5,6,7,8,9,A_,B_,C_,D_,E_)
    MenuItem("SDM addr: LI7500", LI7500_ADDR)
      MenuPick(LI7500_ADDR,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
    MenuItem("SDM addr: EC100", EC100_ADDR)
      MenuPick(EC100_ADDR,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
    MenuItem("Min samp flow sLpm", UPDNFLOW_MIN)
    MenuItem("Min zero flow sLpm", ZEROFLOW_MIN)
    MenuItem("Min declin allowed", DECLIN_MIN)
    MenuItem("Max declin allowed", DECLIN_MAX)
    MenuRecompile("Apply now?", recompile)
      MenuPick(Cancel,Yes)
  EndSubMenu
EndMenu


'===============================  FUNCTIONS  =================================

'convert long format time to floating-point military time representation,
'rounded to nearest half-hour; treats nonsense values (xx60 to xx99) as 59 and
'returns negative values unaltered; does NOT modulo by 24 (e.g. returns a time,
'not time-of-day)
'  ex: 18   -> 18    18.2 -> 18   18.25 -> 18.5   18.74 -> 18.5   18.75 -> 19
'      1800 -> 18    1805 -> 18    1815 -> 18.5    1830 -> 18.5    1844 -> 18.5
'      1845 -> 19    1860 -> 19    1899 -> 19     -1899 -> -1899    -18 -> -18
'      35   -> 35    35.3 -> 35.5  3500 -> 35      3510 -> 35      3599 -> 36
'
'FIXME this function should actually round to STAT_INTV but that's a step up
'  from complex to complicated.
Function military_to_FP(timestr) As Float
  If (timestr <= 0) Then Return (timestr)
  If (timestr >= 100) Then
    Dim tmp
    tmp = timestr MOD 100
    timestr = (timestr INTDV 100) + IIF(tmp >= 59, 0.9833, tmp/60.0)
  EndIf
  Return (Round(timestr*2, 0)/2)
EndFunction

'calculate mass density of air weighted for water vapor content
'
'[tmpr] = C, [press] = kPa (barometric), [H2Opress] = kPa (water vapor)
Function density_of_air(tmpr, press, H2Opress) As Float 'kg/m^3
  '(Pa/kPa)[ (kPa)(kg*K/J)(1/K)(J / Pa*m^3) + (kPa)(kg*K/J)(1/K)(J / Pa*m^3) ]
  Return 1000*( (press-H2Opress)/(Rd*(tmpr+273.15)) + _
                                                  H2Opress/(Rv*(tmpr+273.15)) )
EndFunction

'Derived by inverting equations in Appendix D of EC150 manual
'[Gas] = mmol/m^3, [H2O] = mmol/m^3, [Tmpr] = C, [Press] = kPa (abs.)
Function dry_mixing_ratio(Gas, H2O, tmpr, press) As Float 'ppm (umol/mol)
  Dim rhoair 'mmol/m^3 = (kPa)(K mmol/kPa m^3)(1/K)
  rhoair = press/(R_ * (tmpr + 273.15))
  'ppm = (umol/mol)(mmol/m^3) / (mmol/^3 - mmol/m^3)
  Return Round(10^6 * Gas / (rhoair - H2O), 0)
EndFunction

'estimate latent heat of vaporization by formula 8 from:
' A new formula for latent heat of vaporization as a function of temperature.
' By B. Henderson-Sellers, Dept. of Mathematics, University of Salford
' Quart. J. R. Met. Soc. (1984), 110, pp 1186-1190
'     Lv = 1.91846E6*(T/(T-33.91))^2    where  Lv = lat. heat of vapor, J/kg
'                                              T  = temperature, Kelvin
'[tmpr] = degC
Function LatentHeatVapH2O(tmpr) As Float 'J/g
  Return 1918.46*( (tmpr+273.15)/(tmpr+239.24) )^2
EndFunction

'volumetric flow rate
'
'See constants MFC_STP_T and MFC_STP_P for standard conditions definition
'
'[massFlow] = std L/min @ STP, [tmpr] = C, [press] = kPa (abs.)
Function volumetric_flow(massFlow, tmpr, press) As Float 'L/min
  Return (massFlow * ((tmpr+273.15)/MFC_STP_T) * (MFC_STP_P/press))
EndFunction

'footprint calc, Hsieh et al, 2000
'
'TODO - find formula
'
'[L] = m
Function FootprintEstimate(L) As Float 'm
  If (sonic_height=0 OR site_rufness=0 OR L=0 OR L=NAN) Then
    Return NAN
  EndIf
  Dim Dh, Ph, Zu, Zm, Zo
  Zm = sonic_height 'm
  Zo = site_rufness/1000 'cm -> m
  Zu = Zm * (LOG(Zm/Zo) - 1 + (Zo/Zm))
  If (ABS(Zu/L) < 0.04) Then 'neutral
    Dh = 0.97
    Ph = 1
  ElseIf L < 0 'unstable
    Dh = 0.28
    Ph = 0.59
  Else          'stable
    Dh = 2.44
    Ph = 1.33
  EndIf
  Return (Dh/(0.357*0.4*0.4) * ABS(L)^(1-Ph) * Zu^Ph)
EndFunction

'integral turbulence test following Hammerle et al. (2007)
'
'TODO : find formula
'
'[L] = m
Function TurbulenceTest(sigma_W, u_star_, L) As Float 'dimless (?) FIXME
  If (sonic_height=0 OR L=0 OR sigma_W=NAN OR u_star_=NAN OR L=NAN) Then
    Return NAN
  EndIf
  Dim itt_model, zeta
  zeta = sonic_height/L
  If (zeta < -2 OR zeta >= 1) Then
    Return 999 'TODO is NAN more appropriate here? or INF?
  Else
    'XXX TODO does this suffer from same IIF issue found with setpoints?
    itt_model = 1.25*IIF(zeta < 0, (1+3*ABS(zeta))^(1/3.), (1+0.2*zeta))
    Return 100*ABS((sigma_W/u_star_) - itt_model)/itt_model
  EndIf
EndFunction


'===============================  SUBROUTINES  ===============================
Sub update_delayed_start_time()
  RealTime(rtime)
  start_run = ((hrofday+ch_run_delay) MOD 24)*60 + IIF(minofhr >= 30, 60, 30)
EndSub

Sub end_run()
  is_running = False
  run_aborted = Cancel
  run_queued = Cancel
  run_already_queued = False
  elapsed_time = Timer(RUN_TIMER,min,STOP_RESET)
EndSub

Sub update_deadband()
  'HINT deadband is set to NAN at start-up so it can be caught by the next
  '  line; a change to settings (dband_def, dband_mult, dband_min) skips
  '  into Else clause unless other half of equation (Uz_Std) is invalid
  If (deadband=NAN OR Uz_Std=NAN OR Uz_Std=0) Then
    deadband = dband_def
  Else
    deadband = dband_mult * Uz_Std
  EndIf
  If (deadband < dband_min) Then deadband = dband_min
  neg_deadband = -1*deadband
EndSub

'--------------------
Sub set_default_choices()
  ch_flow_auto_shld = DEF_FLOW_AUTO_SHLD
  ch_flowSP_shld = DEF_FLOWSP_WAIT
  ch_flowSP_zero = DEF_FLOWSP_ZERO
  ch_flowSP_auto = DEF_FLOWSP_AUTO
  ch_flowSP_updn = DEF_FLOWSP_UPDN
  ch_dband_mult = DEF_DBAND_MULT
  ch_dband_min = DEF_DBAND_MIN
  ch_dband_def = DEF_DBAND_DEF
  ch_sonic_azimuth = DEF_SONIC_AZIMUTH
  ch_sonic_height = DEF_SONIC_HEIGHT
  ch_irga_vert_sep = DEF_IRGA_VERT_SEP
  ch_irga_horz_sep = DEF_IRGA_HORZ_SEP
  ch_site_declin = DEF_SITE_DECLIN
  ch_site_fetch_N = DEF_SITE_FETCH_N
  ch_site_fetch_E = DEF_SITE_FETCH_E
  ch_site_fetch_S = DEF_SITE_FETCH_S
  ch_site_fetch_W = DEF_SITE_FETCH_W
  ch_site_rufness = DEF_SITE_RUFNESS
EndSub

Sub populate_choices()
  Move(choice(1),NUM_SETTINGS,settings(1),NUM_SETTINGS)
EndSub

Sub save_current_choices()
  'Input validation
  If (ch_flowSP_shld < ZEROFLOW_MIN) Then (ch_flowSP_shld = ZEROFLOW_MIN)
  If (ch_flowSP_shld > ZEROFLOW_MAX) Then (ch_flowSP_shld = ZEROFLOW_MAX)
  If (ch_flowSP_zero < ZEROFLOW_MIN) Then (ch_flowSP_zero = ZEROFLOW_MIN)
  If (ch_flowSP_zero > ZEROFLOW_MAX) Then (ch_flowSP_zero = ZEROFLOW_MAX)
  If (ch_flowSP_updn < UPDNFLOW_MIN) Then (ch_flowSP_updn = UPDNFLOW_MIN)
  If (ch_flowSP_updn > UPDNFLOW_MAX) Then (ch_flowSP_updn = UPDNFLOW_MAX)

  'HINT treat azimuth differently since 0 is valid option
  sonic_azimuth = IIF(sonic_azimuth < 0, -1, FIX(sonic_azimuth) MOD 360)

  If (ch_sonic_height < 0) Then (ch_sonic_height = 0)
  If (ch_site_declin < DECLIN_MIN) Then (ch_site_declin = DECLIN_MIN)
  If (ch_site_declin > DECLIN_MAX) Then (ch_site_declin = DECLIN_MAX)
  If (ch_site_fetch_N < 0) Then (ch_site_fetch_N = 0)
  If (ch_site_fetch_E < 0) Then (ch_site_fetch_E = 0)
  If (ch_site_fetch_S < 0) Then (ch_site_fetch_S = 0)
  If (ch_site_fetch_W < 0) Then (ch_site_fetch_W = 0)
  If (ch_site_rufness < 0) Then (ch_site_rufness = 0)

  'HINT order matters when validating dband settings!
  If (ch_dband_min < 0) Then (ch_dband_min = 0)
  If (ch_dband_def < ch_dband_min) Then (ch_dband_def = ch_dband_min)
  If (ch_dband_mult > 1) Then (ch_dband_mult = 1)
  If (ch_dband_mult <= 0) Then (ch_dband_mult = DEF_DBAND_MULT)
  update_deadband()

  'Populate dependent variables
  shld_SPval = ch_flowSP_shld/MFC_ZERO_MULT
  zero_SPval = ch_flowSP_zero/MFC_ZERO_MULT
  setpnt_updn = ch_flowSP_updn/MFC_UPDN_MULT 'TODO conditionally set this
    'to the manually defined value or automatically determined value?

  Move(settings(1),NUM_SETTINGS,choice(1),NUM_SETTINGS)
  Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,WRITEFILE)
EndSub

Sub load_settings()
  filehandle = FileOpen(SETTINGS_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then  'file not found
    set_default_choices()
  Else
    Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,READFILE)
    populate_choices()
  EndIf
  save_current_choices()
EndSub

Sub setdefault_settings()
  FileManage(SETTINGS_FILE,8) 'delete file
  load_settings()
EndSub

'--------------------
Sub set_default_sch_settings()
  ch_run_duration = DEF_RUN_DURATION
  ch_run_begintod = DEF_RUN_BEGINTOD
  ch_run_delay = DEF_RUN_DELAY
  ch_run_tod = DEF_RUN_TOD
EndSub

Sub populate_sch_choices()
  Move(sch_choice(1),NUM_SCHEDULE,sch_settings(1),NUM_SCHEDULE)
EndSub

Sub save_current_sch_choices()
  'Input validation
  ch_run_duration = military_to_FP(ch_run_duration)
  If (ch_run_duration < RUNTIME_MIN) Then ch_run_duration = RUNTIME_MIN
  If (ch_run_duration > RUNTIME_MAX) Then ch_run_duration = RUNTIME_MAX
  ch_run_tod = military_to_FP(ch_run_tod)
  ch_run_tod = IIF(ch_run_tod < 0, 0, ch_run_tod MOD 24)

  'Populate dependent variables
  If (ch_run_begintod) Then
    start_run = ch_run_tod * 60
  Else
    update_delayed_start_time()
  EndIf
  run_dur = ch_run_duration * 60

  Move(sch_settings(1),NUM_SCHEDULE,sch_choice(1),NUM_SCHEDULE)
  Calfile(sch_settings,NUM_SCHEDULE,SCHEDULE_FILE,WRITEFILE)
EndSub

Sub load_sch_settings()
  filehandle = FileOpen(SCHEDULE_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then 'file not found
    set_default_sch_settings()
  Else
    Calfile(sch_settings,NUM_SCHEDULE,SCHEDULE_FILE,READFILE)
    populate_sch_choices()
  EndIf
  save_current_sch_choices()
EndSub

Sub setdefault_sch_settings()
  FileManage(SCHEDULE_FILE,8) 'delete file
  load_sch_settings()
EndSub

'--------------------
Sub save_shield_state()
  'HINT proxy variable used for compatibility with "Shield start-up state: AlwaysOff" option
  '  but don't do "last_shield_ON = shield_ON" here b/c `load_shield_state()` will hiccup
  Calfile(lastrun_shield_ON,1,SHLDSTATE_FILE,WRITEFILE)
EndSub

Sub load_shield_state()
  filehandle = FileOpen(SHLDSTATE_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then 'file not found
    lastrun_shield_ON = False
  Else
    Calfile(lastrun_shield_ON,1,SHLDSTATE_FILE,READFILE)
  EndIf
  save_shield_state()
EndSub

Sub update_shield_state()
  If (shield_ON) Then
    If (NOT shld_already_ON) Then
      lastrun_shield_ON = True
      shld_already_ON = True
      save_shield_state()
      'HINT initialize sample flow SP here but update SP within autothrottle()
      If (flowSP_auto) Then
        setpnt_updn = UPDNFLOW_MAX/MFC_UPDN_MULT
      Else
        setpnt_updn = flowSP_updn
      EndIf
    EndIf
    'HACK an IIF is preferable except it returns wild values
    If (is_running) Then
      setpnt_zero = zero_SPval
    Else
      setpnt_zero = shld_SPval
    EndIf
  Else
    setpnt_updn = 0
    setpnt_zero = 0
    If (shld_already_ON) Then
      shld_already_ON = False
      lastrun_shield_ON = False
      save_shield_state()
    EndIf
  EndIf
EndSub

Sub autothrottle()
  AvgRun(mean_up_flow,1,flow_up,10)
  AvgRun(mean_dn_flow,1,flow_dn,10)
  If (ABS(mean_up_flow - mean_dn_flow) > 0.1) Then
    decreasing_flow = True
    setpnt_updn -= (0.1/MFC_UPDN_MULT) 'decrease 0.1 sLpm
  Else
    decreasing_flow = False
  EndIf
EndSub

'---------------------
Sub setup()
  rot_angles(1) = 1.0
  deadband = NAN 'for catching in update_deadband()

  load_settings()
  load_sch_settings()
  load_shield_state()
  If (flow_auto_shld AND lastrun_shield_ON) Then
    shield_ON = Enable
  EndIf

  SDMSpeed(SDM_SPEED)
  CallTable(info)
EndSub


'===============================  MAIN PROGRAM  ==============================
BeginProg
  Call setup()
  Move(sonic(1),5,NAN,1)
  Move(irga(1),4,NAN,1)

  Scan(FAST_INTV,mSec,FAST_BUFF,0)
    'impose logical order on run controls
    If (run_aborted) Then 'priority given to abort signal; no-op outside runs
      end_run()
    ElseIf (is_running) Then
      shield_ON = Enable 'disallow turning off shield flow during sampling run
      run_queued = Cancel 'or attempting queue run while one still in-progress
    ElseIf (run_queued) Then
      If (NOT shield_ON) Then
        run_queued = Cancel 'force enabling shield flow before can queue run
        run_already_queued = False
      ElseIf (NOT run_begintod AND NOT run_already_queued) Then
        update_delayed_start_time()
        run_already_queued = True
      Else
        shield_ON = Enable 'prevent disabling shield once run is queued
      EndIf
    Else 'used as a lazy catch => ElseIf(NOT run_queued)
      run_already_queued = False
    EndIf

    If (run_queued AND TimeIntoInterval(start_run, 1440, Min)) Then
      is_running = True
      elapsed_time = Timer(RUN_TIMER,min,START) 'XXX TODO check what happens
        'to this timer if run wraps around past it's start time the next day!
      'XXX TODO update this logic tree as necessary to ensure updating the schedule while
      '     conducting a run is possible but does not interfere with current run. That is,
      '     how to save the run duration & make it effective immediately but to NOT reset the
      '     start timer, or at least how to not reset the duration timer... (?)
    ElseIf (is_running) Then
      elapsed_time = Timer(RUN_TIMER,min,QUERY)
      If (elapsed_time >= run_dur) Then end_run()
    EndIf
    PortSet(C_PUMP_ON, is_running)

    update_shield_state()
    PortSet(C_MFC_ON, shield_ON)
    PortSet(C_UPDN_OFF, NOT is_running)
    ExciteCAO(MFC_UPDN_CAO,setpnt_updn,False,True) 'XXX do MFCs need boost opt?
    ExciteCAO(MFC_ZERO_CAO,setpnt_zero,False,True)

    #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
      EC100(ec100_raw(1),EC100_ADDR,1)
      Move(sonic(1),5,ec100_raw(1),5)
      irga_CO2 = ec100_raw(6)/MW_co2 'mg/m^3 --> mmol/m^3
      irga_H2O = ec100_raw(7)*1000/MW_h2o 'g/m^3 --> mmol/m^3
      irga_diag = ec100_raw(8)
      irga_tmpr = ec100_raw(9)
      irga_press = ec100_raw(10)
      irga_CO2_signal = ec100_raw(11)
      irga_H2O_signal = ec100_raw(12)
      fast_co2_est = dry_mixing_ratio(irga_CO2,irga_H2O,irga_tmpr,irga_press)
    #ElseIf (DATA_SRCS=SDM_CSAT3_LI7500_1) Then
      CS7500(irga_CO2,1,LI7500_ADDR,LI7500_CMD)
      CSAT3(sonic_Ux,1,CSAT_ADDR,CSAT3_CMD,CSAT3_OPT)
      fast_co2_est = dry_mixing_ratio(irga_CO2,irga_H2O,hmp_T,irga_press)
    #EndIf

    Uz_rot = sonic_Uz*CT - sonic_Ux*ST*CE - sonic_Uy*ST*SE
    If (NOT is_running) Then
      vlv_up_ON = False
      vlv_dn_ON = False
    ElseIf (Uz_rot >= deadband) Then
      vlv_up_ON = True
      vlv_dn_ON = False
    ElseIf (Uz_rot <= neg_deadband) Then
      vlv_up_ON = False
      vlv_dn_ON = True
    Else 'deadband
      vlv_up_ON = False
      vlv_dn_ON = False
    EndIf
    PortSet(C_VLV_UP,vlv_up_ON) 'HINT PortSet occurs as measurement task
    PortSet(C_VLV_DN,vlv_dn_ON) '  but WriteIO is processing task (delayed)

    CallTable(ts_fast)
    CallTable(work_lag)
    If (work_lag.Output(1,LAG_SCANS)) Then
      #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
        GetRecord(lagged(1),work_lag,LAG_SCANS-EC100_DELAY)
        Move(aligned(1),14,lagged(1),14)
        disable_sonic = lag_sonic_diag > 0
        'XXX possibly check for Ux=-99999; see 2014 PROPHET FIS DAQ v1.0.5
        '  and v1.1 changelog for details on why
        disable_irga = lag_irga_diag > 0
      #ElseIf (DATA_SRCS=SDM_CSAT3_LI7500_1) Then
        GetRecord(lagged(1),work_lag,LAG_SCANS-CSAT3_DELAY)
        Move(aligned(1),5,lagged(1),5)
        disable_sonic = lag_sonic_diag AND &hF000 'bits 12-15 are flags

        GetRecord(lagged(1),work_lag,LAG_SCANS-LI7500_DELAY)
        Move(aligned(6),4,lagged(6),4)
        Move(aligned(10),3,NAN,1)
        'bits 4-7 are "OK" flags & AGC% encoded in bits 0-3
        disable_irga = (lag_irga_diag XOR &hF0) AND &hF0
      #EndIf

      GetRecord(lagged(1),work_lag,LAG_SCANS)
      Move(aligned(13),2,lagged(13),2) 'inst. valve state

      cov_sonic(1,1) = lag_Ts
      Move(cov_sonic(1,2),3,lag_Ux,3)
      cov_irga(1,1) = lag_CO2
      cov_irga(2,1) = lag_H2O
      'cov_irga(3,1) = lag_Tc
      Move(cov_irga(1,2),3,lag_Ux,3)
      Move(cov_irga(2,2),3,lag_Ux,3)
      'Move(cov_irga(3,2),3,lag_Ux,3)

      CallTable(work_cov)
      If (work_cov.Output(1,1)) Then
        GetRecord(cov_out(1),work_cov,1)

        'TODO sonic_uptime
        'TODO irga_uptime

        'Wind coordinate rotation: met->natural as described in:
        '  Chapter 3, Appendix A from Handbook of Micrometeorology, ed. Lee,
        '    Massman and Law
        '
        'Also in:
        '  Finnigan J.J., Clement R., Malhi Y., Leuning R., Cleugh H.A. A
        '  re-evaluation of long-term flux measurement techniques, Part I:
        '  Averaging and Coordinate Rotation. Boundary-Layer Meteorology
        '  107: 1-48, 2003.
        '
        'Given original met components: Ux, Uy, Uz
        '
        'By forcing mean lateral & vertical winds towards zero, the rotated
        ' "streamwise" vectors are given by:
        '    U2 = Ux*CT*CE + Uy*CT*SE + Uz*ST
        '    V2 = Uy*CE - Ux*SE
        '    W2 = Uz*CT - Ux*ST*CE - Uy*ST*SE
        '  where
        '    CE = |U1|/sqrt( |U1|^2 + |V1|^2 )
        '    SE = |V1|/sqrt( |U1|^2 + |V1|^2 )
        '    CT = sqrt( |U1|^2 + |V1|^2 )/sqrt( |U1|^2 + |V1|^2 + |W1|^2 )
        '    ST = |W1|/sqrt( |U1|^2 + |V1|^2 + |W1|^2 )
        '
        'These two rotations align base vector e1 (x-axis) to mean HZ WD and a
        'third rotation is needed to fix e2,e3. This is done by forcing
        'Cov(Uy,Uw) to zero but since it often results in physically
        'unrealistic orientations, this step is also often ignored.
        '    U3 = U2
        '    V3 = V2*CB + W2*SB
        '    W3 = W2*CB - V2*SB
        '  where
        '    CB = cos( 0.5*atan(2*Cov(V2,W2) / (Cov(V2,V2) - Cov(W2,W2))) )
        '    SB = sin( 0.5*atan*2*Cov(V2,W2) / (Cov(V2,V2) - Cov(W2,W2))) )
        '
        'In this program, only first two rotations are performed. Rotated
        'values are used in flux calcs but be aware this procecure acts as a
        'high-pass filter removing contributions from eddies of period greater
        'than averaging time (30min)!
        sqrt_UV = SQR(Ux_Avg^2 + Uy_Avg)
        sqrt_UVW = SQR(Ux_Avg^2 + Uy_Avg^2 + Uz_Avg^2)
        CE = Ux_Avg/sqrt_UV
        SE = Uy_Avg/sqrt_UV
        CT = sqrt_UV/sqrt_UVW
        ST = Uz_Avg/sqrt_UVW
        U_Avg = Ux_Avg*CT*CE + Uy_Avg*CT*SE + Uz_Avg*ST
        V_Avg = Uy_Avg*CE - Ux_Avg*SE
        W_Avg = Uz_Avg*CT - Ux_Avg*ST*CE - Uy_Avg*ST*SE
        'HINT values with "_Std" suffix are still covariances
        W_Std = SQR(Uz_Std*CT*CT + Ux_Std*ST*ST*CE*CE + Uy_Std*ST*ST*SE*SE - _
                    2*cov_Ux_Uz*CT*CE*ST - 2*cov_Uy_Uz*CT*ST*SE + _
                    2*cov_Ux_Uy*CE*ST*ST*SE)
        Uz_Std = SQR(Uz_Std) '(co)variances -> stdevs (ignore Ux_Std, Uy_Std)
        Ts_Std = SQR(Ts_Std)
        CO2_Std = SQR(CO2_Std)
        H2O_Std = SQR(H2O_Std)

        update_deadband() 'must occur after Uz_Std calc

        WD_unit_Avg = (360+WD_unit_Avg+sonic_azimuth+site_declin) MOD 360
        WD_rslt_Avg = (360+WD_rslt_Avg+sonic_azimuth+site_declin) MOD 360

        SatVP(hmp_e_sat_Avg, hmp_T_Avg)
        hmp_RH_Avg = 100*hmp_e_Avg/hmp_e_sat_Avg
        DewPoint(hmp_Tdew_Avg, hmp_T_Avg, hmp_RH_Avg)

        #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
          rho_a = density_of_air(irga_tmpr_Avg, irga_press_Avg, hmp_e_Avg)
        #Else
          rho_a = density_of_air(hmp_T_Avg,irga_press_Avg,hmp_e_Avg) 'kg/m^3
        #EndIf
        '? specific heat capacity of moist air: Cpm
        Lv = LatentHeatVapH2O(hmp_T_Avg) 'J/g

        tau = SQR(cov_Ux_Uz*cov_Ux_Uz + cov_Uy_Uz*cov_Uy_Uz) '(m/s)^2
        u_star = SQR(tau) 'm/s
        tau *= rho_a '(m^2/s^2)(kg/m^3) = (Pa m^3)/m^3 = Pa
        #If (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
          L_ = -u_star^3 *(irga_tmpr_Avg+273.15)/(K_*G_*cov_Ts_Uz) 'm
        #Else
          L_ = -u_star^3 *(hmp_T_Avg+273.15)/(K_*G_*cov_Ts_Uz) 'm
        #EndIf
        itt = TurbulenceTest(Uz_Std, u_star, L_) 'dimless
        x70 = FootprintEstimate(L_) 'm

        #If (DATA_SRCS=SDM_CSAT3_LI7500_1) Then
          CO2_ppm_Avg = dry_mixing_ratio(CO2_Avg, H2O_Avg, _
                                                    hmp_T_Avg, irga_press_Avg)
        #ElseIf (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
          CO2_ppm_Avg = dry_mixing_ratio(CO2_Avg, H2O_Avg, _
                                                irga_tmpr_Avg, irga_press_Avg)
        #EndIf

        rho_v = H2O_Avg*MW_h2o/1000 'g/m^3 = (mmol/m^3)(g/mol)(mol/1e3 mmol)
        rho_d = rho_a*1000 - rho_v 'g/m^3 = (kg/m^3)(1e3 g/kg) - g/m^3
        rho_c = CO2_Avg * MW_co2 'mg/m^3 = (mmol/m^3)(mg/mmol)
        sigma_wpl = rho_v/rho_d 'dimless

        'WPL80 Eqn 24:
        'mg/(m^2 s) = (1)(mg/m^3)*(m^3/g)(g/1e3 mg)*(mmol/m^3)(m/s)(mg/mmol)
        Fco2_LE_wpl = MU_WPL * rho_c/(rho_d*1000) * cov_H2O_Uz * MW_h2o
        #If (DATA_SRCS=SDM_CSAT3_LI7500_1) Then
          'mg/(m^2 s) = (1 + (1)(1))(mg/m^3)(K*m/s)(1/K)
          Fco2_H_wpl = (1 + MU_WPL*sigma_wpl) * rho_c * _
                                                  cov_Ts_Uz/(hmp_T_Avg+273.15)
        #ElseIf (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
          Fco2_H_wpl = (1 + MU_WPL*sigma_wpl) * rho_c * _
                                              cov_Ts_Uz/(irga_tmpr_Avg+273.15)
        #EndIf
        'mg/(m^2 s) = (mmol/m^3)(m/s) * (mg/mmol)
        Fco2_raw = cov_CO2_Uz * MW_co2
        Fco2 = Fco2_raw + Fco2_LE_wpl + Fco2_H_wpl 'mg/(m^2 s)

        'WPL80 Eqn 25:
        #If (DATA_SRCS=SDM_CSAT3_LI7500_1) Then
          'W/m^2 = (J/g) * (1 + (1)(1)) *
          '     ( (mmol/m^3)(m/s)(g/mol)(mol/1e3 mmol) + (K*m/s)(g/m^3)(1/K) )
          LE_wpl = Lv * (1 + MU_WPL*sigma_wpl) * _
                 (cov_H2O_Uz*MW_h2o/1000 + cov_Ts_Uz*rho_v/(hmp_T_Avg+273.15))
        #ElseIf (DATA_SRCS=SDM_CSAT3A_EC150_2) Then
          LE_wpl = Lv * (1 + MU_WPL*sigma_wpl) * _
             (cov_H2O_Uz*MW_h2o/1000 + cov_Ts_Uz*rho_v/(irga_tmpr_Avg+273.15))
        #EndIf
        'W/m^2 = (mmol/m^3)(m/s)(g/mol)(mol/1e3 mmol)(J/g)
        LE_raw = (cov_H2O_Uz*MW_h2o/1000)*Lv
        LE = LE_raw + LE_wpl 'W/m^2

        'TODO not WPL-corrections per-se, but DO adjust to use "ambient" tmpr
        '  instead of sonic (virtual) tmpr
        'Hs: W/m^2 = J/(s m^2) = (K*m/s)(kg/m^3)(J/(kg K))
        Hs_raw = cov_Ts_Uz * rho_a * Cpd
        Hs = Hs_raw

        'stability parameter
        'is within fetch
        '(bonus: stationarity)

        CallTable(stats)
      EndIf 'new 30min met record

    EndIf 'have enough scans to perform real-time lag compensation

    If (save_schedule) Then
      save_current_sch_choices()
      save_schedule = Cancel
    ElseIf (discard_schedule) Then
      populate_sch_choices()
      discard_schedule = Cancel
    ElseIf (reset_schedule) Then
      setdefault_sch_settings()
      reset_schedule = Cancel
    ElseIf (save_settings) Then
      save_current_choices()
      save_settings = Cancel
      CallTable(info)
    ElseIf (discard_settings) Then
      populate_choices()
      discard_settings = Cancel
    ElseIf (reset_settings) Then
      setdefault_settings()
      reset_settings = Cancel
      CallTable(info)
    EndIf

    inbetween_1hz_scan = True
    If (just_had_1hz_scan) Then
      just_had_1hz_scan = False
      inbetween_1hz_scan = False
    EndIf
  NextScan


  SlowSequence
  Scan(SLOW_INTV,Sec,0,0)
    VoltDiff(hmp_T,1,mv1000,HMP_T_DF,True,0,INTEG,HMP_T_MULT,HMP_T_OFF)
    VoltDiff(hmp_RH,1,mv1000,HMP_RH_DF,True,0,INTEG,HMP_RH_MULT,HMP_RH_OFF)

    VoltDiff(flow_up,1,mv5000,MFC_UP_DF,True,0,INTEG,MFC_UPDN_MULT,MFC_UPDN_OFF)
    VoltDiff(flow_dn,1,mv5000,MFC_DN_DF,True,0,INTEG,MFC_UPDN_MULT,MFC_UPDN_OFF)
    VoltSe(flow_zero,1,mv5000,MFC_ZERO_SE,True,0,INTEG,MFC_ZERO_MULT,MFC_ZERO_OFF)
    autothrottle()

    VaporPressure(hmp_e, hmp_T, hmp_RH) 'hmp_e needed in work_cov table

    CallTable(ts_slow)
'    CallTable(rea)

    just_had_1hz_scan = True
  NextScan
EndProg

