'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' CR5000 program for the denuder-based relaxed eddy accumulation system
'
' Adapted from "REA09-04-21 with SDM LI7500.CR5" and "REA09-04-21 with analog LI7500.CR5"
' programs used during 2009 Colorado feedlot NH3 study
'
' This header last modified 2013-10-07 by pokeeffe@wsu.edu
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'*** TOC ***
'Misc Notes
'User-Defined Constants
'Numerical Constants
'Hard-Wired Constants
'Default Menu Values
'Unit Definitions
'Component List
'Wiring Details
'Variables
'Final Output Data Tables
'Working Data Tables
'Program control Menu
'Begin Program


'*** MISC NOTES ***
'The sign convention for the fluxes is positive away from the surface and negative toward the surface.
'
'The cr5000 will introduce lags into the CSAT3, Op-2 [not working], and cr5000 Panel so that all 
'measurements are aligned in time.  The lags are a function of the Scan Interval and are computed 
'automatically by the program.


'*** USER-DEFINED CONSTANTS ***
'For each new site, several constants and calibration values should be entered:

Const SAVE_FLUX_DATA = TRUE	'Save computed fluxes to table? (TRUE/FALSE)
Const SAVE_TS_DATA = TRUE	'Save real-time data to table? (TRUE/FALSE)

Const OUTPUT_INTERVAL = 30	'Flux data output interval in minutes

ConstTable
  Const NUM_DAY_CPU = 1		'Number of days of data to store on the CPU
  Const NUM_DAY_CRD = 2		'Number of days of data to store on the card

  Const CSAT3_AZIMUTH = 0	'Unique value. {-152 = sonic pointing 208 deg, 208-360'}

  Const DEF_ZERO_SLPM = 2  'default flow rate of zero air, sLpm
  Const MIN_ZERO_SLPM = 0.4   'minimum permitted zero air flow, sLpm
  Const MAX_ZERO_SLPM = DEF_ZERO_SLPM 'max permitted zero air flow, sLpm
EndConstTable
'Compass azimuth of the -x axis. For the figure below, CSAT3_AZIMUTH = 90.
' () -> Compass coordinate system
' {} -> Right handed coordinate system aligned to north
'
'                               (N) 0
'                               {-y}
'                                |
'                                |
'                                |
'                                |
'          270 (W) {+x} --------[ ]----X---> {-x} (E) 90
'                              / |      \
'                    CSAT3 Block |      CSAT3 Transducers
'                                |
'                                |
'                                v
'                               {+y}
'                               (S) 180
'
' The program computes the compass wind direction, using the constant CSAT3_AZIMUTH, and a CSAT3 wind direction.  
' Good CSAT3 wind directions are -90 to 0 and 0 to 90 degrees, e.g. wind is blowing into the CSAT3 sensor head.

'Sendor height and surface roughness unique values
Const zm = 5.05 	'Measurement Height, m, above displacement ht
Const zo =0.04		'roughness length, m

'Define source area of feedlot for footprint calculations, Larned 
Const x_east_max = 10000		'sampling boundary, dist from tower (meters)
Const x_south_max = 10000		'sampling boundary, dist from tower (meters)
Const x_west_max = 10000		'sampling boundary, dist from tower (meters)
Const x_north_max = 10000		'sampling boundary, dist from tower (meters)
Const wdir_min =0			'min wind direction, wdir < min outside source area
Const wdir_max = 359		'max wind direction, wdir > max outside source area


'*** NUMERICAL CONSTANTS ***
Const CP = 1004.67 	'Estimate of heat capacity of air [J/(kg K)].
Const LV = 2440		'Estimate of the latent heat of vaporization [J/g].
Const MU_WPL = 29/18	'Ratio of the molecular weight of dry air to that of water vapor.
Const R = 8.3143e-3	'Universal gas constant [kPa m^3/(K mol) ].
Const RD = R/29		'Gas constant for dry air [kPa m^3/(K g)].
Const RV = R/18		'Gas constant for water vapor [kPa m^3/(K g)].
Const PI = 3.14159	'Mathematical constant pi


'*** HARD-WIRED CONSTANTS ***
Const SCAN_INTERVAL = 50	'Measurement rate: 50 mSec / 20 Hz
Const INTEG = 250   'analog measurement integration time 
Const OFFSET = 20		'An offset delay introduced to the CSAT3 and IRGA data
Const DELAY_CSAT = 2		'Fixed inherent lag of CSAT3 data (2 scans)
Const DELAY_IRGA = 5		'Estimated inherent lag of IRGA data 
Const SDM_PER = 30		'Default SDM clock speed
Const YES = -1		'Yes is defined as -1 (TRUE)
Const NO = 0		'No is defined as 0 (FALSE)
Const Now = 0		'Defined in prog control menu for starting time selection
Const Pick = -10	'Defined in prog control menu 
Const Run = -11	'Defined in prog control menu 
Const Reset = -12	'Defined in prog control menu 
Const Vary = -13	'Defined in prog control menu 

'*** DEFAULT MENU VALUES ***
Const DEF_SAVE_FLAG = YES
Const DEF_SAMP_HRS = 4
Const DEF_DELAY_DAYS = 0
Const DEF_DELAY_TOD = Now
Const DEF_SAMP_FLOW = 10

'Determine scan buffer size, CSAT3 Execution Parameters and fixed lags for CSAT3 and IRGA.
Const SCAN_BUFFER_SIZE = 300*INT (1000/SCAN_INTERVAL)		'Compute 5 minute scan buffer.
Const CSAT_OPT = INT (1000/SCAN_INTERVAL)			'Compute CSAT3 Execution Parameter (10 or 20 Hz).
Const CSAT_REC_BCK = OFFSET-DELAY_CSAT				'Number of records back to align CSAT3 data.
Const IRGA_REC_BCK = OFFSET-DELAY_IRGA				'Number of records back to align IRGA data.

'Compute CPU and card storage size for the FLUX DataTables.
Const FLUX_SIZE_CPU = (NUM_DAY_CPU*1440)/OUTPUT_INTERVAL	'Size of flux DataTable on CPU [days].
Const FLUX_SIZE_CRD = (NUM_DAY_CRD*1440)/OUTPUT_INTERVAL	'Size of flux DataTable on card [days].

Const HMP_T_DF = 11
Const HMP_T_MULT = (60 + 40)/1000 '-40 to 60 over 0-1V
Const HMP_T_OFF = -40
Const HMP_RH_DF = 12
Const HMP_RH_MULT = (100)/1000 '0-100% over 0-1V
Const HMP_RH_OFF = 0

Const MFC_UP_DF = 1
Const MFC_ZERO_DF = 2
Const MFC_DN_DF = 3
Const MFC_UPDN_MULT = (10/5000)
Const MFC_UPDN_OFF = 0
Const MFC_ZERO_MULT = (5/5000)
Const MFC_ZERO_OFF = 0
Const MFC_UPDN_CAO = CAO1
Const MFC_ZERO_CAO = CAO2

Const C_UPDN_OFF = 1
Const C_ZERO_OFF = 2
Const C_UPDN_PURGE = 3
Const C_ZERO_PURGE = 4
Const C_VLV_UP = 5 
Const C_VLV_DN = 6 
Const C_PUMP_ON = 7
Const C_MFC_PWR = 8

Const MASK_UPDN_OFF = 2^(C_UPDN_OFF-1)     '0000 0001
Const MASK_ZERO_OFF = 2^(C_ZERO_OFF-1)     '0000 0010
Const MASK_UPDN_PURGE = 2^(C_UPDN_PURGE-1) '0000 0100
Const MASK_ZERO_PURGE = 2^(C_ZERO_PURGE-1) '0000 1000
Const MASK_UP_VLV = 2^(C_VLV_UP-1)         '0001 0000
Const MASK_DN_VLV = 2^(C_VLV_DN-1)         '0010 0000
Const MASK_UPDN_VLV = (MASK_UP_VLV OR MASK_DN_VLV) '0011 0000
Const MASK_PUMP_ON = 2^(C_PUMP_ON-1)       '0100 0000
Const MASK_MFC_PWR = 2^(C_MFC_PWR-1)       '1000 0000

Const MASK_OFF = &B00000000
Const MASK_FLOW = (MASK_MFC_PWR OR MASK_PUMP_ON OR MASK_ZERO_OFF OR MASK_UPDN_OFF)
Const MASK_ALL = (MASK_FLOW OR MASK_UPDN_VLV)
Const MASK_RESET = (MASK_MFC_PWR OR MASK_UPDN_OFF) 'standby: MFCs power ON, pump OFF, 
                   'up valve OFF, dn valve OFF, zero mfc NOT valve OFF, up/dn mfc valve OFF
Const MASK_RUNNING = (MASK_MFC_PWR OR MASK_PUMP_ON) 'neither MFC valve OFF 

Const PTB_DF = 10
Const PTB_MULT = (106 - 60) / 2500   '600-1060 hPa = 60-106 kPa / 2.5V
Const PTB_OFF = 60 

'*** UNIT DEFINITIONS ***
'Units	Units
'C	Celsius
'degrees	degrees (angle)
'g	grams
'J	Joules
'kg	kilograms
'kPa	kilopascals
'm	meters
'mg	milligrams
'mmol	millimoles
'mol	moles
's	seconds
'umol	micromols
'V	volts
'W	Watts


'*** COMPONENT LIST ***
'CSAT3	three dimensional sonic anemometer
'AFC 	alborg mass flow controllers (2 units), MFCs 0-10sLPM
'AFC		Tylan mass flow controller (1), 0-5sLPM
'HMP45AC	temp & humidity guage
'PTA427A	pressure guage
'IRGA	open path infrared gas analyzer (CO2 and H2O) [Op-2 disabled, used LI-6262 in Greeley]
'
'Full description of wiring connections is available in the Standard Operating Procedures manual


'*** CR5000 INPUT KEY ***
'****changes made to the program sent by Brian from Greeley on 4/16
'
'SDM-C1	CSAT3 SDM Data (green)
'		LI-7500 SDM Data (gray) ****
'SDM-C2	CSAT3 SDM Clock (white)
' 		LI-7500 SDM Clock (blue) ****
'SDM-C3	CSAT3 SDM Enable (brown)
'		LI-7500 SDM Enable (grown) ****
'G		LI-7500 SDM reference (black) & shield (white) ****
'
'C1 		TTL Valve OFF on MFCs 1 and 2, recircultating (end green)
'C2 		G4PB4R relay for 2-way valve control (either wire)
'C3 		Pressure transmitter (yellow)
'C4 		G4PB4R relay for air pump control
'C5 		G4PB4R relay for 3-way valve control UP (either wire)
'C6 		G4PB4R relay for 3-way valve control DN (either wire)
'
'SE1		Pressure transmitter (orange)
'SE9		HMP45 Temperature (yellow)
'SE10	HMP45 Relative Humidity (blue)
'SE25	Tylan MFC #3, zero: output (brown)
'SE27	no longer used ****
'SE28	no longer used ****
'SE29	no longer used ****
'
'DE11 	Aalborg MFC #1, UP: [H] output (inner green) & [L] output grnd (outer orange)
'DE12	Aalborg MFC #2, DN: [H] output (inner green) & [L] output grnd (outer orange)
'
'CAO1  	Aalborg MFCs: control setpoint (outer red)
'CAO2	Tylan MFC: control setpoint (green)
'SW12	Housing exhaust fan + 


'*** VARIABLES ***
'Online lagged CSAT3 and IRGA data.
Public aligned_data(16)
Alias aligned_data(1) = Uz
Alias aligned_data(2) = Ux
Alias aligned_data(3) = Uy
Alias aligned_data(4) = co2
Alias aligned_data(5) = h2o
Alias aligned_data(6) = not_used_1
Alias aligned_data(7) = Ts
Alias aligned_data(8) = not_used_2
Alias aligned_data(9) = diag_csat
Alias aligned_data(10) = press
Alias aligned_data(11) = diag_irga
Alias aligned_data(12) = panel_temp
Alias aligned_data(13) = Uz_valve_lag
Alias aligned_data(14) = vlv_up_is_on_lag
Alias aligned_data(15) = vlv_dn_is_on_lag
Alias aligned_data(16) = PTB_press
Units Uz = m/s
Units Ux = m/s
Units Uy = m/s
Units co2 = mg/m^3
Units h2o = g/m^3
Units Ts = C
Units diag_csat = unitless
Units press = kPa
Units diag_irga = unitless
Units panel_temp = C
Units PTB_press = kPa

Public Ts_american 
Units Ts_american = F

Public co2_ppm_est
Units co2_ppm_est = approx ppm

Public diag_bits(8)				'Warning flags.
Alias diag_bits(1) = del_T_f		'Delta temperature warning flag.
Alias diag_bits(2) = sig_lck_f	'Poor signal lock warning flag.
Alias diag_bits(3) = amp_h_f		'Amplitude high warning flag.
Alias diag_bits(4) = amp_l_f		'Amplitude low warning flag.
Alias diag_bits(5) = chopper_f	'Chopper warning flag.
Alias diag_bits(6) = detector_f	'Detector warning flag.
Alias diag_bits(7) = pll_f		'PLL warning flag.
Alias diag_bits(8) = sync_f		'Synchronization warning flag.
Units diag_bits = samples
Public agc 					'Automatic gain control.
Units agc = unitless

'No delay meteorological variables.
Public hmp(2)		'HMP45 temperature and relative humidity.
Public e_hmp		'HMP45 vapor pressure.
Dim e_sat			'Saturated vapor pressure by Clausius-Clapeyron eqn
Dim h2o_hmp_mean	'Mean HMP45 vapor density.
Dim rho_a_mean		'Mean air density.
Dim rho_d_mean		'Density of dry air used in Webb et al. term [kg / m^3].
Public T_dew_mean	'Tdew from hmp
Public RH_mean  	'RH from HMP
Public old_RH_mean
Public batt_volt	'cr5000 battery voltage.
Alias hmp(1) = t_hmp
Alias hmp(2) = rh_hmp
Units t_hmp = C
Units rh_hmp = percent
Units e_hmp = kPa
Units e_sat = mbar
Units h2o_hmp_mean = g/m^3
Units rho_a_mean = kg/m^3
Units batt_volt = V
Units T_dew_mean = C

Public hmp_t_american
Units hmp_t_american = F

'MFC-specific variables  
Public MFC(3)
Alias MFC(1) = flow_rea_up
Alias MFC(2) = flow_rea_dn
Alias MFC(3) = flow_zero
Units flow_rea_up = sLpm
Units flow_rea_dn = sLpm
Units flow_zero = sLpm

'Flux variables.
Dim Fc_wpl		'Carbon dioxide flux (IRGA), with Webb et al. term.
Dim LE_wpl		'Latent heat flux (IRGA), with Webb et al. term.
Dim Hs			'Sensible heat flux using sonic temperature.
Dim Hc			'Sensible heat flux computed from Hs and LE_wpl.
Dim tau			'Momentum flux.
Dim u_star		'Friction velocity.
Dim old_u_star
Dim Fc_irga		'Carbon dioxide flux (IRGA), without Webb et al. term.
Dim LE_irga		'Latent heat flux (IRGA), without Webb et al. term.
Dim co2_wpl_LE		'Carbon dioxide flux (IRGA), Webb et al. term due to latent heat flux.
Dim co2_wpl_H		'Carbon dioxide flux (IRGA), Webb et al. term due to sensible heat flux.
Dim h2o_wpl_LE		'Latent heat flux (IRGA), Webb et al. term due to latent heat flux.
Dim h2o_wpl_H		'Latent heat flux (IRGA), Webb et al. term due to sensible heat flux.
Dim cov_out(52)	'Covariance: wind/scalars, wind vector, t_hmp_mean, e_mean, co2_mean, press_mean, Ts_mean
Units Fc_wpl = mg/(m^2 s)
Units LE_wpl = W/m^2
Units Hs = W/m^2
Units Hc = W/m^2
Units tau = kg/(m s^2)
Units u_star = m/s
Units Fc_irga = mg/(m^2 s)
Units LE_irga = W/m^2
Units co2_wpl_LE = mg/(m^2 s)
Units co2_wpl_H = mg/(m^2 s)
Units h2o_wpl_LE = W/m^2
Units h2o_wpl_H = W/m^2


'Aliases for covariances.
Alias cov_out(1) = cov_Uz_Uz
Alias cov_out(2) = cov_Uz_Ux
Alias cov_out(3) = cov_Uz_Uy
Alias cov_out(4) = cov_Uz_co2
Alias cov_out(5) = cov_Uz_h2o	'(6) omitted
Alias cov_out(7) = cov_Uz_Ts	'(8) omitted
Alias cov_out(9) = cov_Ux_Ux
Alias cov_out(10) = cov_Ux_Uy
Alias cov_out(11) = cov_Ux_co2
Alias cov_out(12) = cov_Ux_h2o	'(13) omitted
Alias cov_out(14) = cov_Ux_Ts	'(15) omitted
Alias cov_out(16) = cov_Uy_Uy
Alias cov_out(17) = cov_Uy_co2
Alias cov_out(18) = cov_Uy_h2o	'(19) omitted
Alias cov_out(20) = cov_Uy_Ts	'(21) omitted
Alias cov_out(22) = cov_co2_co2	'(23...26) omitted
Alias cov_out(27) = cov_h2o_h2o	'(28...33) omitted
Alias cov_out(34) = cov_Ts_Ts	'(35...38) omitted
Units cov_Uz_Uz	= (m/s)^2
Units cov_Uz_Ux = (m/s)^2
Units cov_Uz_Uy = (m/s)^2
Units cov_Uz_co2 = mg/(m^2 s)
Units cov_Uz_h2o = g/(m^2 s)
Units cov_Uz_Ts = m C/s
Units cov_Ux_Ux = (m/s)^2
Units cov_Ux_Uy = (m/s)^2
Units cov_Ux_co2 = mg/(m^2 s)
Units cov_Ux_h2o = g/(m^2 s)
Units cov_Ux_Ts = m C/s
Units cov_Uy_Uy = (m/s)^2
Units cov_Uy_co2 = mg/(m^2 s)
Units cov_Uy_h2o = g/(m^2 s)
Units cov_Uy_Ts = m C/s
Units cov_co2_co2 = (mg/m^3)^2
Units cov_h2o_h2o = (g/m^3)^2
Units cov_Ts_Ts = C^2


'Wind directions and speed.
Alias cov_out(39) = wnd_dir_compass
Alias cov_out(41) = wnd_spd
Alias cov_out(42) = rslt_wnd_spd
Alias cov_out(43) = wnd_dir_csat3
Alias cov_out(44) = std_wnd_dir
Alias cov_out(45) = t_hmp_mean
Alias cov_out(46) = e_hmp_mean
Alias cov_out(47) = co2_mean
Alias cov_out(48) = press_mean
Alias cov_out(49) = Ts_mean
Alias cov_out(50) = Ux_mean
Alias cov_out(51) = Uy_mean
Alias cov_out(52) = Uz_mean
Units wnd_dir_compass = degrees
Units wnd_spd = m/s
Units rslt_wnd_spd = m/s
Units wnd_dir_csat3 = degrees
Units std_wnd_dir = degrees
Units t_hmp_mean = C
Units co2_mean = mg/m^3
Units press_mean = kPa
Units Ts_mean = C
Units Ux_mean = m/s
Units Uy_mean = m/s
Units Uz_mean = m/s

'REA sampling and rotation related Variables
Public CT	'rotation angles
Public ST
Public CE
Public SE
Units CT=radians
Units ST=radians
Units CE=radians
Units SE=radians
Public Uz_rot		'rotated vertical wind
Public Uz_valve	'value of Uz used for real time valve control

Public Elapse1 		'timer for controlling sampling duration
Public Startday
Public ElapseDay
Public countdown_timer		'duration of sampling
Dim cov_Uz_Uz_rot
Public sig_w
Public sig_w_rot
Units Uz_rot=m/s
Units Elapse1 = min
Units countdown_timer = min
Units sig_w =m/s
Units sig_w_rot = m/s

Public L		'Obukhov length, used for footprint
Public x70	'distance to include 70%, F/So=0.70
Public zeta	'z/L
Public itt 	'integral turbulence text
Public old_itt
Dim itt_model
Dim itt_meas
Dim Dh		'for Hsieh footprint model
Dim Ph		'for Hsieh footprint model
Dim zu		'for Hsieh footprint model

Public alpha
Public easting
Public westing
Public southing
Public northing
Public compass_diag

Dim neg_dband   'remove redudant computations
Public Dband		'deadband
'Public K_d_mean	'correction factors for MFCs dry air
'Public K_a_mean	'correction factors for MFCs moist air
Public CAO_1_mv	'output voltages for controlling chemcomb MFCs
Public CAO_2_mv	'output voltages for controlling zero air MFC
Public chemc_flow	'sample rate for chemcombs
Public makeup_flow	'sample rate for makeup air / shield gas
Units Dband = m/s
'Units K_d_mean = ratio
'Units K_a_mean = ratio
Units CAO_1_mv = mv
Units CAO_2_mv = mv
Units chemc_flow = sLpm
Units makeup_flow = sLpm

Public CtrlPort(8) As Boolean
Alias CtrlPort(1) = updn_mfc_is_off 'up/dn MFC off signal
Alias CtrlPort(2) = zero_mfc_is_off 'makeup air MFC off signal
'C3, C4 MFC valve purge logic not built into program
Alias CtrlPort(3) = updn_purging 'up/dn MFC valve purge signal
Alias CtrlPort(4) = zero_purging 'makeup air MFC valve purge signal
Alias CtrlPort(5) = vlv_up_is_on 'REA valve up eddy
Alias CtrlPort(6) = vlv_dn_is_on	'REA valve dn eddy
Alias CtrlPort(7) = pump_is_on	'turns air pump off/on
Alias CtrlPort(8) = mfc_pwr_is_on 'zero MFC valve

'Diagnostic variables.
Dim disable_flag_on(4)		'Intermediate processing disable flags.
'disable_flag_on(1)			'TRUE: CSAT3 diag warn flags on or CSAT3 has no data.
'disable_flag_on(2)			'TRUE: LI-7500 diag warn flags on or LI-7500 failed to send data
'disable_flag_on(3)			'TRUE: CSAT3 diag warn flags on. Used to filter the sum of diag warn flags.
'disable_flag_on(4)			'TRUE: LI-7500 diag warn flags on. Used to filter the sum of diag warn flags.
Dim n					'Number of samples in the online covariances.
Units n = samples

'Program Control flags and variables
Public save_flag			'Specifies whether real-time site data is stored or not
Public REA_flag_on 			'Triggers start of sampling (pump/valves on)
Public control_input 		'Value designated by user via program control menu
Public control_flag 		'Compared against control_input to sense user changes
Public samp_flow			'Permits overriding of sampling rate selection
Public fin_flag_on 			'Triggers completion of sampling (pump/valves off)
Public delay_days 			'Specifies number of days before sampling, user input
Public delay_TOD 			'Specifies time of day to start sampling, user input
Public tot_samp_hrs 		'Compared against counter to signal end of sampling, user input
Public Weather_OK 
Public footprt_OK 
Public old_footprt_OK 

'No delay CSAT3 data.
Dim wind_raw(5)
Alias wind_raw(1) = Ux_raw
Alias wind_raw(2) = Uy_raw
Alias wind_raw(3) = Uz_raw
Alias wind_raw(4) = Ts_raw
Alias wind_raw(5) = diag_csat_raw
Units wind_raw = m/s
Units Ts_raw = C
Units diag_csat_raw = bitmap

'No delay IRGA data.
Dim irga_raw(4)
Alias irga_raw(1) = co2_raw
Alias irga_raw(2) = h2o_raw
Alias irga_raw(3) = press_raw
Alias irga_raw(4) = diag_irga_raw
Units co2_raw = mmol/m^3
Units h2o_raw = mmol/m^3
Units press_raw = kPa
Units diag_irga_raw = bitmap

'No delay analog measurements.
Dim panel_temp_raw
Units panel_temp_raw = C
Dim PTB_raw
Units PTB_raw = kPa

'Working variables
Dim sigma_wpl			'Webb et al. sigma = density of water vapor / density of dry air.
Dim scan_count 		'Number scans executed.
Dim wind_east			'East wind in compass coordinate system.
Dim wind_north			'North wind in compass coordinate system.
Dim dly_data_out(17)	'Variable array used to temporarily store the lagged record.
Dim place_holder(2)		'Place holder variable in the DataTable dly_data_out
Dim diag_csat_work 		'Working variable used to break out the CSAT3 diagnostic bits.
Dim diag_irga_work		'Working variable used to break out the LI-7500 diagnostic bits.

'clock variables
Public rTime(9)
Alias rTime(1) = rYear	
Alias rTime(2) = rMonth	
Alias rTime(3) = rDay	
Alias rTime(4) = rHour	
Alias rTime(5) = rMinute	
Alias rTime(6) = rSecond	
Alias rTime(7) = ruSecond	
Alias rTime(8) = WeekDay	
Alias rTime(9) = Day_of_Year	
Public dec_DOY		'decimal day of the year

'*** FINAL OUTPUT DATA TABLES ***
'Save processed data needed for flux determination
DataTable (flux,TRUE,FLUX_SIZE_CPU)
	DataInterval (0,OUTPUT_INTERVAL,Min,10)
	CardOut (0,FLUX_SIZE_CRD) 

	Sample (1,Fc_wpl,IEEE4)
	Sample (1,LE_wpl,IEEE4)
	Sample (1,Hs,IEEE4)
	Sample (1,Hc,IEEE4)
	Sample (1,tau,IEEE4)
	Sample (1,u_star,IEEE4)
	Sample (5,cov_Uz_Uz,IEEE4)
	Sample (1,cov_Uz_Ts,IEEE4)
	Sample (4,cov_Ux_Ux,IEEE4)
	Sample (1,cov_Ux_Ts,IEEE4)
	Sample (3,cov_Uy_Uy,IEEE4)
	Sample (1,cov_Uy_Ts,IEEE4)
	Sample (1,cov_co2_co2,IEEE4)
	Sample (1,cov_h2o_h2o,IEEE4)
	Sample (1,cov_Ts_Ts,IEEE4)

	Average (3,Uz,IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)))
	Sample (1,co2_mean,IEEE4)
	Average (1,h2o,IEEE4,NOT (SAVE_FLUX_DATA))
	Sample (1,Ts_mean,IEEE4)

	Sample (1,rho_a_mean,IEEE4)
	Sample (1,press_mean,IEEE4)
	Average (1,panel_temp,IEEE4,FALSE)

	Sample (1,wnd_dir_compass,IEEE4)
	Sample (1,wnd_dir_csat3,IEEE4)
	Sample (1,wnd_spd,IEEE4)
	Sample (1,rslt_wnd_spd,IEEE4)
	Average (1,batt_volt,IEEE4,FALSE)

	Sample (1,std_wnd_dir,IEEE4)

	'Calc total unless: CSAT3 warn/no-data flags true or save flag is false
	Totalize (1,n,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))

	'Calc total unless: CSAT3 flags & CAT3 no-data flags are false or save flag is false
	Totalize (1,n,IEEE4,NOT (disable_flag_on(1) OR disable_flag_on(3)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("csat_warnings")
	
	Totalize (1,n,IEEE4,NOT (disable_flag_on(2) OR disable_flag_on(4)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("irga_warnings")

	'Calc total unless: delta temp flag is false or CAT3 flags are false or save flag is false
	Totalize (1,n,IEEE4,NOT (del_T_f) OR NOT (disable_flag_on(3)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("del_T_f_Tot")

	'Calc total unless: poor signal flag is false or CAT3 flags are false or save flag is false
	Totalize (1,n,IEEE4,NOT (sig_lck_f) OR NOT (disable_flag_on(3)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("sig_lck_f_Tot")

	'Calc total unless: high amplitude flag is false or CAT3 flags are false or save flag is false
	Totalize (1,n,IEEE4,NOT (amp_h_f) OR NOT (disable_flag_on(3)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("amp_h_f_Tot")

	'Calc total unless: low amplitude flag is false or CAT3 flags are false or save flag is false
	Totalize (1,n,IEEE4,NOT (amp_l_f) OR NOT (disable_flag_on(3)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("amp_l_f_Tot")
	
	Totalize (1,n,IEEE4,NOT (chopper_f) OR NOT (disable_flag_on(4)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("chopper_f_Tot")
	
	Totalize (1,n,IEEE4,NOT (detector_f) OR NOT (disable_flag_on(4)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("detector_f_Tot")
	
	Totalize (1,n,IEEE4,NOT (pll_f) OR NOT (disable_flag_on(4)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("pll_f_Tot")
	
	Totalize (1,n,IEEE4,NOT (sync_f) OR NOT (disable_flag_on(4)) OR NOT (SAVE_FLUX_DATA))
	FieldNames ("sync_f_Tot")
	
	Average (1,agc,IEEE4,disable_flag_on(2) OR NOT (SAVE_FLUX_DATA)

	Sample (1,Fc_irga,IEEE4)
	Sample (1,LE_irga,IEEE4)
	Sample (1,co2_wpl_LE,IEEE4)
	Sample (1,co2_wpl_H,IEEE4)
	Sample (1,h2o_wpl_LE,IEEE4)
	Sample (1,h2o_wpl_H,IEEE4)
	Sample (1,h2o_hmp_mean,IEEE4)
	Sample (1,t_hmp_mean,IEEE4)
	Sample (1,T_dew_mean,IEEE4)
	Sample (1,RH_mean,IEEE4)

'	Average (1,K_d_mean,IEEE4,False)
	Average (3,MFC(),IEEE4,FALSE)
	StdDev (3,MFC(),IEEE4,False)

	Sample (1,Dband,IEEE4)
	Average (1,Uz_raw,IEEE4,False)
	Average (1,Uz_rot,IEEE4,False)
	Sample (1,CE,IEEE4)
	Sample (1,SE,IEEE4)
	Sample (1,CT,IEEE4)
	Sample (1,ST,IEEE4)

	Sample (1,L,IEEE4)
	Sample (1,x70,IEEE4)
	Sample (1,itt,IEEE4)
	Sample (1,southing,IEEE4)
	Sample (1,easting,IEEE4)
	Sample (1,westing,IEEE4)

	Sample (1,footprt_OK,FP2)
	Sample (1,Weather_OK,FP2)

	Sample (1,tot_samp_hrs,FP2)
	Sample (1,Elapse1,FP2)

	Sample (1,delay_days,FP2)
	Sample (1,delay_TOD,FP2)

	Sample (1,REA_flag_on,FP2)
	Sample (1,fin_flag_on,FP2)
	
  Totalize (1,1,UINT2,vlv_up_is_on OR vlv_dn_is_on)
    FieldNames("valve_dband_Tot")
	Totalize (1,vlv_up_is_on,UINT2,False)
	  FieldNames("valve_up_ON_Tot")
	Totalize (1,vlv_dn_is_on,UINT2,False)
	  FieldNames("valve_dn_ON_Tot")
EndTable

'Save real-time data related to the site; called during every scan if save_flag is set
DataTable (ts_site,TRUE,-1)
	DataInterval (0,SCAN_INTERVAL,mSec,100)
	CardOut (0,-1) 

	'eddy cov variables
	Sample (1,Ux,IEEE4)
	Sample (1,Uy,IEEE4)
	Sample (1,Uz,IEEE4)
	Sample (1,Ts,IEEE4)
	Sample (1,diag_csat,UINT2)
	Sample (1,co2,IEEE4)
	Sample (1,h2o,IEEE4)
	Sample (1,press,IEEE4)
	Sample (1,diag_irga,UINT2)
	Sample (1,t_hmp,IEEE4)
	Sample (1,rh_hmp,IEEE4)
	'Sample (1,PTB_press,IEEE4)
EndTable

'Save real-time data related to REA sampling; called only during a sampling run
DataTable (ts_REA,TRUE,-1)
	DataInterval (0,SCAN_INTERVAL,mSec,50)
	CardOut (0,-1)
	
	'REA variables
	Sample (1,Uz_valve_lag,IEEE4)
	Sample (1,Dband,IEEE4)
	Sample (1,flow_rea_up,IEEE4)
	Sample (1,flow_rea_dn,IEEE4)
	Sample (1,flow_zero,IEEE4)
	Sample (1,vlv_up_is_on_lag,Boolean)
	  FieldNames("PortOn_up_lag")
	Sample (1,vlv_dn_is_on_lag,Boolean)
	  FieldNames("PortOn_dn_lag")
EndTable

'*** WORKING DATA TABLES ***
'Reorder the data and prepare to lag all the data.
DataTable (dly_data,TRUE,OFFSET)
	Sample (1,Uz_raw,IEEE4)			'1
	Sample (1,Ux_raw,IEEE4)			'2
	Sample (1,Uy_raw,IEEE4)			'3
	Sample (1,co2_raw,IEEE4)			'4
	Sample (1,h2o_raw,IEEE4)			'5
	Sample (1,place_holder(1),IEEE4) 	'6
	Sample (1,Ts_raw,IEEE4)			'7
	Sample (1,place_holder(2),IEEE4)	'8
	Sample (1,diag_csat_raw,IEEE4)	'9
	Sample (1,press_raw,IEEE4)		'10
	Sample (1,diag_irga_raw,IEEE4)	'11
	Sample (1,panel_temp_raw,IEEE4)	'12
	Sample (1,Uz_valve,IEEE4) 		'13
	Sample (1,vlv_up_is_on,Boolean)		'14
	Sample (1,vlv_dn_is_on,Boolean)		'15
	'Sample (1,PTB_raw,IEEE4)			'16
EndTable


'Compute the covariances of Uz, co2, h2o, and Ts, as well as the other cross products, required to rotate the data
'into natural wind coordinates. This data is output every OUTPUT_INTERVAL minutes on the minute.
DataTable (comp_cov,TRUE,1)
	DataInterval (0,OUTPUT_INTERVAL,Min,1)

	Covariance (8,aligned_data(1),IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)),36)
	WindVector (1,wind_east,wind_north,IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)),0,1,2)
	WindVector (1,Uy,Ux,IEEE4,(disable_flag_on(1) OR NOT (SAVE_FLUX_DATA)),0,1,2)

	Average (1,t_hmp,IEEE4,FALSE)
	Average (1,e_hmp,IEEE4,FALSE)
	Average (1,co2,IEEE4,NOT (SAVE_FLUX_DATA))
	Average (1,press,IEEE4,NOT (SAVE_FLUX_DATA))
	Average (1,Ts,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
	Average (1,Ux,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
	Average (1,Uy,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
	Average (1,Uz,IEEE4,disable_flag_on(1) OR NOT (SAVE_FLUX_DATA))
EndTable


'*** PROGRAM CONTROL MENU NOTES ***
' The Program Control Menu allows the station operator to conveniently change the 
' status of the program control flags using the CR5000 keyboard display.
'
'Save met? 	"Yes"	Save real-time data to ts_site and save fluxes
' 			"No"		do not save
'Sampling: 	"Pick"	Default value - does nothing but place hold
'			"Run"	Begin a sampling run with the denuders
'			"Reset"	Restart a run with clear variables without interrupting time-series collection
'Flow L/min	"Vary" 	let the program adjust flow based on sigma W
'			10 		go with 10 L/min sampling rate always
'For X hrs:	total number of hours to sample
'			"0.5,1,2,4,6,8" (4 = default)
'Delay Days?	total number of days to wait before sampling
'			"0,1,2,3,4,5,6" (0 = default)
'Start time:	24hr time of day to start sample
'			"Now,8,10,12,14,16,18" (Now = default, meaning sampling is immediate)
'Controls:	"PickCmd" Default value upon startup & after reset
'			"Run"	Start program or activate day/start_time timers
'			"Reset"	Stop running the program and reset variables


'*** PROGRAM CONTROL MENU DEFINED ***
DisplayMenu ("Program Control",TRUE)
	MenuItem ("Save met?",save_flag)
	MenuPick (Yes,No)
	MenuItem ("Sampling:",control_input)
	MenuPick (Pick,Run,Reset)
	MenuItem ("Flow L/min",samp_flow)
	MenuPick (Vary,10)
	MenuItem ("For X hrs:",tot_samp_hrs)
	MenuPick (0.5,1,2,4,6,8)
	MenuItem ("Delay Days?",delay_days)
	MenuPick (0,1,2,3,4,5,6)
	MenuItem ("Start time:",delay_TOD)
	MenuPick (Now,8,10,12,14,16,18)
EndMenu

Sub resetREA()
	delay_days = DEF_DELAY_DAYS 	'Specify default value for delay in days to start
	delay_TOD = DEF_DELAY_TOD 	'Specify default value for time of day to start
	tot_samp_hrs = DEF_SAMP_HRS 	'Specify default value for sampling duration
	samp_flow = DEF_SAMP_FLOW	'Specify default value for sampling flowrate
	REA_flag_on = FALSE 		'REA off on compile
	fin_flag_on = FALSE 		'Can't say finish until it's started
	control_input = Pick 		'Default menu value for program control
	control_flag = Pick 	 	'Real-time flag to track control changes
	weather_OK = FALSE 
	footprt_OK = FALSE
	countdown_timer = 0 		'Specify zero here - changes when REA_flag_on is tripped
	Elapse1 = 0 				'Upon initilization, set timer for sampled duration to zero
	
	'set port status indicators
	WriteIO(MASK_ALL,MASK_RESET)
	updn_mfc_is_off = (MASK_ALL AND MASK_RESET AND MASK_UPDN_OFF) 'True
	zero_mfc_is_off = (MASK_ALL AND MASK_RESET AND MASK_ZERO_OFF) 'False
	vlv_up_is_on = (MASK_ALL AND MASK_RESET AND MASK_UP_VLV) 'False
	vlv_dn_is_on = (MASK_ALL AND MASK_RESET AND MASK_DN_VLV) 'False
	pump_is_on = (MASK_ALL AND MASK_RESET AND MASK_PUMP_ON) 'False
	mfc_pwr_is_on = (MASK_ALL AND MASK_RESET AND MASK_MFC_PWR) 'True
	
  CAO_1_mv=0
  'TODO determine whether the make-up air flow should be reset after every sampling run
  '     or only at initial start-up [after not within resetREA()]
  CAO_2_mv=DEF_ZERO_SLPM/MFC_ZERO_MULT 	'set initial flow for makeup air MFCs (2 sLpm)
EndSub

'*** BEGIN PROGRAM ***
BeginProg
	
	n = 1 					'Set # of samples taken to 1 upon startup
	scan_count = 0 			'Specify a 0 here since RecNum may not start @ 0
	save_flag = DEF_SAVE_FLAG	'Specify default value for whether time series & fluxes are saved

	Call resetREA()

	CT=1.0 	'Set Inital Rotation Angles 
	ST=0
	CE=0
	SE=0

	Dband = 0.1 		'Set Deadband on compile 
	SDMSpeed (SDM_PER) 	'Set the SDM clock speed.

	Move (Ux_raw,5,NaN,1) 	'Set all CSAT3 variables to NaN.
	Move (co2_raw,4,NaN,1) 	'Set all IRGA variables to NaN.
	
	Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)

		'get date and time
		RealTime( rTime )
		
		'Check to see if a run finished last scan and if so, reset rea variables
		If fin_flag_on Then Call resetREA()
		
		'check if user has changed sampling control (Pick/Run/Reset) and ignore any 
		'changes except Pick->Run, Pick->Reset or Run->Reset. After a reset, set to Pick
		If (NOT (control_input = control_flag)) Then
			If (control_input = Pick) Then 			'don't allow [X]->Pick 
				control_input = control_flag 
			ElseIf (control_input = Run AND control_flag = Pick) Then 	'initial Pick->Run
				control_flag = control_input 			'set flag to run, leave input on run
				Startday=Day_of_Year				'record today as the starting day
				countdown_timer = tot_samp_hrs*60		'set ending time in minutes
			ElseIf (control_input = Reset) Then 		'anytime [X]->Reset
				Elapse1 = Timer(1,Min,3)				'stop & reset timer #2, sampling duration
				Call resetREA()
			EndIf
		EndIf
		
		'Once sampling starts, reflect any change in total sampling hours specified in prog menu
		If countdown_timer > 0 Then countdown_timer = tot_samp_hrs*60 

		PanelTemp (panel_temp_raw,250) 				'CR5000 panel temperature.
		CSAT3 (Ux_raw,1,3,91,CSAT_OPT) 				'code 91: trigger CSAT3 wind/sonic temp data retrieval
		CS7500 (co2_raw,1,7,6)						'code to communicate with LI-7500 via SDM ports
		'VoltDiff(PTB_raw,1,mv5000,PTB_DF,True,0,INTEG,PTB_MULT,PTB_OFF)]
		PTB_raw = NAN 'pressure sensor no longer responsive; removing 2013-10-15 
		
    Ts_american = Ts*1.8 + 32

		Uz_rot   = Uz_raw*CT-Ux_raw*ST*CE-Uy_raw*ST*SE		'REA: rotate vertical wind speed
		Uz_valve = Uz_rot

    If (NOT REA_flag_on) Then
      'do nothing, leave valves recirculating
    ElseIf (Uz_valve = NAN) Then
      vlv_up_is_on = False
      vlv_dn_is_on = False
		ElseIf (Uz_valve >= Dband) Then
			vlv_up_is_on = True  'UP open
			vlv_dn_is_on = False 'DN recirc
		ElseIf (Uz_valve <= neg_dband) Then
			vlv_up_is_on = False  'UP recirc
			vlv_dn_is_on = True 'DN open
		Else
			vlv_up_is_on = False 'both recirc
			vlv_dn_is_on = False 
		EndIf
		PortSet(C_VLV_UP,vlv_up_is_on)
		PortSet(C_VLV_DN,vlv_dn_is_on)

		'set MFCs
		ExciteCAO (MFC_UPDN_CAO,CAO_1_mv,True,False)	'denuder MFCs
		ExciteCAO (MFC_ZERO_CAO,CAO_2_mv,True,False) 	'zero air MFC

		VoltDiff(t_hmp,1,mV1000,HMP_T_DF,True,0,INTEG,HMP_T_MULT,HMP_T_OFF)	'temp in C
		VoltDiff(rh_hmp,1,mv1000,HMP_RH_DF,True,0,INTEG,HMP_RH_MULT,HMP_RH_OFF) 'RH as %
		Battery (batt_volt) 						'Measure battery voltage.

    hmp_t_american = t_hmp*1.8 + 32
  
		'Find the HMP45C vapor pressure (kPa)
    VaporPressure(e_hmp, t_hmp, rh_hmp)
    SatVP(e_sat, t_hmp)

		'Measure the MFCs controlling REA recirculation rate, 0-10L/min fullscale
		VoltDiff (flow_rea_up,1,mV5000,MFC_UP_DF,True,0,INTEG,MFC_UPDN_MULT,MFC_UPDN_OFF)
		VoltDiff (flow_rea_dn,1,mV5000,MFC_DN_DF,True,0,INTEG,MFC_UPDN_MULT,MFC_UPDN_OFF)

		'Measure the MFC controlling zero air injection, 0-5 L/min fullscale
		VoltDiff (flow_zero,1,mV5000,MFC_ZERO_DF,True,0,INTEG,MFC_ZERO_MULT,MFC_ZERO_OFF)

		'Lag the CSAT3 and IRGA measurements.
		CallTable dly_data

		If ( scan_count >= OFFSET ) Then
			'Load in the analog data that has been lagged by OFFSET scans.
			GetRecord (dly_data_out(1),dly_data,OFFSET)
			Move (panel_temp,1,dly_data_out(12),1)		'panel_temp
			Move (vlv_up_is_on_lag,2,dly_data_out(14),2) 	'vlv_up_is_on,vlv_dn_is_on
			Move (press,1,dly_data_out(10),1)			'press from LI-7500
			'Move (PTB_press,1,dly_data_out(16),1)		'external press sensor
			
			'Load in CSAT3 data that has been lagged by CSAT_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,CSAT_REC_BCK)
			Move (Uz,3,dly_data_out(1),3)				'Uz, Ux, Uy
			Move (Ts,1,dly_data_out(7),1)				'Ts
			Move (diag_csat,1,dly_data_out(9),1)		'diag_csat
			Move (Uz_valve_lag,1,dly_data_out(13),1)	'Uz_Valve

			'Load in the IRGA data that has been lagged by IRGA_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,IRGA_REC_BCK)
			Move (co2,2,dly_data_out(4),2)			'co2, h2o
			Move (diag_irga,1,dly_data_out(11),1)		'diag_irga

			'Copy and convert CSAT3 for compass wind vector computation.
			wind_east  = -1*Uy
			wind_north = Ux

      'CO2 mixing ratio approx.
			co2_ppm_est = co2*R*(t_hmp+273.15)/press*1000

			'Convert IRGA data to mass density (co2: mg/m^3, h20: g/m^3)
			' 44 [g/mol] - molecular weight of carbon dioxide
			' 0.018 [g/mmol] - molecular weight of water vapor
			If ( NOT (co2 = -99999) ) Then ( co2 = co2*44 )
			h2o = h2o*0.018

			'Define 61502 as NaN.
			If ( diag_csat = NaN ) Then ( diag_csat = 61502 )

			'Break up the four CSAT3 warning flags into four separate bits.
			diag_csat_work = diag_csat
			del_T_f = diag_csat_work AND &h8000
			sig_lck_f = diag_csat_work AND &h4000
			amp_h_f = diag_csat_work AND &h2000
			amp_l_f = diag_csat_work AND &h1000

			'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
			' high, including the special cases NaN (61502), a Lost Trigger (61440), No Data
			' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
			disable_flag_on(1) = diag_csat_work AND &hf000

			'Turn on only when CSAT3 diagnostic warning flags are set.
			disable_flag_on(3) = ( (del_T_f OR sig_lck_f OR amp_h_f OR amp_l_f) AND NOT (Ts = NaN) )

			'Save the four most significant bits of the CSAT3 diagnostics, except for the
			' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM
			' error (61441), or wrong CSAT3 embedded code (61442).
			If ( diag_csat_work < &hf000 ) Then ( diag_csat = INT (diag_csat_work/&h1000) )

'*********************************************************************************************************
			'Swap the LI-7500 diagnostic bit state.
			diag_irga = diag_irga XOR &h00f0
			diag_irga_work = diag_irga

			'Turn on the intermediate processing disable flag when the LI-7500 has failed to
			' send data to the CR1000 via SDM.  Set all flags high and rail the AGC to 94.
			If ( (co2 < -99990) OR (co2 = NaN) ) Then (diag_irga_work = &h00ff)

			'Compute the AGC.
			agc = INT ((diag_irga_work AND &h000f)*6.25+0.5)

			'Break up the four LI-7500 warning flags into four separate bits.
			chopper_f = diag_irga_work AND &h0080
			detector_f = diag_irga_work AND &h0040
			pll_f = diag_irga_work AND &h0020
			sync_f = diag_irga_work AND &h0010

			'Turn on the intermediate processing disable flag when any LI-7500 warning flag
			' is high, including the special cases NaN or an SDM error.
			disable_flag_on(2) = diag_irga_work AND &h00f0

			'Turn on only when LI-7500 diagnostic warning flags are set.
			disable_flag_on(4) = ( (chopper_f OR detector_f OR pll_f OR sync_f) AND NOT (diag_irga_work >= &h00ff) )

			'Save only the four most significant bits of the LI-7500 diagnostic word.
			diag_irga = INT (diag_irga_work/&h0010)
'*********************************************************************************************************

			If save_flag Then CallTable ts_site 
			If REA_flag_on Then CallTable ts_REA

			CallTable comp_cov

			If ( comp_cov.Output(1,1) ) Then

				GetRecord (cov_out(1),comp_cov,1)

				'Compass wind direction will be between 0 and 360 degrees.
				wnd_dir_compass = (360+wnd_dir_compass+CSAT3_AZIMUTH) MOD 360

				'CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees.
				If ( wnd_dir_csat3 > 180 ) Then ( wnd_dir_csat3 = wnd_dir_csat3-360 )

				h2o_hmp_mean = e_hmp_mean/((t_hmp_mean+273.15)*RV)
				rho_d_mean = (press_mean-e_hmp_mean)/((t_hmp_mean+273.15)*RD)
				rho_a_mean = (rho_d_mean)/1000
				T_dew_mean = 240.97*LOG(e_hmp_mean/0.611)/(17.502 - LOG(e_hmp_mean/0.611))
				old_RH_mean = RH_mean
				RH_mean = e_hmp_mean/( 0.611*EXP(17.502*t_hmp_mean/(240.97+t_hmp_mean)) )

				'Compute online fluxes.
				Fc_irga = cov_Uz_co2
				LE_irga = LV*cov_Uz_h2o
				Hs = rho_a_mean*CP*cov_Uz_Ts

				old_u_star = u_star
				tau = SQR ((cov_Uz_Ux*cov_Uz_Ux)+(cov_Uz_Uy*cov_Uz_Uy))
				u_star = SQR (tau)
				tau = rho_a_mean*tau

				sigma_wpl = h2o_hmp_mean/rho_d_mean

				'LI-7500 Webb et al. term for water vapor Eq. (25).
				h2o_wpl_LE = MU_WPL*sigma_wpl*LE_irga
				h2o_wpl_H = ( 1+(MU_WPL*sigma_wpl) )*h2o_hmp_mean/(t_hmp_mean+273.15)*LV*cov_Uz_Ts
				LE_wpl = LE_irga + h2o_wpl_LE + h2o_wpl_H

				'Compute a sensible heat flux from Hs and LE_wpl.
				Hc = (Hs-(rho_a_mean*CP*0.51*RD*(t_hmp_mean+273.15)*(t_hmp_mean+273.15)*LE_wpl)/(press_mean*LV))*((t_hmp_mean+273.15)/(Ts_mean+273.15))

				'LI-7500 Webb et al. term for carbon dioxide Eq. (24).
				co2_wpl_LE = MU_WPL*co2_mean/rho_d_mean*cov_Uz_h2o
				co2_wpl_H  = (1+(MU_WPL*sigma_wpl))*co2_mean/(t_hmp_mean+273.15)*Hc/(rho_a_mean*CP)
				Fc_wpl = Fc_irga + co2_wpl_LE + co2_wpl_H

				'REA: Compute rotation angles from flux data
				CE = Ux_mean/SQR(Ux_mean^2+Uy_mean^2)
				SE = Uy_mean/SQR(Ux_mean^2+Uy_mean^2)
				CT = SQR(Ux_mean^2+Uy_mean^2) / SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)
				ST = Uz_mean/SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)

				'Footprint calculations, Hsieh et al, 2000
				L = -u_star^3*(t_hmp_mean+273.15)/(0.4*9.8*cov_Uz_Ts) 	'Obukohov Length
				Zu = zm*( log(zm/zo)-1+zo/zm )
				If ABS(zu/L)<0.04 then 	'neutral
					Dh = 0.97
					Ph = 1
				ElseIf L < 0 		'unstable
					Dh = 0.28
					Ph = 0.59
				Else 			'stable
					Dh=2.44
					Ph=1.33
				EndIf

				x70 = Dh/(0.357*0.4*0.4)*(ABS(L))^(1-Ph)*zu^Ph

				'check to see if footprint is within source area
				old_footprt_OK = footprt_OK
				footprt_OK = FALSE
				easting = 0
				westing = 0
				southing = 0
				northing = 0
				
				If ( wnd_dir_compass >= wdir_min AND wnd_dir_compass <= wdir_max ) Then
					If ( wnd_dir_compass >= 0 AND wnd_dir_compass <= 90 ) Then
						alpha = (PI/180)*wnd_dir_compass
						easting = sin(alpha)*x70
						northing = cos(alpha)*x70
						If ( easting < x_east_max AND northing < x_north_max ) Then
							footprt_OK = TRUE
						Endif
					Elseif ( wnd_dir_compass >= 90 AND wnd_dir_compass <= 180 ) Then
						alpha = (PI/180)*(wnd_dir_compass-90)
						easting = cos(alpha)*x70
						southing = sin(alpha)*x70
						If ( easting < x_east_max AND southing < x_south_max ) Then
							footprt_OK = TRUE
						Endif
					Elseif ( wnd_dir_compass >= 180 AND wnd_dir_compass <= 270 ) Then
						alpha = (PI/180)*(wnd_dir_compass-180)
						westing = sin(alpha)*x70
						southing = cos(alpha)*x70
						If ( westing < x_west_max AND southing < x_south_max ) Then
							footprt_OK = TRUE
						Endif
					Elseif ( wnd_dir_compass >= 270 AND wnd_dir_compass < 360) Then
						alpha = (PI/180)*(wnd_dir_compass-270)
						westing = cos(alpha)*x70
						northing = sin(alpha)*x70
						If ( westing < x_west_max AND northing < x_north_max ) Then
							footprt_OK = TRUE
						Endif
					Endif
				Endif

				'rotate sig_w
				cov_Uz_Uz_rot = cov_Uz_Uz*CT^2+cov_Ux_Ux*ST^2*CE^2+cov_Uy_Uy*ST^2*SE^2-2*cov_Uz_Ux*CT*CE*ST-2*cov_Uz_Uy*CT*ST*SE+2*cov_Ux_Uy*CE*ST^2*SE
				sig_w_rot = SQR(cov_Uz_Uz_rot)

				'integral turbulence test following Hammerle et al. (2007)
				Zeta = zm/L
				old_itt = itt
				If ( zeta < 0 AND zeta >= -2 ) Then
					itt_model = 1.25*( 1+3*ABS(zeta) )^0.333
				Endif
				If ( zeta >= 0 AND zeta < 1 ) Then
					itt_model = 1.25*( 1+0.2*zeta )
				Endif
				itt_meas = sig_w/u_star
				If ( zeta >= -2 AND zeta < 1 ) Then
					itt = 100*ABS(itt_meas-itt_model)/itt_model
				Else
					itt=999
				EndIf

				'REA dynamic deadband calcuations
				sig_w = SQR(cov_Uz_Uz)		'stdev of w
				Dband = 0.5*sig_w 		'dynamic deadband
				neg_dband = -1*Dband

        'K_d_mean = rho_d_mean/( 101/((25+273.15)*RD) ) 	'MFC correction factors K
				'K_a_mean = rho_a_mean/( 101/((25+273.15)*RD) )

				'set chemcomb sampling rate, recirulation rate
				chemc_flow = MFC_UPDN_MULT * 5000 'slpm = slpm/mv * 5000mv
				If sig_w < 1.0 Then chemc_flow = sig_w * chemc_flow 'don't scale above max if >=1
				
				If samp_flow = 10 Then chemc_flow = 10 'samp_flow is from user menu

				'set flow on makup air / zero air
				makeup_flow = sig_w	
				If makeup_flow = NAN Then makeup_flow = DEF_ZERO_SLPM
				If makeup_flow > MAX_ZERO_SLPM Then makeup_flow = MAX_ZERO_SLPM
				If makeup_flow < MIN_ZERO_SLPM Then makeup_flow = MIN_ZERO_SLPM
				CAO_2_mv = makeup_flow/MFC_ZERO_MULT 'slpm / (slpm/mv)

				Elapse1 = Timer(1,Min,4) 			'read sample duration timer

				'when delay start timer is exceeded
				ElapseDay = Day_of_Year-Startday
				IF (ElapseDay>=delay_days AND (rHour=delay_TOD OR delay_TOD=Now) AND NOT REA_flag_on ) Then 	
					REA_flag_on = TRUE
					delay_days = 0
					delay_TOD = Now
				Endif

				'check footprint & ITT are OK and it's not raining
				If (footprt_OK AND old_footprt_OK AND itt<30 AND old_itt<30 AND RH_mean<0.9 AND old_RH_mean<0.9) Then
					weather_OK = TRUE
				Else
					weather_OK = FALSE
				EndIf

				If tot_samp_hrs < 24 Then weather_OK = TRUE 		'in snapshot mode, override weather
				
				'control REA sampling: check for REA_flag, timer duration, and weather
				IF ( REA_flag_on AND Elapse1 < countdown_timer AND weather_OK ) Then
					Elapse1 = Timer(1,Min,0)	'start timer
					WriteIO(MASK_FLOW,MASK_RUNNING)
					updn_mfc_is_off = (MASK_FLOW AND MASK_RUNNING AND MASK_UPDN_OFF) 'False
					zero_mfc_is_off = (MASK_FLOW AND MASK_RUNNING AND MASK_ZERO_OFF) 'False
					pump_is_on = (MASK_FLOW AND MASK_RUNNING AND MASK_PUMP_ON) 'True
					'mfc_pwr_is_on = <always True>
					CAO_1_mv = chemc_flow/MFC_UPDN_MULT 'slpm / (slpm/mv) 	'set MFC volt out
				Else
					Elapse1 = Timer(1,Min,1)			'stop timer
					WriteIO(MASK_FLOW,MASK_RESET)
					updn_mfc_is_off = (MASK_FLOW AND MASK_RESET AND MASK_UPDN_OFF) 'True
					zero_mfc_is_off = (MASK_FLOW AND MASK_RESET AND MASK_ZERO_OFF) 'False
					pump_is_on = (MASK_FLOW AND MASK_RESET AND MASK_PUMP_ON) 'False
					'mfc_pwr_is_on = <always True>
					CAO_1_mv=0
				EndIf
				
				'if total sampling duration has exceeded allotted sampling time
				If ( Elapse1 >= countdown_timer OR control_flag = Reset ) Then
					REA_flag_on = FALSE   			'turn off REA flag
					fin_flag_on = TRUE 				'set completion flag
				EndIf

			EndIf

			If save_flag Then CallTable flux
		Else
			scan_count = scan_count+1
		EndIf

'		'control exhaust/cooling fan
'		If panel_temp > 35 Then
'			SW12 (1)
'		Else
'			SW12 (0)
'		Endif
		
	NextScan
EndProg
