'CR5000 Series Datalogger
'Program for relaxed eddy accumulation (REA)
'Adapted from an original program by Jay Ham
'
'patrick.t.okeeffe@gmail.com
'
'
'******************* USER OPTIONS / SITE CONSTANTS *********************
Const FLUX_INTERVAL = 30	    'Flux data output interval in minutes
Const SCAN_INTERVAL = 100	    'Measurement rate, mSec: 50mSec/20Hz  or 100mSec/10Hz
Const CSAT3_SDM = 3           'physical SDM address of CSAT3 sonic
Const LICOR_SDM = 5           'physical SDM address of LI-7500 irga

Const ZM = 5.00 	            'Measurement Height, m, above surface
Const ZO =0.04		            'roughness length, m
Const EAST_BOUNDS = 500	      'Define estimated source boundaries as footprint thresholds (meters)
Const SOUTH_BOUNDS = 500  
Const WEST_BOUNDS = 500	
Const NORTH_BOUNDS = 500	
Const WD_MIN = 0			        'Define acceptable wind directions for desired footprint (degrees)
Const WD_MAX = 360		
Const CSAT3_AZIMUTH = 0	      'Compass azimuth of the -x axis. In fig below, CSAT3_AZIMUTH = 90
'
' () -> Compass coordinate system
' {} -> Right handed coordinate system aligned to north
'
'                               (N) 0
'                               {-y}
'                                |
'                                |
'                                |
'                                |
'          270 (W) {+x} --------[ ]----X---> {-x} (E) 90
'                              / |      \
'                    CSAT3 Block |      CSAT3 Transducers
'                                |
'                                |
'                                v
'                               {+y}
'                               (S) 180



'********************** PHYSICAL CONSTANTS ***************************
Const Cpd = 1005.7 	          'specific heat capacity of dry air, J/(kg K)
Const Cw = 1820               'specific heat capacity of water, J/(kg K)
Const MW_h2o = 18.01528       'molecular weight of water, g/mol
Const MW_co2 = 44.010         'molecular weight of carbon dioxide, g/mol
Const MW_air = 28.98          'molecular weight of dry air, g/mol
Const MU_WPL = MW_air/MW_h2o  'Ratio of MW of dry air to that of water vapor
Const R = 8.3143*10^-3        'Universal gas constant, (kPa m^3)/(K mol)
Const Rd = R/MW_air		        'Gas constant for dry air, (kPa m^3)/(K g)
Const Rv = R/MW_h2o		        'Gas constant for water vapor, (kPa m^3)/(K g)
Const PI = 3.14159	          'Mathematical constant pi
Const RperD = PI/180          'radians per degree
Const DperR = 180/PI          'degrees per radian



'********************** PROGRAM CONSTANTS ****************************
ConstTable
  Const LAG_SCANS = 20	    	                      'An offset delay introduced to the CSAT3 and IRGA data
  Const DELAY_CSAT = 2		                    'CSAT lag, fixed = 2 scans via SDM,DAC or RS-232
  Const DELAY_IRGA = INT(200/SCAN_INTERVAL)	  'IRGA lag, 200ms = 4 scans via SDM
 'Const DELAY_IRGA = INT(253/SCAN_INTERVAL)   '          253ms = 5 scans via DAC
  Const SDM_PER = 30		                      'SDM clock speed (default: 30)
  Const YES = -1		                          'Yes defined -1 (TRUE)
  Const NO = 0		                            'No defined 0 (FALSE)
  Const MetOnly = -10	    
  Const NewRun = -11	
  Const EndRun = -12	
  Const NonStop = 10000
  Const Now = 0
  Const DEF_SAMP_HRS = NonStop
  Const SCAN_BUFFER_SIZE = 300*INT (1000/SCAN_INTERVAL)		'Compute 5 minute scan buffer
  Const CSAT_OPT = INT (1000/SCAN_INTERVAL)			          'CSAT3 parameter (10/20 Hz)
  
  #If LoggerType = CR800
    'do something
  #ElseIf LoggerType = CR1000
    'do something
  #ElseIf LoggerType = CR3000
    'do something
  #ElseIf LoggerType = CR5000
    'do something
  #ElseIf LoggerType = CR9000X
    'do something
  #EndIf 
EndConstTable




'*********************** COMPONENTS ******************************
'3D sonic anemometer: CSAT3 
' SDM-C1 SDM data (green)
' SDM-C2 SDM clock (white)
' SDM-C3 SDM enable (brown)
' G      SDM ref (black) 
' G      SDM shield (clear)
' 12V    power (red) 
' G      power grnd (black) & shield (clear)
'
'CO2/H2O infrared gas analyzer (IRGA): LI-7500 
' SDM-C1 SDM data (gray)
' SDM-C2 SDM clock (blue)
' SDM-C3 SDM enable (brown)
' G      SDM ref (black)
' grnd   SDM shield (white)
' 
'temp/RH sensor: HMP45AC
' D19H   temp signal output (yellow)
' D19L   signal ref (white)
' D20H   RH signal ouput (blue)
' D20L   jumpered to signal ref 
' grnd   shield (clear)
' 12V    power (red)
' G      power grnd (black)
'
'barometric pressure sensor: PTA-427 A
' D6H    signal output (orange)
' D6L    signal ref (white)
' grnd   shield (clear)
' C2     control (yellow)
' 12V    power (red)
' G      ground (purple)
'
'solid state relay
' G      terminal #4
'
'three-way solenoid valves
' G      one wire, both valves (black)
'
'two-way solenoid valve
' G      one wire
'
'4-channel relay rack
' C5     Control 2
' G      Control 3
' C6     Control 4
' C7     Control 6
' C8     Control 8
' 12V    Field 6
' 
'cooling fan
' SW12   power (red)
' G      power grnd (blue)
'
'0-10slpm mass flow controllors (MFCs)
' C1     both TTL controls (outside green)
' CAO1   both control set (outside red)
' G      both control grnd (inside yellow)/chassi grnd (outside brown)
' D11H   UP output signal (inside green)
' D11L   UP output grnd (outside orange)
' D12H   DN output signal (inside green)
' D12L   DN output grnd (outside orange)
' 
'0-5slpm mass flow controllor 
' CAO2   control set (green)
' SE25   output (brown)






'************************* VARIABLES ******************************
' PROGRAM CONTROL
Public control_input 		'Value designated by user via program control menu
Public control_flag 		  'Compared against control_input to sense user changes
Public delay_TOD 			  'Specifies time of day to start sampling
Public tot_samp_hrs 	  	'Compared against counter to signal end of sampling
Public flags(3) As Boolean
  Alias flags(1) = REA_flag_on        'starts REA sampling when HI    
  Alias flags(2) = fin_flag_on        'ends REA sampling when HI
  Alias flags(3) = fetch_OK           'fetch quality flag 
Public timers(2)
  Alias timers(1) = Elapse1           'REA sampling elasped time
  Alias timers(2) = countdown_timer   'timer until sampling begins
  Units timers = min


' UNALIGNED DATA VARIABLES
Public wind_raw(5)           'CSAT3 unaligned data
	Alias wind_raw(1) = Ux_raw
	Alias wind_raw(2) = Uy_raw
	Alias wind_raw(3) = Uz_raw
	Alias wind_raw(4) = Ts_raw
	Alias wind_raw(5) = diag_csat_raw
	Units wind_raw = m/s
	Units Ts_raw = degC
	Units diag_csat_raw = unitless
Public irga_raw(4)          'LI7500 IRGA unaligned data
	Alias irga_raw(1) = co2_raw
	Alias irga_raw(2) = h2o_raw
	Alias irga_raw(3) = est_press_raw
  Alias irga_raw(4) = diag_irga_raw
	Units co2_raw = mmol/m^3
	Units h2o_raw = mmol/m^3
	Units est_press_raw = kPa
	Units diag_irga_raw = unitless
Public hmp_raw(2)          'unaligned temp/RH from HMP45AC
  Alias hmp_raw(1) = T_raw
  Alias hmp_raw(2) = rh_raw
  Units T_raw = degC
  Units rh_raw = percent
Public press_raw          'barometric pressure
  Units press_raw = kPa
Public PortOn_raw(8) As Boolean   'control port states (0=false/off, else=true/on)
  Alias PortOn_raw(1) = PortOn_1    'up/dn MFCs off/on
  Alias PortOn_raw(2) = PortOn_2    'press transducer off/on
  Alias PortOn_raw(3) = PortOn_3
  Alias PortOn_raw(4) = PortOn_4
  Alias PortOn_raw(5) = PortOn_5    'REA valve up 
  Alias PortOn_raw(6) = PortOn_6    'REA valve dn
  Alias PortOn_raw(7) = PortOn_7    'air pump off/on
  Alias PortOn_raw(8) = PortOn_8    'zero MFC off/on
Public MFC_raw(3)        'mass flow controllors
  Alias MFC_raw(1) = flow_up_raw
  Alias MFC_raw(2) = flow_dn_raw
  Alias MFC_raw(3) = flow_zero_raw
  Units MFC_raw = L/min
Public W_valve_raw       'vertical rotated WS value, used for real time valve control
  Units W_valve_raw = m/s
Public panel_temp_raw    'CR5000 panel temp
  Units panel_temp_raw = C
Public batt_volt_raw	    'cr5000 battery voltage.
  Units batt_volt_raw = V


' DIAGNOSTIC VARIABLES
Public diag_csat_work 		
Public diag_csat_bits(4)	As Boolean	'CSAT Warning flags.
	Alias diag_csat_bits(1) = del_T_f		'Delta temperature 
	Alias diag_csat_bits(2) = sig_lck_f	'Poor signal lock 
	Alias diag_csat_bits(3) = amp_h_f		'Amplitude high 
	Alias diag_csat_bits(4) = amp_l_f		'Amplitude low 
	Units diag_csat_bits = samples
Public diag_irga_work
Public diag_irga_bits(4) As Boolean  'LI-7500 warning flags
	Alias diag_irga_bits(1) = chopper_f   'Chopper 
	Alias diag_irga_bits(2) = detector_f  'Detector 
	Alias diag_irga_bits(3) = pll_f       'PLL
	Alias diag_irga_bits(4) = sync_f      'synchronization
	Units diag_irga_bits = samples
Public agc As Long                   'LI-7500 automatic gain control
  Units agc = unitless
Public diags(2) 
  Alias diags(1) = diag_csat        'csat warning word
  Alias diags(2) = diag_irga        'irga warning word
  Units diags = unitless
Public disable_flag(4)		'Intermediate processing disable flags.
  'disable_flag(1)			'TRUE: CSAT3 diag warn flags on or no data sent
  'disable_flag(2)			'TRUE: CSAT3 diag warn flags on. Used to filter out diag flags
  'disable_flag(3)      'TRUE: LI-7500 diag warn flags on or no data sent
  'disable_flag(4)      'TRUE: LI-7500 diag warn flags on. Used to filter out diag flags
Public n					        'samples taken
  Units n = samples


' WORKING VARIABLES
Public scans              '# of scans done
Public lagged_rec(17)     'array to hold lagged record while moving vars
Public wind_east			    'negative Uy component
Public wind_north			    'Ux components
Public ws_slcr            'holds manually calculated scalar ws stdev
Public rh_inst            'inst. value of rel. humidity (can't directly avg these)
Public Lv                 'H2O latent heat of vaporization (J/g)
Public rho_dry            'density of dry air, g/m^3
Public rho_dry2           'density of dry air, kg/m^3
Public rho_wet            'density of moist air, g/m^3
Public X_h2o          'ratio of mean water vapor density/dry air density, (g/m^3)/(g/m^3)
Public Cpm                'specific heat capacity of moist air, J/(kg K)
Public alpha              'working angle variable for calculating fetch
Public sig_W              'st dev of rotated, vertical wind speed
Public K_d_mean      'relics
Public K_a_mean      'relics
Public rTime(9)
  Alias rTime(1) = rYear	
  Alias rTime(2) = rMonth	
  Alias rTime(3) = rDay	
  Alias rTime(4) = rHour	
  Alias rTime(5) = rMinute	
  Alias rTime(6) = rSecond	
  Alias rTime(7) = ruSecond	
  Alias rTime(8) = WeekDay	
  Alias rTime(9) = Day_of_Year	
Public rot(4)             'coordinate rotation angles
  Alias rot(1) = CT
  Alias rot(2) = ST
  Alias rot(3) = CE
  Alias rot(4) = SE
  Units rot = radians
Public MFC_control(5)    'variables affecting mass flow controllor setting
  Alias MFC_control(1) = Dband          'deadband, zero-centered
  Alias MFC_control(2) = CAO_1_mv       'analog output for denuder MFCs
  Alias MFC_control(3) = CAO_2_mv       'analog output for zero MFC
  Alias MFC_control(4) = chemc_flow     'sampling rate for denuder MFC
  Alias MFC_control(5) = makeup_flow    'sampling rate for zero MFC
  Units Dband = m/s
  Units CAO_1_mv = mv
  Units CAO_2_mv = mv
  Units chemc_flow = L/min
  Units makeup_flow = L/min
Public covary(6)            'array to perform covariance upon
  'covary(1) = Uz_m_s
  'covary(2) = Ux_m_s
  'covary(3) = Uy_m_s
  'covary(4) = Ts_C
  'covary(5) = co2_mg_m3
  'covary(6) = h2o_g_m3
Public covaried(23)          'array holds output of covary datatable
  Alias covaried(1)  = Ux_mean
  Alias covaried(2)  = Uy_mean
  Alias covaried(3)  = Uz_mean
  Alias covaried(4)  = cov_Uz_Uz
  Alias covaried(5)  = cov_Uz_Ux
  Alias covaried(6)  = cov_Uz_Uy
  Alias covaried(7)  = cov_Uz_Ts
  Alias covaried(8)  = cov_Uz_co2
  Alias covaried(9)  = cov_Uz_h2o
  Alias covaried(10) = ws_sclr_mean
  Alias covaried(11) = wd_unit_mean
  Alias covaried(12) = wd_unit_stdev
  Alias covaried(13) = duplicate
  Alias covaried(14) = ws_rslt_mean
  Alias covaried(15) = wd_rslt_mean
  Alias covaried(16) = wd_rslt_stdev
  Alias covaried(17) = ws_sclr_stdev
  Alias covaried(18) = Ts_mean
  Alias covaried(19) = T_mean
  Alias covaried(20) = e_mean
  Alias covaried(21) = press_mean
  Alias covaried(22) = co2_mean
  Alias covaried(23) = h2o_mean 
Public itt_test(5) 
  Alias itt_test(1) = itt_model    'modelled ITT value for specified zeta
  Alias itt_test(2) = itt_meas     'actual ITT value  
  Alias itt_test(3) = Dh           'for Hsieh footprint model
  Alias itt_test(4) = Ph           '  " "
  Alias itt_test(5) = zu           '  " "       
Public fetch(4)                'estimated fetch along cardinal directions
  Alias fetch(1) = fetch_N
  Alias fetch(2) = fetch_E
  Alias fetch(3) = fetch_S
  Alias fetch(4) = fetch_W
  Units fetch = meters


' OUTPUT DATA VARIABLES
Public tStamp As Long
Public wind(13)
  Alias wind(1)  = Ux_m_s        'aligned Ux meteorological wind component
  Alias wind(2)  = Uy_m_s        'aligned Uy met. wind component
  Alias wind(3)  = Uz_m_s        'aligned Uz met. wind component
  Alias wind(4)  = U_m_s         'calculated U streamwise wind component
  Alias wind(5)  = V_m_s         'calculated V streamwise wind component
  Alias wind(6)  = W_m_s         'calculated W streamwise wind component
  Alias wind(7)  = WS_sclr_m_s   'returned mean scalar wind speed
  Alias wind(8)  = WS_sclr_sdev  'calculated st. dev of scalar wind speed
  Alias wind(9)  = WS_rslt_m_s   'returned magnitude of resultant wind vector  
  Alias wind(10) = WD_unit_deg   'returned mean scalar wind direction
  Alias wind(11) = WD_unit_sdev  'returned stdev of unit vctr wind direction (Yamartino)
  Alias wind(12) = WD_rslt_deg   'returned direction of resultant wind vector
  Alias wind(13) = WD_rslt_sdev  'returned stdev of WS-weighted WDs (CampSci)
  Units wind = m/s
  Units WD_unit_deg = deg
  Units WD_unit_sdev = deg
  Units WD_rslt_deg = deg
  Units WD_rslt_sdev = deg
Public temp(4)
  Alias temp(1) = T_C          'aligned hmp temp
  Alias temp(2) = Ts_C         'aligned sonic temp
  Alias temp(3) = Tc_C         'aligned, corrected sonic temp
  Alias temp(4) = Td_C         'calculated dewpoint temp
  Units temp = degC
Public press(2)
  Alias press(1) = press_kPa   'aligned hmp press
  Alias press(2) = press_irga_kPa 'est. press reported by irga
  Units press = kPa
Public co2(7)
  Alias co2(1) = co2_mm_m3	   'aligned CO2 molar conc
  Alias co2(2) = co2_mg_m3     'calculated mass density
  Alias co2(3) = co2_ppm      'calculated mixing ratio
  Alias co2(4) = Fc_wpl        'co2 flux with WPL corrections
  Alias co2(5) = Fc_irga       'co2 flux sans WPL corrections
  Alias co2(6) = co2_wpl_LE    'co2 WPL term due to latent heat flux
  Alias co2(7) = co2_wpl_H     'co2 WPL term due to sensible heat flux
	Units co2 = mg/(m^2 s)
  Units co2_mm_m3 = mmol/m^3
  Units co2_mg_m3 = mg/m^3
	Units co2_ppm = ppm           'same as micromol/mol
Public h2o(7)
  Alias h2o(1) = h2o_mm_m3		  'aligned h2o vapor conc
  Alias h2o(2) = h2o_g_m3       'calculated vapor density/abs. humdity
  Alias h2o(3) = h2o_mm_m       'calculated molar mixing ratio via molar density
  Alias h2o(4) = rh_prct        'aligned relative humidity from hmp
  Alias h2o(5) = e_kPa          'calculated vapor press
  Alias h2o(6) = e_sat_kPa      'calculated sat. vapor press
  Alias h2o(7) = h2o_r_g_kg     'calculated mass mixing ratio via vapor pressure
  Units h2o_mm_m3 = mmol/m^3
  Units h2o_g_m3 = g/m^3
  Units h2o_mm_m = mmol/mol
  Units rh_prct = percent
  Units e_kPa = kPa
  Units e_sat_kPa = kPa
  Units h2o_r_g_kg = g/kg
Public heat(6)
  Alias heat(1) = LE_wpl      'latent heat flux with WPL corrections
  Alias heat(2) = LE_irga     'latent heat flux sans WPL terms
  Alias heat(3) = h2o_wpl_LE  'latent heat WPL term due to latent heat
  Alias heat(4) = h2o_wpl_H   'latent heat WPL term due to sensible heat
  Alias heat(5) = Hs          'sensible heat flux using sonic temp
  Alias heat(6) = Hc          'sensible heat flux from Hs and LE_wpl  
  Units heat = W/m^2
Public micromet(6)
  Alias micromet(1) = tau_Pa       'momentum flux
  Alias micromet(2) = u_star_m_s   'friction velocity, u*
  Alias micromet(3) = L_m          'Obukhov length
  Alias micromet(4) = zeta         'z/L
  Alias micromet(5) = x70_m        'distance representing F/So = 70%
  Alias micromet(6) = itt          'integral turbulence test
  Units tau_Pa = kg/(m s^2)
  Units u_star_m_s = m/s
  Units L_m = m
  Units zeta = unitless
  Units x70_m = m
  Units itt = unitless
Public MFC(3)
  Alias MFC(1) = flow_up_lpm    'aligned flow through up MFC 
  Alias MFC(2) = flow_dn_lpm    'aligned flow through dn MFC
  Alias MFC(3) = flow_zero_lpm  'aligned flow through zero MFC
  Units flow_up_lpm = L/min
  Units flow_dn_lpm = L/min
  Units flow_zero_lpm = L/min
Public valve(3) As Boolean
  Alias valve(1) = valve_up     'aligned up valve open? yes/no
  Alias valve(2) = valve_dn     'aligned dn valve open? yes/no
  Alias valve(3) = valve_zero   'aligend zero valve open? yes/no
  Units valve = samples


  


'****************************** DATA TABLES *********************************
DataTable (lag_recs,TRUE,LAG_SCANS)
  DataInterval(0,0,Min,1)
  Sample (5,Ux_raw,IEEE4)      '+ Uy_raw, Uz_raw, Ts_raw, diag_csat_raw
  Sample (4,co2_raw,IEEE4)     '+ h2o_raw, est_press_raw, diag_irga_raw
  Sample (2,T_raw,IEEE4)       '+ rh_raw
  Sample (1,press_raw,IEEE4)
  Sample (2,PortOn_5,IEEE4)    '+ PortOn_6
  Sample (3,flow_up_raw,IEEE4) '+ flow_dn_raw, flow_zero_raw
EndTable

DataTable (doCovary,TRUE,1)
  DataInterval (0,FLUX_INTERVAL,Min,1)
  Average(1,Ux_m_s,IEEE4,disable_flag(1))
  Average(1,Uy_m_s,IEEE4,disable_flag(1))
  Average(1,Uz_m_s,IEEE4,disable_flag(1))
  'covary Uz with Uz,Ux,Uy,Ts,co2(mg/m3),h2o(mg/m3)
  Covariance (6,covary(1),IEEE4,disable_flag(1) OR disable_flag(3),6)  
  'Opt 0: mean HZ WS, unit vctr mean WD, WD sdev by Yamartino
  WindVector (1,wind_east,wind_north,IEEE4,disable_flag(1),0,1,0)  
  FieldNames ("ws_sclr_mean, wd_unit_mean, wd_unit_sdev")          
  'Opt 2: mean HZ WS, rslt mean WS, rslt mean WD, WS-weighted WD sdev by CampSci
  WindVector (1,wind_east,wind_north,IEEE4,disable_flag(1),0,1,2)   
  FieldNames ("duplicate, ws_rslt_mean, wd_rslt_mean, wd_rslt_sdev") 
  StdDev (1,ws_slcr,IEEE4,disable_flag(1))   'ws_slcr_sdev, not in WindVector output
  Average (1,Ts_C,IEEE4,disable_flag(1))     'mean sonic temp
  Average (1,T_C,IEEE4,FALSE)                'mean hmp temp
  Average (1,e_kPa,IEEE4,FALSE)              'mean hmp vapor press
  Average (1,press_kPa,IEEE4,FALSE)          'mean barometric press
  Average (1,co2_mm_m3,IEEE4,disable_flag(3))'mean co2 molar density
  Average (1,h2o_mm_m3,IEEE4,disable_flag(3))'mean h2o molar density
EndTable


DataTable (instant,TRUE,-1)
	DataInterval (0,0,mSec,10)
	CardOut (0,-1) 
	FillStop
'  Sample (1,tStamp,NSEC)        'save timestamp as CCYY-MM-DD HH:mm:ss.ms 

	Sample (1,Ux_m_s,IEEE4)
	Sample (1,Uy_m_s,IEEE4)
	Sample (1,Uz_m_s,IEEE4)
	Sample (1,Ts_C,IEEE4)
	Sample (1,co2_mm_m3,IEEE4)
	Sample (1,h2o_mm_m3,IEEE4)
	Sample (1,press_kPa,IEEE4)
	Sample (1,T_C,FP2)
	Sample (1,rh_inst,FP2)
'	Sample (1,e_kPa,FP2)
'	Sample (1,flow_up_lpm,IEEE4)
'	Sample (1,flow_dn_lpm,IEEE4)
	Sample (1,valve_up,Boolean)
	Sample (1,valve_dn,Boolean)
EndTable

DataTable (diag2,TRUE,-1)
  DataInterval (0,0,Min,10)
  CardOut (0,-1)
  FillStop
'  Sample (1,tStamp,NSEC)

  Sample (1,panel_temp_raw,FP2,FALSE)
  Sample (1,batt_volt_raw,FP2,FALSE)
  Sample (1,n,FP2)
	Sample (1,disable_flag(1),Boolean)
	Sample (1,disable_flag(2),Boolean)
	Sample (1,del_T_f,Boolean)
	Sample (1,sig_lck_f,Boolean)
	Sample (1,amp_h_f,Boolean)
	Sample (1,amp_l_f,Boolean)
	Sample (1,disable_flag(3),Boolean)
	Sample (1,disable_flag(4),boolean)
  Sample (1,n,IEEE4,NOT (chopper_f) OR NOT (disable_flag(4)))
  Sample (1,n,IEEE4,NOT (detector_f) OR NOT (disable_flag(4))
  Sample (1,n,IEEE4,NOT (pll_f) OR NOT (disable_flag(4)))
  Sample (1,n,IEEE4,NOT (sync_f) OR NOT (disable_flag(4)))
  Sample (1,agc,FP2,disable_flag(3))
EndTable

'DataTable (REA,TRUE,-1)
'  DataInterval (0,SCAN_INTERVAL,mSec,100)
'  DataInterval (0,FLUX_INTERVAL,Min,100)
'  CardOut (0,-1)
'  FillStop
''  Sample (1,tStamp,NSEC)      'save timestamp as CCYY-MM-DD HH:mm:ss.ms
'  Sample( Run#
'  Sample( flow_up, flow_dn, flow_zero
'  Sample( valve_up,valve_dn
'  Sample( w_raw, w_rot  
'  Sample( Dband
'EndTable


DataTable (flux,TRUE,-1)
  DataInterval (0,FLUX_INTERVAL,Min,10)
  CardOut (0,-1)
  FillStop
'  Sample (1,tStamp,NSEC)        'save timestamp as CCYY-MM-DD HH:mm:ss.ms 

  Sample (13,wind(1),FP2)
  Sample (4,temp(1),FP2)
  Sample (2,press(1),FP2)
  Sample (7,co2(1),FP2)
  Sample (7,h2o(1),FP2)
  Sample (6,heat(1),FP2)
  Sample (6,micromet(1),FP2)
  Sample (3,MFC(1),FP2)
  
  'count # of samples where valve_up was TRUE
  Totalize (1,n,IEEE4,NOT (valve_up))      '
  FieldNames ("valve_up_Tot")
  Totalize (1,n,IEEE4,NOT (valve_dn))
  FieldNames ("valve_dn_Tot")
  Totalize (1,n,IEEE4,NOT (valve_zero))
  FieldNames ("valve_zero_Tot")
EndTable

DataTable (diag,TRUE,-1)
  DataInterval (0,FLUX_INTERVAL,Min,10)
  CardOut (0,-1)
  FillStop
'  Sample (1,tStamp,NSEC)

  Average (1,panel_temp_raw,FP2,FALSE)
  FieldNames ("panel_temp_Avg")
  Average (1,batt_volt_raw,FP2,FALSE)
  FieldNames ("batt_volt_Avg")
  'count # of samples taken total
  Totalize (1,n,IEEE4,FALSE)
  FieldNames ("samp_tot")
  'count # of samples taken with no CSAT flags
	Totalize (1,n,IEEE4,disable_flag(1))
	FieldNames ("csat_samp_Tot")
  'count # of samples where either CSAT disable_flag is HI
	Totalize (1,n,IEEE4,NOT (disable_flag(1) OR disable_flag(2)))
	FieldNames ("csat_warn_Tot")
  'count # of samples where both del_T_f & disable_flag(2) are true
	Totalize (1,n,IEEE4,NOT (del_T_f) OR NOT( disable_flag(2)))
	FieldNames ("del_T_f_Tot")
  'count # of samples where both sig_lck_f & disable_flag(2) are true
	Totalize (1,n,IEEE4,NOT (sig_lck_f) OR NOT (disable_flag(2)))
	FieldNames ("sig_lck_f_Tot")
	'count # of samples where both amp_h_f & disable_flag(2) are true
	Totalize (1,n,IEEE4,NOT (amp_h_f) OR NOT (disable_flag(2)))
	FieldNames ("amp_h_f_Tot")
	'count # of samples where both amp_l_f & disable_flag(2) are true
	Totalize (1,n,IEEE4,NOT (amp_l_f) OR NOT (disable_flag(2)))
	FieldNames ("amp_l_f_Tot")
	'count # of samples taken with no IRGA flags
	Totalize (1,n,IEEE4,disable_flag(3))
	FieldNames ("irga_samp_Tot")
	'count # of samples where either IRGA disable_flag is HI
	Totalize (1,n,IEEE4,NOT (disable_flag(3) OR disable_flag(4)))
	FieldNames ("irga_warn_Tot")
  'count # of samples where chopper_f & disable_flag(4) are true
  Totalize (1,n,IEEE4,NOT (chopper_f) OR NOT (disable_flag(4)))
  FieldNames ("chopper_f_Tot")
  'count # of samples where detector_f & disable_flag(4) are true
  Totalize (1,n,IEEE4,NOT (detector_f) OR NOT (disable_flag(4)))
  FieldNames ("detector_f_Tot")
  'count # of samples where pll_f & disable_flag(4) are true
  Totalize (1,n,IEEE4,NOT (pll_f) OR NOT (disable_flag(4)))
  FieldNames ("pll_f_Tot")
  'count # of samples where sync_f & disable_flag(4) are true
  Totalize (1,n,IEEE4,NOT (sync_f) OR NOT (disable_flag(4)))
  FieldNames ("sync_f_Tot")
  'find average value of automatic gain control
  Average (1,agc,FP2,disable_flag(3))
EndTable


'*************************** PROGRAM CONTROL MENU NOTES ****************************
' The Program Control Menu allows the station operator to conveniently change the 
' status of the program control flags using the CR5000 keyboard display.
'
'Mode:     	"MetOnly"	  Default value; system is only sampling met & CO2/H2O fluxes
'			      "NewRun"	  Begin an REA sampling run with the denuders
'			      "EndRun"	  Stop an REA run 
'Run hrs?:	total number of hours to sample
'           Accept any integer value (1-48)
'Run TOD?:	24hr time of day to start sample
'           if 2-digit, assume military hours only
'           if 4-digit, assume military hours & minutes
'           if 0/else,  assume next whole interval of flux_interval
DisplayMenu ("WSU REA System",-2)
	MenuItem ("Mode:",control_input)
	MenuPick (MetOnly,NewRun,EndRun)
	MenuItem ("Run hrs?",tot_samp_hrs)
	MenuPick (NonStop,1,2,4,8)
	MenuItem ("Run TOD?",delay_TOD)
	'Submenu ("Current vals")
  	'DisplayValue (
  	'DisplayValue
EndMenu



'************************************ SUBPROCEDURES *******************************
Sub init()
  n = 1 					    '# of samples taken per scan
  scans = 0            '# of scans performed
	CT=1.0 	            'Inital Rotation Angles 
	ST=0
	CE=0
	SE=0
	Dband = 0.1 		    'initial deadband, m/s 
	CAO_1_mv=0
  CAO_2_mv=2000 		'set initial flow for makeup air MFCs: corresponds to 2.0LPM
  
	Move (Ux_raw,5,NaN,1) 	'initialize sensor readings to NaN
	Move (co2_raw,4,NaN,1)
	Move (T_raw,2,NaN,1) 
  Move (press_raw,1,NaN,1)
  Move (MFC_raw,3,NaN,1)
EndSub  

Sub resetREA()
	tot_samp_hrs = DEF_SAMP_HRS 	'Specify default value for sampling duration
	REA_flag_on = FALSE 		      'REA off on compile
	fin_flag_on = FALSE 		      'Can't say finish until it's started
	control_input = NewRun 		  'Default menu value for program control
	control_flag = MetOnly 	     	'Real-time flag to track control changes
	fetch_OK = FALSE            'assume not OK
	countdown_timer = 0 		      'Specify zero here - changes when REA_flag_on is tripped
	Elapse1 = 0 				          'Upon initilization, set timer for sampled duration to zero
	
	'set port status indicators
	WriteIO (&B11111111,&B10000010)
	PortOn_1=0 			'MFC 1/2 off
	PortOn_2=1			'pressure transmitter on (2sec warm up)
	PortOn_3=0
	PortOn_4=0 			
	PortOn_5=0 			'REA valve up set to recirc
	PortOn_6=0 			'REA valve dn set to recirc
	PortOn_7=0      'air pump off
	PortOn_8=1 			'MFC 3 on
EndSub


'*********************************** REA PROGRAM ******************************
BeginProg
	SDMSpeed (SDM_PER)
	Call init()
	Call resetREA()
	
	Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)

    tStamp = Status.TimeStamp(1,1)        'ask status table for timestamp
		RealTime( rTime )                    'fill array with time values
		
		'Check to see if a run finished last scan and if so, reset rea variables
		If fin_flag_on Then Call resetREA()
		
		'check if user has changed sampling control (MetOnly/NewRun/EndRun) and ignore any 
		'changes except MetOnly->NewRun, MetOnly->EndRun or NewRun->EndRun. After a reset, set to MetOnly
		If (NOT (control_input = control_flag)) Then
			If (control_input = MetOnly) Then 			'don't allow [X]->MetOnly 
				control_input = control_flag 
			ElseIf (control_input = NewRun AND control_flag = MetOnly) Then 	'initial MetOnly->NewRun
				control_flag = control_input 			  'set flag to run, leave input on run
				countdown_timer = tot_samp_hrs*60		'set ending time in minutes
			ElseIf (control_input = EndRun) Then 		'anytime [X]->EndRun
				Elapse1 = Timer(1,Min,3)				'stop & reset timer #2, sampling duration
				Call resetREA()
			EndIf
		EndIf
		
		'permit changes after sampling starts by updating each scan
		If countdown_timer > 0 Then countdown_timer = tot_samp_hrs*60 

		CSAT3 (Ux_raw,1,CSAT3_SDM,91,CSAT_OPT) 				      'code 91: WS/temp 
		W_valve_raw = Uz_raw*CT-Ux_raw*ST*CE-Uy_raw*ST*SE     'rotate vert. WS 
		
		If (W_valve_raw >= Dband AND control_flag = NewRun) Then
			WriteIO (&B00110000,&B00010000) 'set up valve sample/down valve recirc
			PortOn_5=1
			PortOn_6=0
		ElseIf (W_valve_raw <= -Dband AND control_flag = NewRun) Then
			WriteIO (&B00110000,&B00100000) 'set up valve recirc/down valve sample
			PortOn_5=0
			PortOn_6=1
		Else
			WriteIO (&B00110000,&B00000000) 'set both valves recirc
			PortOn_5=0
			PortOn_6=0
		EndIf
		ExciteCAO (CAO1,CAO_1_mv,True,False)	'set denuder MFCs
		ExciteCAO (CAO2,CAO_2_mv,True,False) 	'set zero air MFC	

 		CS7500 (co2_raw,1,LICOR_SDM,6)   'code 6: CO2/H2O molar density, press est, diag bit
 		
 		' PTB101B outputs range 600-1060hPa over 0-2.5V
		' mult = (1060 - 600)/2500 = 0.184 mb/mv = 0.0184 kPa/mv    offset = 600 mb = 60 kPa
		VoltDiff (press_raw,1,mv5000,6,True,200,250,0.0184,60)

    ' HMP45AC outputs range -40 to 60 degC over 0-1V
    ' mult = (60 - -40)/1000 = 0.1 degC/mv      offset = -40 degC
		VoltDiff (T_raw,1,mV1000,19,TRUE,200,250,0.1,-40) 	
		
		' HMP45AC outputs range 0-100% over 0-1V
		' mult = (100 - 0)/1000 = 0.1 %/mv          offset = 0%
		VoltDiff (rh_raw,1,mv1000,20,True,200,250,0.1,0)
		
		Battery (batt_volt_raw) 						          'Measure battery voltage
		PanelTemp (panel_temp_raw,250) 				        'CR5000 panel temperature

		'Measure flowrate through REA MFCs
		' mult = (10-0)/5000 = 0.002 (L/min)/mv       offset = 0 L/min
		VoltDiff (flow_up_raw,2,mV5000,11,True,200,250,0.002,0)
		
		'Measure flowrate through zero MFC
		' mult = (5-0)/5000 = 0.001 (L/min)mv         offset = 0 L/min
		VoltSe (flow_zero_raw,1,mV5000,25,True,200,250,0.001,0)

		'Lag CSAT3, IRGA and analog measurements
		CallTable lag_recs
		
		If ( scans >= LAG_SCANS ) Then				
			GetRecord (lagged_rec(1),lag_recs,LAG_SCANS-DELAY_CSAT)   'retrieve lagged CSAT data
			Move (Ux_m_s,3,lagged_rec(1),3)                   'Ux,Uy,Uz
			Move (Ts_C,1,lagged_rec(4),1)                     'Ts
      Move (diag_csat,1,lagged_rec(5),1)                'CSAT diag word
      
      'perform CSAT diagnostics
			If ( diag_csat = NaN ) Then ( diag_csat = 61502 )  'Define 61502 as NaN
			diag_csat_work = diag_csat                         'Break flags into 4 separate bits
			del_T_f = diag_csat_work AND &h8000
			sig_lck_f = diag_csat_work AND &h4000
			amp_h_f = diag_csat_work AND &h2000
			amp_l_f = diag_csat_work AND &h1000
			'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
			' high, including the special cases NaN (61502), a Lost Trigger (61440), No Data
			' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
			disable_flag(1) = diag_csat_work AND &hf000
			'Turn on only when CSAT3 diagnostic warning flags are set.
			disable_flag(2) = ( disable_flag(1) AND NOT (Ts_C = NaN) )
			'Save the four most significant bits of the CSAT3 diagnostics, except for the
			' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM
			' error (61441), or wrong CSAT3 embedded code (61442).
			If ( diag_csat_work < &hf000 ) Then ( diag_csat = INT (diag_csat_work/&h1000) )      
      
      GetRecord (lagged_rec(1),lag_recs,LAG_SCANS-DELAY_IRGA)   'retrieve lagged IRGA data
      Move (co2_mm_m3,1,lagged_rec(6),1)                'CO2
      Move (h2o_mm_m3,1,lagged_rec(7),1)                'H2O
      Move (press_irga_kPa,1,lagged_rec(8),1)           'press est.
      Move (diag_irga,1,lagged_rec(9),1)               'IRGA diag word
      
      'perform IRGA diagnostics
      diag_irga = diag_irga XOR &h00f0        'swap bit state
      diag_irga_work = diag_irga
			'Turn on the intermediate processing disable flag whent he LI-7500 has failed to 
			'send data. Set all flags high and rail the AGC to 94
			If ( (co2_mm_m3 < -99990) OR (co2_mm_m3 = NaN) ) Then (diag_irga_work = &h00ff)
			agc = INT ((diag_irga_work AND &h000f)*6.25+0.5)    'compute the AGC
			chopper_f = diag_irga_work AND &h0080               'break flags into 4 seperate bits
			detector_f = diag_irga_work AND &h0040
			pll_f = diag_irga_work AND &h0020
			sync_f = diag_irga_work AND &h0010
			'Turn on the intermediate processing disable flag when any LI-7500 warning flag
			'is high, including special cases NaN or SDM error
			disable_flag(3) = diag_irga_work AND &h00f0
			'Turn on only when LI-7500 diagnostic warning flags are set
			disable_flag(4) = ( disable_flag(3) AND NOT (diag_irga_work >= &h00ff) )
			'Save only the four most significant bits of the LI-7500 diagnostic word
			diag_irga = INT (diag_irga_work/&h0010)
			
			GetRecord (lagged_rec(1),lag_recs,LAG_SCANS)    'retrieve lagged analog data
			Move (T_C,1,lagged_rec(10),1)                'hmp temp
			Move (rh_inst,1,lagged_rec(11),1)            'hmp rel. humidity
			Move (press_kPa,1,lagged_rec(12),1)          'barometric pressure
			Move (valve_up,2,lagged_rec(13),2)           'PortOn_5, PortOn_6
			Move (flow_up_lpm,3,lagged_rec(15),3)        'up/down flows

      'convert molar density to mass density & mixing ratio
	    '1 mg/m^3 = (mmol/m^3)*(g/mol)*(mol/10^3 mmol)*(10^3 mg/g)
      co2_mg_m3 = co2_mm_m3*MW_co2                        
	    '1 ppm = 10^6*(mol/10^6 mol) = 10^6*(mmol*kPa*m^3*K*mol)/(m^3*K*mol*kPa*10^3*10^3 mmol)
      co2_ppm = 10^6*co2_mm_m3*R*(T_C+273.15)/(press_kPa*1000) 

      'convert molar density to mass density & molar ratio
      '1 g/m^3 = (mmol/m^3)*(g/mol)*(mol/10^3 mmol)
      h2o_g_m3 = h2o_mm_m3*MW_h2o/10^3                    
      '1 mmol/mol = (mmol*kPa*m^3*K)/(m^3*K*mol*kPa)
      h2o_mm_m = h2o_mm_m3*R*(T_C+273.15)/press_kPa       

      'calculate vapor pressures
      'Guide to Meteorological Instruments and Methods of Observation (WMO, 2008)
      '  satVP = 6.112*EXP(17.62*t/(243.12+t))  where satVP = sat. vap press, hPa
      '                                               t     = temp, degC
      '  VP = satVP*RH                          where RH    = ratio
	    e_sat_kPa = 0.6112*EXP( (17.62*T_C)/(T_C+243.12) )
	    e_kPa = e_sat_kPa*rh_inst/100 
	    
	    'h2o mixing ratio (AMS Glossary of Meteorology)
	    '  r = (10^3)(0.622e)/(p-e)    where  r = mixing ratio, kg/kg
	    '                                  10^3 = conversion, g/kg
	    '                                     e = water vapor pressure, kPa
	    '                                     p = total pressure, kPa
	    h2o_r_g_kg = (622*e_kPa)/(press_kPa-e_kPa)
	    
	    'sonic temperature correction
	    'Another look at sonic thermometry. J.C. Kaimal and J.E. Gaynor. (Research
	    'Note received Nov 1990). NOAA/ERL/Wave Propagation Laboratory, Boulder, CO. 
	    '  Tc = Ts/(1 + 0.32*e/p)    where  Tc = corrected temp, K
	    '                                   Ts = sonic temp, K
	    '                                   e  = water vapor pressure, kPa
	    '                                   p  = total pressure, kPa
			Tc_C = (Ts_C+273.15)/(1+0.32*(e_kPa/press_kPa))-273.15 
      
      'dewpoint temperature calc
      'Guide to Meterological Instruments and Methods of Observation (WMO, 2008)
      '  inverted formula for saturated vapor pressure
	    '  Td = (243.12*LN(e/6.112)) / (17.62-LN(e/6.112))
	    '                            where  Td = dewpoint temp, K
	    '                                   e  = water vapor pressure, hPa
			Td_C = (243.12*LN(e_kPa/0.6112))/(17.62-LN(e_kPa/0.6112))         

      're-orient components for WS/WD computation
			wind_east  = -1*Uy_m_s 
			wind_north = Ux_m_s
			
			'compute instantaneous HZ wind speed
			ws_slcr = SQR(Ux_m_s^2+Uy_m_s^2) 
		
		  'save values into covariance array
			covary(1) = Uz_m_s   
  		covary(2) = Ux_m_s
	  	covary(3) = Uy_m_s
		  covary(4) = Ts_C
	  	covary(5) = co2_mg_m3
	  	covary(6) = h2o_g_m3 
			
      CallTable instant       'save min. inst. data needed to reconstruct fluxes			
      CallTable doCovary      'perform covariances & calculate means

			If ( doCovary.Output(1,1) ) Then      'if this scan is a flux output scan
			  GetRecord(Ux_mean,doCovary,1)
			  'Wind coordinate rotation: met->natural as described in: 
			  '  Chapter 3, Appendix A from Handbook of Micrometeorology, ed. Lee, Massman and Law
			  'Also in:
			  '  Finnigan J.J., Clement R., Malhi Y., Leuning R., Cleugh H.A. A re-evaluation of 
			  '  long-term flux measurement techniques, Part I: Averaging and Coordinate Rotation. 
			  '  Boundary-Layer Meteorology 107: 1-48, 2003. 
			  'Given original met components: Ux, Uy, Uz
			  'Then by forcing mean lateral & vertical winds towards zero, the rotated "streamwise" 
			  'vectors are given by:
			  '    U2 = Ux*CT*CE + Uy*CT*SE + Uz*ST
			  '    V2 = Uy*CE - Ux*SE
			  '    W2 = Uz*CT - Ux*ST*CE - Uy*ST*SE
			  '  where
			  '    CE = |U1|/sqrt( |U1|^2 + |V1|^2 )
			  '    SE = |V1|/sqrt( |U1|^2 + |V1|^2 )
			  '    CT = sqrt( |U1|^2 + |V1|^2 )/sqrt( |U1|^2 + |V1|^2 + |W1|^2 )
			  '    ST = |W1|/sqrt( |U1|^2 + |V1|^2 + |W1|^2 )
			  'These two rotations align base vector e1 (x-axis) to mean HZ WD and a third rotation 
			  'is needed to fix e2,e3. This is done by forcing Cov(Uy,Uw) to zero but since it often 
    	  'results in physically unrealistic orientations, this step is also often ignored.
			  '    U = U2
			  '    V = V2*CB + W2*SB
			  '    W = W2*CB - V2*SB
			  '  where
			  '    CB = cos( 0.5*atan(2*Cov(V2,W2) / (Cov(V2,V2) - Cov(W2,W2))) )
			  '    SB = sin( 0.5*atan*2*Cov(V2,W2) / (Cov(V2,V2) - Cov(W2,W2))) )
			  'In this program, the first two rotations are performed on Ux,Uy,Uz and saved as U,V,W
			  'These rotated values are used in calculating fluxes but be aware that rotating each
			  'half hour serves as a high-pass filter removing any flux contributions from eddies of 
			  'period greater than averaging time!
			  
			  'compute rotation angles from mean values
				CE = Ux_mean/SQR(Ux_mean^2+Uy_mean^2)
				SE = Uy_mean/SQR(Ux_mean^2+Uy_mean^2)
				CT = SQR(Ux_mean^2+Uy_mean^2) / SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)
				ST = Uz_mean/SQR(Ux_mean^2+Uy_mean^2+Uz_mean^2)
				'apply rotation angles 1&2 to find streamwise components
			  U_m_s = Ux_m_s*CT*CE + Uy_m_s*CT*SE + Uz_m_s*ST
			  V_m_s = Uy_m_s*CE - Ux_m_s*SE
			  W_m_s = Uz_m_s*CT - Ux_m_s*ST*CE - Uy_m_s*ST*SE
				
				'save results of wind computations
				WS_sclr_m_s  = ws_sclr_mean
				WS_sclr_sdev = ws_sclr_stdev
				WS_rslt_m_s  = ws_rslt_mean
				WD_unit_deg  = wd_unit_mean + CSAT3_AZIMUTH
				WD_unit_sdev = wd_unit_stdev
				WD_rslt_deg  = wd_rslt_mean + CSAT3_AZIMUTH
				WD_rslt_sdev = wd_rslt_stdev
				
				'adjust wind directions within 0-360
				If (WD_unit_deg<0) Then (WD_unit_deg = WD_unit_deg+360)
				WD_unit_deg = WD_unit_deg MOD 360
				If (WD_rslt_deg<0) Then (WD_rslt_deg = WD_rslt_deg+360)
				WD_rslt_deg = WD_rslt_deg MOD 360
				
				'find avg rel. humidity as % based on avg. vap press & avg temp
        rh_prct = 100*e_mean/(0.6112*EXP((17.62*T_mean)/(T_mean+243.12)))

        'estimate latent heat of vaporization by formula 8 from:
        ' A new formula for latent heat of vaporization as a function of temperature.
        ' By B. Henderson-Sellers, Dept. of Mathematics, University of Salford
        ' Quart. J. R. Met. Soc. (1984), 110, pp 1186-1190
        ' Lv = 1.91846*10^6{T/(T-33.91)}^2    where  Lv = lat. heat of vapor, J/kg
        '                                            T  = temperature, Kelvin
        Lv = 1918.46*((T_mean+273.15)/(T_mean+273.15-33.91))^2

        'air densities
        'Derived from ideal gas law, available: wikipedia.org/wiki/Density_of_air
        '  rho = P/(R*T)    where  rho = mass density, g/m^3
        '                            P = atmo. pressure, kPa
        '                            R = specific gas constant, (kPa m^3)/(K g)
        '                            T = abs. temp, K
        rho_dry = (press_mean-e_mean)/(Rd*(T_mean+273.15))    'g/m^3
        rho_dry2 = rho_dry/1000                               'kg/m^3
        rho_wet = rho_dry + e_mean/(Rv*(T_mean+273.15))       'g/m^3

        'specific heat capacity of moist air (AMS Glossary of Meteorology)
        '  For moist air, the specific heat capacities of the dry air and water 
        '  vapor must be combined in proportion to their respective mass fractions
        '    Cpd = 1005.7                where Cpd = specific heat capacity of dry air @ const. press, J/(kg K)
        '    Cpm = Cpd*X_dry + Cw*X_h2o        Cpm = specific heat capacity of moist air @ const. press, J/(kg K)
        '    Cw = 1840                         Cw  = specific heat capacity of water, J/(kg K)
        '    X_dry = M_dry/M_dry = 1           X_dry = mass fraction of dry air/dry air, defined as 1
        '    X_h2o = M_h2o/M_dry               X_h2o = mass ratio of water vapor/dry air, kg/kg
        X_h2o = e_mean/rho_dry                            '(g/m^3)/(g/m^3)
        Cpm = Cpd + X_h2o*Cw
                
        'friction velocity
        '  tau_Pa = rho*(Cov(W,U)^2 + Cov(W,V)^2)^0.5
        '        where  tau_Pa = momentum flux, (kg*m/s)/(s*m^2) = Pa
        '               rho = air density, kg/m^3
        '               U,V = horizontal wind components, m/s
        '               W   = vertical wind component, m/s
        
        '  u_star_m_s = (Cov(W,U)^2 + Cov(W,V)^2)^0.25 = SQRT(tau_Pa/rho)
        '        where  u_star_m_s = friction velocity, m/s
        '               U,V    = " "
        '               W      = " "
        tau_Pa = SQR(cov_Uz_Ux^2 + cov_Uz_Uy^2)
        u_star_m_s = SQR(tau_Pa)
        tau_Pa = (rho_wet/1000)*tau_Pa
        
			  'Since the instantaneous data records themselves cannot be rotated, it is not possible
			  'for the CR5000 to perform covariances on the rotated values. Instead, the results of
			  'earlier covariances can be rotated using Properties of Covariance:
			  '  If X,Y,W,V are real-valued random variables and a,b,c,d are constant
			  '  (ie, non-random), then the following are defined to be true:
			  '    Cov(X,X) = Var(X)
			  '    Cov(X,Y) = Cov(Y,X)
			  '    Cov(aX,bY) = ab*Cov(X,Y)
			  '    Cov(aX+bY,cW+dV) = ac*Cov(X,W)+ad*Cov(X,V)+bc*Cov(Y,W)+bd*Cov(Y,V)
			  
			  
			  
			  '  The last property is expanded into higher dimensions as needed:
			  '    Cov(V2,V2) = Cov((CE)Uy-(SE)Ux,(CE)Uy-(SE)Ux)
			  '               = Cov(Uy,Uy)*CE*CE -
			  '                 Cov(Uy,Ux)*2*SE*CE +
			  '                 Cov(Ux,Ux)*SE*SE
			  '    Cov(V2,W2) = Cov((CE)Uy-(SE)Ux,(CT)Uz-(ST*CE)Ux-(ST*SE)Uy)
			  '               = Cov(Uy,Uz)*CE*CT -
			  '                 Cov(Ux,Uz)*SE*CT + 
			  '                 Cov(Ux,Uy)*(SE*SE*ST - CE*CE*ST) +
			  '                 [Cov(Ux,Ux) - Cov(Uy,Uy)]*SE*ST*CE
			  '    Cov(W2,W2) = Cov((CT)Uz-(ST*CE)Ux-(ST*SE)Uy),(CT)Uz-(ST*CE)Ux-(ST*SE)Uy))
			  '               = Cov(Uz,Uz)*CT*CT -
			  '                 Cov(Uz,Uy)*CT*ST*SE - 
			  '                 Cov(Uz,Ux)*CT*ST*CE +
			  '                 Cov(Uy,Ux)*2*ST*ST*CE*SE +
			  '                 Cov(Uy,Uy)*ST*ST*SE*SE +
			  '                 Cov(Ux,Ux)*ST*ST*CE*CE
        
        
        ''''''''''''''''''''''''''''' Jay's original fluxes '''''''''''''''''''
        Fc_irga = cov_Uz_co2
        LE_irga = cov_Uz_h2o*Lv
        Hs      = cov_Uz_Ts*rho_dry2*Cpm
        
        'LI-7500 Webb et al. term for water vapor Eq. (25)
        h2o_wpl_LE = MU_WPL*X_h2o*LE_irga
				h2o_wpl_H = ( 1+(MU_WPL*X_h2o) )*e_mean/(T_mean+273.15)*Lv*cov_Uz_Ts
				LE_wpl = LE_irga + h2o_wpl_LE + h2o_wpl_H

				'Compute a sensible heat flux from Hs and LE_wpl.
				Hc = (Hs-((rho_dry2)*Cpm*0.51*Rd*(T_mean+273.15)^2*LE_wpl)/(press_mean*Lv))*((T_mean+273.15)/(Ts_mean+273.15))

				'LI-7500 Webb et al. term for carbon dioxide Eq. (24).
				co2_wpl_LE = MU_WPL*co2_mean/rho_dry*cov_Uz_h2o
				co2_wpl_H  = (1+(MU_WPL*X_h2o))*co2_mean/(T_mean+273.15)*Hc/(rho_dry2*Cpm)
				Fc_wpl = Fc_irga + co2_wpl_LE + co2_wpl_H

				'Footprint calculations, Hsieh et al, 2000
				L_m = -u_star_m_s^3*(T_mean+273.15)/(0.4*9.8*cov_Uz_Ts) 	  'Obukohov Length
				zu = zm*( LOG(ZM/ZO)-1+ZO/ZM )
				If ABS(zu/L_m)<0.04 Then 	'neutral
					Dh = 0.97
					Ph = 1
				ElseIf L_m < 0 		'unstable
					Dh = 0.28
					Ph = 0.59
				Else 			'stable
					Dh=2.44
					Ph=1.33
				EndIf

				x70_m = Dh/(0.357*0.4*0.4)*(ABS(L_m))^(1-Ph)*zu^Ph

				'check to see if footprint is within source area
				fetch = 0            'reset all fetch variables -> 0
				If ( WD_rslt_deg >= WD_MIN AND WD_rslt_deg <= WD_MAX ) Then
					If ( WD_rslt_deg >= 0 AND WD_rslt_deg <= 90 ) Then
						alpha = (PI/180)*WD_rslt_deg
						fetch_E = SIN(alpha)*x70_m
						fetch_N = COS(alpha)*x70_m
						If ( fetch_E < EAST_BOUNDS AND fetch_N < NORTH_BOUNDS ) Then
							fetch_OK = TRUE
						EndIf
					ElseIf ( WD_rslt_deg >= 90 AND WD_rslt_deg <= 180 ) Then
						alpha = (PI/180)*(WD_rslt_deg-90)
						fetch_E = COS(alpha)*x70_m
						fetch_S = SIN(alpha)*x70_m
						If ( fetch_E < EAST_BOUNDS AND fetch_S < SOUTH_BOUNDS ) Then
							fetch_OK = TRUE
						EndIf
					ElseIf ( WD_rslt_deg >= 180 AND WD_rslt_deg <= 270 ) Then
						alpha = (PI/180)*(WD_rslt_deg-180)
						fetch_W = SIN(alpha)*x70_m
						fetch_S = COS(alpha)*x70_m
						If ( fetch_W < WEST_BOUNDS AND fetch_S < SOUTH_BOUNDS ) Then
							fetch_OK = TRUE
						EndIf
					ElseIf ( WD_rslt_deg >= 270 AND WD_rslt_deg < 360) Then
						alpha = (PI/180)*(WD_rslt_deg-270)
						fetch_W = COS(alpha)*x70_m
						fetch_N = SIN(alpha)*x70_m
						If ( fetch_W < WEST_BOUNDS AND fetch_N < NORTH_BOUNDS ) Then
							fetch_OK = TRUE
						EndIf
					EndIf
				Else
				  fetch_OK = FALSE
				EndIf
				
				'REA dynamic deadband calcuations				
				sig_W = SQR(cov_Uz_Uz)
				Dband = 0.5*sig_W 		'dynamic deadband

				'integral turbulence test following Hammerle et al. (2007)
				zeta = ZM/L_m
				If ( zeta < 0 AND zeta >= -2 ) Then
					itt_model = 1.25*( 1+3*ABS(zeta) )^0.333
				EndIf
				If ( zeta >= 0 AND zeta < 1 ) Then
					itt_model = 1.25*( 1+0.2*zeta )
				EndIf
  			itt_meas = sig_W/u_star_m_s
				If ( zeta >= -2 AND zeta < 1 ) Then
					itt = 100*ABS(itt_meas-itt_model)/itt_model
				Else
					itt=999
				EndIf

				K_d_mean = rho_dry /( 101/((25+273.15)*Rd) ) 	'MFC correction factors K
				K_a_mean = rho_dry2/( 101/((25+273.15)*Rd) )

				'set chemcomb sampling rate, recirulation rate
				chemc_flow = sig_W*10 
				If chemc_flow > 10 Then chemc_flow = 10
				If tot_samp_hrs<24 Then chemc_flow = 10  'in snapshot mode

				'set flow on makup air / zero air
				makeup_flow = sig_W	
				If makeup_flow > 1.0 Then makeup_flow = 1.0
				If makeup_flow < 0.4 Then makeup_flow = 0.4
				CAO_2_mv = 5000*2*makeup_flow/5.0/K_d_mean

				Elapse1 = Timer(1,Min,4) 			'read sample duration timer

				'when delay start timer is exceeded
				If ((rHour=delay_TOD OR delay_TOD=Now) AND NOT REA_flag_on ) Then 	
					REA_flag_on = TRUE
					delay_TOD = Now
				EndIf
				
				'control REA sampling: check for REA_flag, timer duration, and weather
				If ( REA_flag_on AND Elapse1 < countdown_timer ) Then
					Elapse1 = Timer(1,Min,0)	'start timer
					WriteIO (&B01000000,&B01000000) 	'set C7 high, pump on
					PortOn_7=1
					WriteIO (&B10000001,&B10000001) 		'set C1 high and C8 high, all MFCs open
					PortOn_1=1
					PortOn_8=1
'					CAO_1_mv = 5000*chemc_flow/10.0/K_d_mean 	'set MFC volt out
				Else
					WriteIO (&B01000000,&B00000000) 			'set C7 low, pump off
					PortOn_7=0
					WriteIO (&B10000001,&B10000000) 				'set port 1 low/2 high, only zero air on
					PortOn_1=0
					PortOn_8=1
					CAO_1_mv=0
					Elapse1 = Timer(1,Min,1)			'stop timer
				EndIf
				
				'if total sampling duration has exceeded allotted sampling time
				If ( Elapse1 >= countdown_timer OR control_flag = EndRun ) Then
					REA_flag_on = FALSE   			'turn off REA flag
					fin_flag_on = TRUE 				'set completion flag
						FileMark(flux)
						FileMark(instant)
				EndIf

			EndIf

			CallTable flux
			CallTable diag
		EndIf

		'control exhaust/cooling fan
		If panel_temp_raw > 30 Then
			SW12 (1)
		Else
			SW12 (0)
		EndIf
		scans = scans+1      'advance scan count
	NextScan
EndProg
