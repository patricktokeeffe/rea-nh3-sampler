''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Denuder-based Relaxed Eddy Accumulation (REA) Flux Measurement System
'
' Laboratory for Atmospheric Research
' Department of Civil & Environmental Engineering
' Washington State University
'
' Contact:  Patrick O'Keeffe
'           pokeeffe@wsu.edu
'           (509) 335-7246
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'=====================  DEVICE CONFIGURATION  ================================
Const SDM_CSAT3_LI7500 = 1003 'aliases for menu
Const SDM_CSAT3A_EC150 = 1004
ConstTable
  'Const DATA_SRCS = SDM_CSAT3_LI7500
  Const DATA_SRCS = SDM_CSAT3A_EC150
  'things which MUST be constants and therefore cannot be in "settings file"
  Const SDM_SPEED = 30   'default: 30 usec; accepts 8 usec - 3 msec
  Const CSAT_ADDR = 3    'default CSAT3 SDM address: 3
  Const LI7500_ADDR = 7  'default LI7500 SDM address: 7
  Const EC100_ADDR = 1   'default EC100/EC150/CSAT3A address: 1
  
  'self-imposed value limits on some settings options
  Const RUNTIME_MIN = 0.5 'hrs
  Const RUNTIME_MAX = 24 'hrs
  Const UPDNFLOW_MIN = 2 'sLpm, max specified under analog scaling
  Const ZEROFLOW_MIN = 0.4 'sLpm, max specified under analog scaling
  Const DECLIN_MIN = -35 'deg E of TN
  Const DECLIN_MAX = 35 'deg E of TN
EndConstTable

'----- WIRING -----
Const HMP_T_DF = 11
Const HMP_RH_DF = 12

Const MFC_UP_DF = 1
Const MFC_DN_DF = 2
Const MFC_UPDN_CAO = 1 'MFCs share port

Const MFC_ZERO_SE = 5  'note: single-ended
Const MFC_ZERO_CAO = 2

Const C_UPDN_OFF = 1 'C1: valve off for UP/DN MFCs
'Const C_ZERO_OFF = 2 'C2: valve off for zero MFC
'Const C_UPDN_PRG = 3 'C3: valve purge for UP/DN MFCs <- not implemented XXX
'Const C_ZERO_PRG = 4 'C4: valve purge for zero MFC
Const C_VLV_UP = 5   'C5: relay: 3-way valve at UP denuder inlet
Const C_VLV_DN = 6   'C6: relay: 3-way valve at DN denuder inlet
Const C_PMP_ON = 7   'C7: relay: pump power
Const C_MFC_ON = 8   'C8: relay: MFC power

'----- ANALOG SCALING -----
Const HMP_T_MULT = (60 + 40) / 1000    '-40* - 60* / 0-1V
Const HMP_T_OFF = -40
Const HMP_RH_MULT = (100 - 0) / 1000   '0-100% / 0-1V
Const HMP_RH_OFF = 0

Const UPDNFLOW_MAX = 10 '<-- used 4 settings validation
Const MFC_UPDN_MULT = UPDNFLOW_MAX / 5000 '0-10 sLpm / 0-5V
Const MFC_UPDN_OFF = 0

Const ZEROFLOW_MAX = 5 '<-- used 4 settings validation
Const MFC_ZERO_MULT = ZEROFLOW_MAX / 5000 '0-5 sLpm / 0-5V
Const MFC_ZERO_OFF = 0


'==========================  IMPORTANT CONSTANTS  ============================
'----- PHYSICAL -----
Const Cpd = 1004.67           'specific heat capacity of dry air, J/(kg K)
'Const Cw = 1820               'specific heat capacity of water, J/(kg K)
Const MW_h2o = 18.01528       'molecular weight of water, g/mol
Const MW_co2 = 44.010         'molecular weight of carbon dioxide, g/mol
Const MW_air = 28.98          'molecular weight of dry air, g/mol
Const MU_WPL = MW_air/MW_h2o  'Ratio of MW of dry air to that of water vapor
Const R = 8.3143*10^-3        'Universal gas constant, (kPa m^3)/(K mol)
Const Rd = R/MW_air           'Gas constant for dry air, (kPa m^3)/(K g)
'Const Rv = R/MW_h2o           'Gas constant for water vapor, (kPa m^3)/(K g)
Const K_ = 0.41               'Von Karman constant, dimless
Const G_ = 9.81               'Gravity, m/s^2
Const PI = 3.14159            'Mathematical constant pi
'Const RperD = PI/180          'radians per degree
'Const DperR = 180/PI          'degrees per radian

'----- PORT CONTROL MASKS -----
Const MASK_UPDN_OFF = 2^(C_UPDN_OFF-1)   '0000 0001
Const MASK_ZERO_OFF = 2^(C_ZERO_OFF-1)   '0000 0010
Const MASK_UPDN_PURGE = 2^(C_UPDN_PRG-1) '0000 0100
Const MASK_ZERO_PURGE = 2^(C_ZERO_PRG-1) '0000 1000
Const MASK_UP_VLV = 2^(C_VLV_UP-1)       '0001 0000
Const MASK_DN_VLV = 2^(C_VLV_DN-1)       '0010 0000
Const MASK_UPDN_VLV = (MASK_UP_VLV OR MASK_DN_VLV) '0011 0000
Const MASK_PUMP_ON = 2^(C_PMP_ON-1)      '0100 0000
Const MASK_MFC_PWR = 2^(C_MFC_ON-1)      '1000 0000

Const MASK_OFF = &B00000000
Const MASK_FLOW = (MASK_MFC_PWR OR MASK_PUMP_ON OR MASK_ZERO_OFF OR MASK_UPDN_OFF)
Const MASK_ALL = (MASK_FLOW OR MASK_UPDN_VLV)
'TODO verify reset mask, add standby mask
Const MASK_RESET = (MASK_MFC_PWR OR MASK_UPDN_OFF) 
    'XXX standby: MFCs power ON, pump OFF, 
    'up valve OFF, dn valve OFF, zero mfc NOT valve OFF, up/dn mfc valve OFF
Const MASK_RUNNING = (MASK_MFC_PWR OR MASK_PUMP_ON) 'neither MFC valve OFF 


'==========================  PROGRAM OPERATION  ==============================

Const INTEG = 250      'analog integration time
Const FAST_INTV = 100  'length of main scan, msec = 10 Hz
Const FAST_BUFF = 50   '5 second buffer
Const SLOW_INTV = 1    'length of secondary scan, seconds = 1 Hz
Const STAT_INTV = 30   'frequency of output statistics, minutes

'----- SDM device options -----
Const CSAT3_CMD = 91  'trigger + get wind & temp data
Const CSAT3_OPT = INT(1000/FAST_INTV) 'calc Hz from interval
Const LI7500_CMD = 6  'get co2, h2o, press & diagnostic
Const EC100_CMD = 1  'get Ux/Uy/Uz, Ts, sonic diag, CO2, H2O, etc

'----- SDM device delays -----
Const CSAT3_DELAY = 2  'fixed @ 2 measurements
Const LI7500_DELAY = 2 'SDM/RS232: BaseDelay=186ms & DelayStep=2 -> Delay=199ms
Const EC100_DELAY = 0  'TODO
Const LAG_SCANS = 5    'large enough to accomodate all delays

Dim just_had_1hz_scan As Boolean 'data table exclusion flags
Dim inbetween_1hz_scan As Boolean


'===============================  VARIABLES  =================================

'----- SENSORS -----
Public sonic(5)
Alias sonic(1) = sonic_Ux
Alias sonic(2) = sonic_Uy
Alias sonic(3) = sonic_Uz
Alias sonic(4) = sonic_Ts
Alias sonic(5) = sonic_diag
Units sonic = m/s
Units sonic_Ts = degC
Units sonic_diag = bitmap

Public irga(4)
Alias irga(1) = irga_CO2
Alias irga(2) = irga_H2O
Alias irga(3) = irga_press
Alias irga(4) = irga_diag
Units irga = mmol/m^3
Units irga_press = kPa
Units irga_diag = bitmap

#If (DATA_SRCS=SDM_CSAT3A_EC150) Then
  Dim ec100_raw(12) 'Campbellsci EC100/EC150/CSAT3A

  Public extra_irga(3)
  Alias extra_irga(1) = irga_tmpr
  Alias extra_irga(2) = irga_CO2_signal
  Alias extra_irga(3) = irga_H2O_signal
  Units irga_tmpr = degC
  Units irga_CO2_signal = ratio
  Units irga_H2O_signal = ratio
#EndIf

Public hmp45c(2)
Alias hmp45c(1) = hmp_T
Alias hmp45c(2) = hmp_RH
Units hmp_T = degC
Units hmp_RH = %

Public hmp_e 'derived, not measured
Units hmp_e = kPa

Public flow(3)
Alias flow(1) = flow_up
Alias flow(2) = flow_dn
Alias flow(3) = flow_zero
Units flow = sLpm

Public cr5k(2)
Alias cr5k(1) = LoggerTemp
Alias cr5k(2) = LoggerVoltage
Units LoggerTemp = degC
Units LoggerVoltage = Volts

'----- PROCESSING ------
Public Uz_rot 'for real-time coord rotation
Units Uz_rot = m/s

Public disable_sonic As Boolean 'diagnostic flag handling
Public disable_irga As Boolean

Dim dummy(3) = {0, 0, 0}
Dim lagged(14) 'HINT length of `work_lag` table output
Public aligned(14)
Alias aligned(1)  = lag_Ux
Alias aligned(2)  = lag_Uy
Alias aligned(3)  = lag_Uz
Alias aligned(4)  = lag_Ts
Alias aligned(5)  = lag_sonic_diag
Alias aligned(6)  = lag_CO2
Alias aligned(7)  = lag_H2O
Alias aligned(8)  = lag_irga_press
Alias aligned(9)  = lag_irga_diag
Alias aligned(10) = lag_irga_tmpr
Alias aligned(11) = lag_CO2_signal
Alias aligned(12) = lag_H2O_signal
Alias aligned(13) = lag_vlv_up_on
Alias aligned(14) = lag_vlv_dn_on
Units lag_Ux = m/s
Units lag_Uy = m/s
Units lag_Uz = m/s
Units lag_Ts = degC
Units lag_sonic_diag = bitmap
Units lag_CO2 = mmol/m^3
Units lag_H2O = mmol/m^3
Units lag_irga_press = kPa
Units lag_irga_diag = bitmap
Units lag_irga_tmpr = degC
Units lag_CO2_signal = ratio
Units lag_H2O_signal = ratio

'Public denom 'for calculating mixing ratios - TODO Dim 

Public cov_sonic(1,4)'= [ [Ts,  Ux, Uy, Uz] ]
Public cov_irga(2,4) '= [ [CO2, Ux, Uy, Uz], 
                     '    [H2O, Ux, Uy, Uz],
                     '    [Tc,  Ux, Uy, Uz] ]  <-- Tc not implemented!
Public cov_out(40)
Alias cov_out(1)  = Ux_Avg 'Average() x4
Alias cov_out(2)  = Uy_Avg
Alias cov_out(3)  = Uz_Avg
Alias cov_out(4)  = Ts_Avg
Alias cov_out(5)  = Ts_Std 'Covariance(cov_sonic(1,1) .. limit:10)
Alias cov_out(6)  = cov_Ts_Ux
Alias cov_out(7)  = cov_Ts_Uy
Alias cov_out(8)  = cov_Ts_Uz
Alias cov_out(9)  = Ux_Std
Alias cov_out(10) = cov_Ux_Uy
Alias cov_out(11) = cov_Ux_Uz
Alias cov_out(12) = Uy_Std
Alias cov_out(13) = cov_Uy_Uz
Alias cov_out(14) = Uz_Std
Alias cov_out(15) = WS_sclr_Avg 'WindVector(..option 0)
Alias cov_out(16) = WD_unit_Avg
Alias cov_out(17) = WD_Yamartino_Std
'Alias cov_out(18) = WS_slcr_Avg (dup) 'WindVector(..option 2)
Alias cov_out(19) = WS_rslt_Avg
Alias cov_out(20) = WD_rslt_Avg
Alias cov_out(21) = WD_CSI_Std
Alias cov_out(22) = CO2_Avg 'Average() x3
Alias cov_out(23) = H2O_Avg
Alias cov_out(24) = irga_press_Avg
Alias cov_out(25) = irga_tmpr_Avg 'Average/Sample() x3
Alias cov_out(26) = irga_CO2_signal_Avg
Alias cov_out(27) = irga_H2O_signal_Avg
Alias cov_out(28) = CO2_Std 'Covariance(cov_irga(1,1) .. limit:4)
Alias cov_out(29) = cov_CO2_Ux
Alias cov_out(30) = cov_CO2_Uy
Alias cov_out(31) = cov_CO2_Uz
Alias cov_out(32) = H2O_Std 'Covariance(cov_irga(2,1) .. limit:4)
Alias cov_out(33) = cov_H2O_Ux
Alias cov_out(34) = cov_H2O_Uy
Alias cov_out(35) = cov_H2O_Uz
'  Alias cov_out() = Tc_Std 'Covariance(cov_irga(3,1) .. limit:4)
'  Alias cov_out() = cov_Tc_Ux
'  Alias cov_out() = cov_Tc_Uy
'  Alias cov_out() = cov_Tc_Uz
Alias cov_out(36) = vlv_up_on_Tot 'Totalize() x3
Alias cov_out(37) = vlv_dn_on_Tot
Alias cov_out(38) = vlv_possible
Alias cov_out(39) = hmp_T_Avg 'Average() x2
Alias cov_out(40) = hmp_e_Avg
Units Ux_Avg = m/s
Units Uy_Avg = m/s
Units Uz_Avg = m/s
Units Ts_Avg = degC
'ignore other cov units
Units Uz_Std = m/s
Units WS_sclr_Avg = m/s
Units WD_unit_Avg = degEofN
Units WD_Yamartino_Std = deg
Units WS_rslt_Avg = m/s
Units WD_rslt_Avg = degEofN
Units WD_CSI_Std = deg
Units CO2_Avg = mmol/m^3
Units H2O_Avg = mmol/m^3
Units irga_press_Avg = kPa
Units irga_tmpr_Avg = degC
Units irga_CO2_signal_Avg = ratio
Units irga_H2O_signal_Avg = ratio
Units Ts_Std = degC
Units Uz_Std = m/s
Units CO2_Std = mmol/m^3
Units H2O_Std = mmol/m^3
'ignore other cov units
Units vlv_up_on_Tot = scans
Units vlv_dn_on_Tot = scans
Units vlv_possible = scans
Units hmp_T_Avg = degC
Units hmp_e_Avg = kPa

Dim sqrt_UV 'double-rotation calcs
Dim sqrt_UVW
Public rot_angles(4) 
Alias rot_angles(1) = CT
Alias rot_angles(2) = ST
Alias rot_angles(3) = CE
Alias rot_angles(4) = SE
Units rot_angles = radian

'Public rotated(3) 'rotated output
'Alias rotated(1) = U_Avg
'Alias rotated(2) = V_Avg
'Alias rotated(3) = W_Avg
'Units rotated = m/s

Public hmp_e_sat_Avg 'derived from stats
Public hmp_RH_Avg
Units hmp_e_sat_Avg = kPa
Units hmp_RH_Avg = %

Public L      'Obukhov length
Public u_star 'friction velocity
Public tau    'horizontal momentum flux
Public rho_d  'dry air density
Public rho_a  'ambient (moist) air density
Public Lv     'latent heat of vaporization of water
Units L = m
Units u_star = m/s
Units tau = (m/s)^2
Units rho_d = g/m^3
Units rho_a = kg/m^3
Units Lv = J/g

Public Fco2 'carbon dioxide flux
Public LE   'latent heat flux
Public Hs   'sensible heat flux
Dim WPL_LE  'Webb Pearson Leuning (?) correction 1
Dim WPL_Hs  'WPL correction 2
Units Fco2 = g/(m^2 s)
Units LE = W/m^2
Units Hs = W/m^2

'----- OPERATING VARIABLES -----
Public run_control(3) As Boolean 'menus
Alias run_control(1) = shield_ON
Alias run_control(2) = run_queued
Alias run_control(3) = run_aborted

'for implicitly updating run start time after queuing a run when using delayed start schedule
Public run_already_queued As Boolean
Public shld_already_ON As Boolean
Public is_running As Boolean

Public rtime(9)
Alias rtime(4) = hrofday
Alias rtime(5) = minofhr

Const RUN_TIMER = 1
Const START = 0
Const STOP_RESET = 3
Const QUERY = 4

Public run_sched(3) As Long
Alias run_sched(1) = start_run
Alias run_sched(2) = run_dur
Alias run_sched(3) = elapsed_time
Units run_sched = min

Public flow_SPvals(3)
Alias flow_SPvals(1) = shld_SPval
Alias flow_SPvals(2) = zero_SPval
'Alias flow_SPvals(3) = samp_SPval '<< necessary?

Public flow_setpnt(2) 'TODO Dim
Alias flow_setpnt(1) = setpnt_zero
Alias flow_setpnt(2) = setpnt_updn

Public mean_up_flow
Public mean_dn_flow
Public decreasing_flow As Boolean 'XXX TST

Public deadband 
Dim neg_deadband
Units deadband = m/s

Public ctrlport(8) As Boolean
Alias ctrlport(1) = updn_mfc_is_off 'up/dn MFC off signal
Alias ctrlport(2) = zero_mfc_is_off 'makeup air MFC off signal
'C3, C4 MFC valve purge logic not built into program
Alias ctrlport(3) = updn_purging 'up/dn MFC valve purge signal
Alias ctrlport(4) = zero_purging 'makeup air MFC valve purge signal
Alias ctrlport(5) = vlv_up_is_on 'REA valve up eddy
Alias ctrlport(6) = vlv_dn_is_on    'REA valve dn eddy
Alias ctrlport(7) = pump_is_on    'turns air pump off/on
Alias ctrlport(8) = mfc_pwr_is_on 'zero MFC valve


'============================ SETTINGS RETENTION =============================
Dim filehandle As Long
Const WRITEFILE = 0
Const READFILE = 1

'----- DEFAULT SETTINGS -----
Const SETTINGS_FILE = "CPU:rea_settings.dat"
Const NUM_SETTINGS = {18}

Const DEF_FLOW_AUTO_SHLD = True '=LastState
Const DEF_FLOWSP_WAIT = 2.0 'sLpm
Const DEF_FLOWSP_ZERO = 0.5 'sLpm
Const DEF_FLOWSP_AUTO = True '=Automatic
Const DEF_FLOWSP_UPDN = 10 'sLpm
Const DEF_DBAND_MULT = 0.5 '0 < X <= 1
Const DEF_DBAND_MIN = 0.05 'm/s
Const DEF_DBAND_DEF = 0.1 'm/s
Const DEF_SONIC_AZIMUTH = -1 'degEofN, -1=disabled
Const DEF_SONIC_HEIGHT = 0 'm, 0=disabled
#If (DATA_SRCS=SDM_CSAT3_LI7500) Then
  Const DEF_IRGA_VERT_SEP = -99 'cm
  Const DEF_IRGA_HORZ_SEP = -99 'cm
#ElseIf (DATA_SRCS=SDM_CSAT3A_EC150) Then
  Const DEF_IRGA_VERT_SEP = 0 'TODO insert predefined values
  Const DEF_IRGA_HORZ_SEP = 0 'based on closest bracket setting
#EndIf
Const DEF_SITE_DECLIN = 0 'degEofTN, 0=disabled
Const DEF_SITE_FETCH_N = 0 'm, 0=disabled
Const DEF_SITE_FETCH_E = 0 'm, 0=disabled
Const DEF_SITE_FETCH_S = 0 'm, 0=disabled
Const DEF_SITE_FETCH_W = 0 'm, 0=disabled
Const DEF_SITE_RUFNESS = 0 'm, 0=disabled

Public choice(NUM_SETTINGS)
Alias choice(1)  = ch_flow_auto_shld
Alias choice(2)  = ch_flowSP_shld
Alias choice(3)  = ch_flowSP_zero
Alias choice(4)  = ch_flowSP_auto
Alias choice(5)  = ch_flowSP_updn
Alias choice(6)  = ch_dband_mult
Alias choice(7)  = ch_dband_min
Alias choice(8)  = ch_dband_def
Alias choice(9)  = ch_sonic_azimuth
Alias choice(10) = ch_sonic_height
Alias choice(11) = ch_irga_vert_sep
Alias choice(12) = ch_irga_horz_sep
Alias choice(13) = ch_site_declin
Alias choice(14) = ch_site_fetch_N
Alias choice(15) = ch_site_fetch_E
Alias choice(16) = ch_site_fetch_S
Alias choice(17) = ch_site_fetch_W
Alias choice(18) = ch_site_rufness

Public settings(NUM_SETTINGS)
Alias settings(1)  = flow_auto_shld
Alias settings(2)  = flowSP_wait
Alias settings(3)  = flowSP_zero
Alias settings(4)  = flowSP_auto
Alias settings(5)  = flowSP_updn
Alias settings(6)  = dband_mult
Alias settings(7)  = dband_min
Alias settings(8)  = dband_def
Alias settings(9)  = sonic_azimuth
Alias settings(10)  = sonic_height
Alias settings(11) = irga_vert_sep
Alias settings(12) = irga_horz_sep
Alias settings(13) = site_declin
Alias settings(14) = site_fetch_N
Alias settings(15) = site_fetch_E
Alias settings(16) = site_fetch_S
Alias settings(17) = site_fetch_W
Alias settings(18) = site_rufness
'HINT define units despite non-Public b/c many are saved to `info` table
'Units flow_auto_shld = boolean
Units flowSP_wait = sLpm
Units flowSP_zero = sLpm
'Units flowSP_auto = boolean
Units dband_mult = ratio
Units dband_min = m/s
Units dband_def = m/s
Units sonic_azimuth = degEofN
Units sonic_height = m
Units irga_vert_sep = cm
Units irga_horz_sep = cm
Units site_declin = degEofTN
Units site_fetch_N = m
Units site_fetch_E = m
Units site_fetch_S = m
Units site_fetch_W = m
Units site_rufness = cm

'----- DEFAULT SCHEDULE -----
Const SCHEDULE_FILE = "CPU:rea_schedule.dat"
Const NUM_SCHEDULE = {4}

Const DEF_RUN_DURATION = 1.0 'hr
Const DEF_RUN_BEGINTOD = False
Const DEF_RUN_DELAY = 0.0 'hr
Const DEF_RUN_TOD = 12.0 'hour of day

Public sch_choice(NUM_SCHEDULE)
Alias sch_choice(1) = ch_run_duration
Alias sch_choice(2) = ch_run_begintod
Alias sch_choice(3) = ch_run_delay
Alias sch_choice(4) = ch_run_tod

Public sch_settings(NUM_SCHEDULE)
Alias sch_settings(1) = run_duration 'hr
Alias sch_settings(2) = run_begintod 'boolean
Alias sch_settings(3) = run_delay 'hr
Alias sch_settings(4) = run_tod 'hr of day

'----- LAST STATE RETENTION -----
Const SHLDSTATE_FILE = "CPU:rea_shield_state.dat"
Public lastrun_shield_ON 'Boolean (but must be float to save in calfile)


'===============================  DATA TABLES  ===============================

'----- WORKING TABLES -----
DataTable(work_lag,TRUE,LAG_SCANS)
  Sample(5,sonic(1),IEEE4)
  Sample(4,irga(1),IEEE4)
  #If (DATA_SRCS=SDM_CSAT3A_EC150) Then
    Sample(3,extra_irga(1),IEEE4)
  #Else
    Sample(3,dummy(1),FP2)
  #EndIf
  Sample(1,vlv_up_is_on,Boolean)
  Sample(1,vlv_dn_is_on,Boolean)
EndTable

DataTable(work_cov,TRUE,1)
  DataInterval(0,STAT_INTV,Min,5)
  Average(1,lag_Ux,IEEE4,disable_sonic)
  Average(1,lag_Uy,IEEE4,disable_sonic)
  Average(1,lag_Uz,IEEE4,disable_sonic)
  Average(1,lag_Ts,IEEE4,disable_sonic)
  Covariance(4,cov_sonic(1,1),IEEE4,disable_sonic,10)
  WindVector(1,-1*lag_Uy,lag_Ux,IEEE4,disable_sonic,0,1,0)
  'Opt0: mean horiz WS, unit vctr mean WD, and std WD using Yamartino eqn
  WindVector(1,-1*lag_Uy,lag_Ux,IEEE4,disable_sonic,0,1,2)
  'Opt2: mean horiz WS, rslt mean WS, rslt mean WD, WS-weighted WD sdev CSI eqn
  'TODO sonic_uptime

  Average(1,lag_CO2,IEEE4,disable_irga)
  Average(1,lag_H2O,IEEE4,disable_irga)
  Average(1,lag_irga_press,IEEE4,disable_irga)
  #If (DATA_SRCS=SDM_CSAT3A_EC150) Then
    Average(1,lag_irga_tmpr,IEEE4,disable_irga)
    Average(1,lag_CO2_signal,IEEE4,disable_irga)
    Average(1,lag_H2O_signal,IEEE4,disable_irga)
  #Else
    Sample(3,dummy(1),FP2)
  #EndIf
  Covariance(4,cov_irga(1,1),IEEE4,disable_irga,4)
  Covariance(4,cov_irga(1,2),IEEE4,disable_irga,4)
  'Covariance(4,cov_irga(1,3),IEEE4,disable_irga,4)
  
  Totalize(1,vlv_up_is_on,UINT4,vlv_up_is_on=NAN)
  Totalize(1,vlv_dn_is_on,UINT4,vlv_dn_is_on=NAN)
  Totalize(1,1,UINT4,False)

  Average(1,hmp_T,IEEE4,(inbetween_1hz_scan OR hmp_T=NAN))
  Average(1,hmp_e,IEEE4,(inbetween_1hz_scan OR hmp_e=NAN))
EndTable

'----- FINAL OUTPUTS -----
DataTable(ts_fast,True,-1)
  DataInterval(0,FAST_INTV,mSec,10)
  CardOut(1,-1) 'XXX make fixed size in days
  Sample(1,sonic_Ux,IEEE4)
  Sample(1,sonic_Uy,IEEE4)
  Sample(1,sonic_Uz,IEEE4)
  Sample(1,sonic_Ts,IEEE4)
  Sample(1,sonic_diag,IEEE4)
  Sample(1,irga_CO2,IEEE4)
  Sample(1,irga_H2O,IEEE4)
  Sample(1,irga_press,IEEE4)
  Sample(1,irga_diag,IEEE4)
  #If (DATA_SRCS=SDM_CSAT3A_EC150) Then
    Sample(1,irga_tmpr,IEEE4)
    Sample(1,irga_CO2_signal,IEEE4)
    Sample(1,irga_H2O_signal,IEEE4)
  #EndIf
  Sample(1,vlv_up_is_on,Boolean)
  Sample(1,vlv_dn_is_on,Boolean)
EndTable

DataTable(ts_slow,True,-1)
  DataInterval(0,SLOW_INTV,Sec,10)
  CardOut(1,-1) 'XXX make fixed size in days
  Sample(1,hmp_T,IEEE4)
  Sample(1,hmp_RH,IEEE4)
  Sample(1,flow_up,IEEE4)
  Sample(1,flow_dn,IEEE4)
  Sample(1,flow_zero,IEEE4)
EndTable

DataTable(rea,True,-1) 'XXX rea on trigger?
  DataInterval(0,STAT_INTV,Min,10)
  CardOut(1,-1) 'XXX make fixed size in days
  
  Sample(1,Uz_Std,FP2)
  'sample beta
  'sample average flow up & down
  Sample(1,vlv_up_on_Tot/vlv_possible,FP2)
    FieldNames("frac_up_on")
  Sample(1,vlv_dn_on_Tot/vlv_possible,FP2)
    FieldNames("frac_dn_on")
EndTable

DataTable(met,True,-1)
  DataInterval(0,STAT_INTV,Min,10)
  CardOut(1,-1) 'XXX make fixed size in days
  Sample(1,1,FP2)
  'XXX
EndTable

DataTable(info,1,100)
  CardOut(1,100)
  Sample(1,flowSP_wait,FP2)
    FieldNames("flow_zero_waiting")
  Sample(1,flowSP_zero,FP2)
    FieldNames("flow_zero_running")
'  Sample(1,(IIF(flowSP_auto, "automatic", "manual")),String)
'  Sample(1,flowSP_updn,FP2)
    FieldNames("flow_sample")
  Sample(1,dband_mult,FP2)
    FieldNames("deadband_mult")
  Sample(1,dband_min,FP2)
    FieldNames("deadband_min")
  Sample(1,dband_def,FP2)
    FieldNames("deadband_default")
  Sample(1,sonic_azimuth,FP2)
    FieldNames("sonic_azimuth")
  Sample(1,sonic_height,FP2)
    FieldNames("sonic_height")
  Sample(1,site_declin,FP2)
    FieldNames("site_mag_declin")
  Sample(1,site_rufness,FP2)
    FieldNames("site_roughness")
  Sample(1,site_fetch_N,IEEE4)
    FieldNames("site_fetch_N")
  Sample(1,site_fetch_E,IEEE4)
    FieldNames("site_fetch_E")
  Sample(1,site_fetch_S,IEEE4)
    FieldNames("site_fetch_S")
  Sample(1,site_fetch_W,IEEE4)
    FieldNames("site_fetch_W")
  Sample(1,DATA_SRCS,FP2)
    FieldNames("sonic_irga_source")
  Sample(1,Status.CompileResults,String)
    FieldNames("CompileResults")
  Sample(1,Status.CardStatus,String)
    FieldNames("CardStatus")
'XXX 
'  Sample(1,Status.RunSignature,UINT2) 'program information
'    FieldNames("RunSig")
'  Sample(1,Status.ProgSignature,UINT2)
'    FieldNames("ProgSig")
EndTable


'==============================  CUSTOM MENU  ================================
Const Yes = True
Const Enable = True
Const Automatic = True
Const At_TOD = True
Const LastState = True
Const Cancel = False
Const Disable = False
Const Manual = False
Const Delayed = False
Const AlwaysOff = False
Const A_ = 10
Const B_ = 11
Const C_ = 12
Const D_ = 13
Const E_ = 14
Dim save_schedule As Boolean
Dim discard_schedule As Boolean
Dim reset_schedule As Boolean
Dim save_settings As Boolean
Dim discard_settings As Boolean
Dim reset_settings As Boolean
Dim recompile As Boolean

DisplayMenu("REA DAQ",-1)
  DisplayValue("is running", is_running)
'  SubMenu("View REA data")
'    DisplayValue("Status", somevar) 'MetOnly / Armed / Running / Spent
'  EndSubMenu

  SubMenu("Run control")
    SubMenu("Schedule")
      MenuItem("Duration", ch_run_duration)
      MenuItem("Begin time", ch_run_begintod)
        MenuPick(Delayed, At_TOD)
      MenuItem("Time delay", ch_run_delay)
        MenuPick(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 5, 6, 7, 8, 9, 10, 11, 12)
      MenuItem("Time of day", ch_run_tod)
      SubMenu("Apply/cancel")
        MenuItem("Save now?", save_schedule)
          MenuPick(Cancel, Yes)
        MenuItem("Discard?", discard_schedule)
          MenuPick(Cancel, Yes)
        MenuItem("Set default?", reset_schedule)
          MenuPick(Cancel, Yes)
      EndSubMenu
    EndSubMenu
    MenuItem("Shield flow", shield_ON)
      MenuPick(Enable, Disable)
    MenuItem("Queue run", run_queued)
      MenuPick(Cancel, Yes)
    MenuItem("Abort run", run_aborted)
      MenuPick(Cancel, Yes)
'    MenuItem("CurrentState",  'TODO
  EndSubMenu

  SubMenu("Settings")
    SubMenu("Flow rates")
      MenuItem("Shield startup", ch_flow_auto_shld)
        MenuPick(LastState,AlwaysOff)
      MenuItem("Standby shield rate", ch_flowSP_shld)
      MenuItem("Running shield rate", ch_flowSP_zero)
      MenuItem("Sample SP mode", ch_flowSP_auto)
        MenuPick(Automatic, Manual)
      MenuItem("Manual rate", ch_flowSP_updn)
    EndSubMenu
    SubMenu("Deadband")
      MenuItem("Mult. [0-1)", ch_dband_mult)
      MenuItem("Minimum, m/s", ch_dband_min)
      MenuItem("Default, m/s", ch_dband_def)
    EndSubMenu
    SubMenu("Site & sensors")
      MenuItem("Sonic azimuth", ch_sonic_azimuth)
      MenuItem("Sonic height", ch_sonic_height)
      MenuItem("IRGA vert. sep.", ch_irga_vert_sep)
      MenuItem("IRGA horz. sep.", ch_irga_horz_sep)
      MenuItem("Mag. declin.", ch_site_declin)
      MenuItem("Max fetch N", ch_site_fetch_N)
      MenuItem("Max fetch E", ch_site_fetch_E)
      MenuItem("Max fetch S", ch_site_fetch_S)
      MenuItem("Max fetch W", ch_site_fetch_W)
      MenuItem("Roughness length", ch_site_rufness)
    EndSubMenu
    SubMenu("Apply/cancel")
      MenuItem("Save now?", save_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Discard?", discard_settings)
        MenuPick(Cancel, Yes)
      MenuItem("Set default?", reset_settings)
        MenuPick(Cancel, Yes)
    EndSubMenu
  EndSubMenu

  SubMenu("Initial setup")
    MenuItem("sonic/IRGA", DATA_SRCS)
      MenuPick(DATA_SRCS, SDM_CSAT3_LI7500, SDM_CSAT3A_EC150)
    'SDM speed must be set through const table, menupick would be too onerous
    MenuItem("SDM addr: CSAT3", CSAT_ADDR)
      MenuPick(CSAT_ADDR,0,1,2,3,4,5,6,7,8,9,A_,B_,C_,D_,E_)
    MenuItem("SDM addr: LI7500", LI7500_ADDR)
      MenuPick(LI7500_ADDR,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
    MenuItem("SDM addr: EC100", EC100_ADDR)
      MenuPick(EC100_ADDR,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14)
    MenuItem("Min samp flow sLpm", UPDNFLOW_MIN)
    MenuItem("Min zero flow sLpm", ZEROFLOW_MIN)
    MenuItem("Min declin allowed", DECLIN_MIN)
    MenuItem("Max declin allowed", DECLIN_MAX)
    MenuRecompile("Recompile now?", recompile)
      MenuPick(Cancel,Yes)
  EndSubMenu
EndMenu


'===============================  FUNCTIONS  =================================

'convert long format time to floating-point military time representation,
'rounded to nearest half-hour; treats nonsense values (xx60 to xx99) as 59 and
'returns negative values unaltered; does NOT modulo by 24 (e.g. returns a time,
'not time-of-day)
'  ex: 18   -> 18    18.2 -> 18   18.25 -> 18.5   18.74 -> 18.5   18.75 -> 19
'      1800 -> 18    1805 -> 18    1815 -> 18.5    1830 -> 18.5    1844 -> 18.5
'      1845 -> 19    1860 -> 19    1899 -> 19     -1899 -> -1899    -18 -> -18
'      35   -> 35    35.3 -> 35.5  3500 -> 35      3510 -> 35      3599 -> 36
'
'FIXME this function should actually round to STAT_INTV but that's a step up
'  from complex to complicated.
Function LongTimeToFP(longtime) As Float
  If (longtime <= 0) Then Return (longtime)
  If (longtime >= 100) Then
    Dim tmp
    tmp = longtime MOD 100
    longtime = (longtime INTDV 100) + IIF(tmp >= 59, 0.9833, tmp/60.0)
  EndIf
  Return (Round(longtime*2, 0)/2)
EndFunction

'estimate latent heat of vaporization by formula 8 from:
' A new formula for latent heat of vaporization as a function of temperature.
' By B. Henderson-Sellers, Dept. of Mathematics, University of Salford
' Quart. J. R. Met. Soc. (1984), 110, pp 1186-1190
' Lv = 1.91846E6*(T/(T-33.91))^2    where  Lv = lat. heat of vapor, J/kg
'                                          T  = temperature, Kelvin
Function LatentHeatVapH2O(temp)
  Return 1918.46*( (temp+273.15)/(temp+239.24) )^2 'J/g
EndFunction

'footprint calc, Hsieh et al, 2000
Function FootprintEstimate(L_)
  Dim Dh, Ph, Zu, Zm, Zo
  Zm = sonic_height 'm
  Zo = site_rufness/1000 'cm -> m
  Zu = Zm * (LOG(Zm/Zo) - 1 + (Zo/Zm))
  If (ABS(Zu/L_) < 0.04) Then 'neutral
    Dh = 0.97
    Ph = 1
  ElseIf L_ < 0 'unstable
    Dh = 0.28
    Ph = 0.59
  Else          'stable
    Dh = 2.44
    Ph = 1.33
  EndIf
  Return Dh/(0.357*0.4*0.4) * ABS(L_)^(1-Ph) * Zu^Ph
EndFunction

Dim itt_model
'integral turbulence test following Hammerle et al. (2007)
Function TurbulenceTest(zeta)
    If (zeta < -2 OR zeta >= 1) Then
      Return 999 'XXX better sentinel? NAN?
    Else
      'XXX verify can multiply an IIF
      itt_model = 1.25*IIF(zeta < 0, (1 + 3*ABS(zeta))^(1/3.), (1 + 0.2*zeta))
      'XXX fix reference to Uz_std
      Return 100'*ABS((W_Std/u_star) - itt_model)/itt_model
    EndIf
EndFunction


'===============================  SUBROUTINES  ===============================
Sub update_delayed_start_time()
  RealTime(rtime)
  start_run = ((hrofday+ch_run_delay) MOD 24)*60 + IIF(minofhr >= 30, 60, 30)
EndSub

Sub end_run()
  is_running = False
  run_aborted = Cancel
  run_queued = Cancel
  run_already_queued = False
  elapsed_time = Timer(RUN_TIMER,min,STOP_RESET)
EndSub

'--------------------
Sub set_default_choices()
  ch_flow_auto_shld = DEF_FLOW_AUTO_SHLD
  ch_flowSP_shld = DEF_FLOWSP_WAIT
  ch_flowSP_zero = DEF_FLOWSP_ZERO
  ch_flowSP_auto = DEF_FLOWSP_AUTO
  ch_flowSP_updn = DEF_FLOWSP_UPDN
  ch_dband_mult = DEF_DBAND_MULT
  ch_dband_min = DEF_DBAND_MIN
  ch_dband_def = DEF_DBAND_DEF
  ch_sonic_azimuth = DEF_SONIC_AZIMUTH
  ch_sonic_height = DEF_SONIC_HEIGHT
  ch_irga_vert_sep = DEF_IRGA_VERT_SEP
  ch_irga_horz_sep = DEF_IRGA_HORZ_SEP
  ch_site_declin = DEF_SITE_DECLIN
  ch_site_fetch_N = DEF_SITE_FETCH_N
  ch_site_fetch_E = DEF_SITE_FETCH_E
  ch_site_fetch_S = DEF_SITE_FETCH_S
  ch_site_fetch_W = DEF_SITE_FETCH_W
  ch_site_rufness = DEF_SITE_RUFNESS
EndSub

Sub populate_choices()
  Move(choice(1),NUM_SETTINGS,settings(1),NUM_SETTINGS)
EndSub

Sub save_current_choices()
  'Input validation
  If (ch_flowSP_shld < ZEROFLOW_MIN) Then (ch_flowSP_shld = ZEROFLOW_MIN)
  If (ch_flowSP_shld > ZEROFLOW_MAX) Then (ch_flowSP_shld = ZEROFLOW_MAX)
  If (ch_flowSP_zero < ZEROFLOW_MIN) Then (ch_flowSP_zero = ZEROFLOW_MIN)
  If (ch_flowSP_zero > ZEROFLOW_MAX) Then (ch_flowSP_zero = ZEROFLOW_MAX)
  If (ch_flowSP_updn < UPDNFLOW_MIN) Then (ch_flowSP_updn = UPDNFLOW_MIN)
  If (ch_flowSP_updn > UPDNFLOW_MAX) Then (ch_flowSP_updn = UPDNFLOW_MAX)

  'HINT treat azimuth differently since 0 is valid option
  sonic_azimuth = IIF(sonic_azimuth < 0, -1, FIX(sonic_azimuth) MOD 360)  

  If (ch_sonic_height < 0) Then (ch_sonic_height = 0)
  If (ch_site_declin < DECLIN_MIN) Then (ch_site_declin = DECLIN_MIN)
  If (ch_site_declin > DECLIN_MAX) Then (ch_site_declin = DECLIN_MAX)
  If (ch_site_fetch_N < 0) Then (ch_site_fetch_N = 0)
  If (ch_site_fetch_E < 0) Then (ch_site_fetch_E = 0)
  If (ch_site_fetch_S < 0) Then (ch_site_fetch_S = 0)
  If (ch_site_fetch_W < 0) Then (ch_site_fetch_W = 0)
  If (ch_site_rufness < 0) Then (ch_site_rufness = 0)

  'HINT order matters when validating dband settings!
  If (ch_dband_min < 0) Then (ch_dband_min = 0)
  If (ch_dband_def < ch_dband_min) Then (ch_dband_def = ch_dband_min)
  If (ch_dband_mult > 1) Then (ch_dband_mult = 1)
  If (ch_dband_mult <= 0) Then (ch_dband_mult = DEF_DBAND_MULT)

  'Populate dependent variables
  shld_SPval = ch_flowSP_shld/MFC_ZERO_MULT
  zero_SPval = ch_flowSP_zero/MFC_ZERO_MULT
  setpnt_updn = ch_flowSP_updn/MFC_UPDN_MULT 'TODO conditionally set this
    'to the manually defined value or automatically determined value?
  If (deadband = NAN) Then 'catch @ start-up but not when settings change
    deadband = dband_def
    neg_deadband = -1*deadband
  EndIf

  Move(settings(1),NUM_SETTINGS,choice(1),NUM_SETTINGS)
  Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,WRITEFILE)
EndSub

Sub load_settings()
  filehandle = FileOpen(SETTINGS_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then  'file not found
    set_default_choices()
  Else
    Calfile(settings,NUM_SETTINGS,SETTINGS_FILE,READFILE)
    populate_choices()
  EndIf
  save_current_choices()
EndSub

Sub setdefault_settings()
  FileManage(SETTINGS_FILE,8) 'delete file
  load_settings()
EndSub

'--------------------
Sub set_default_sch_settings()
  ch_run_duration = DEF_RUN_DURATION
  ch_run_begintod = DEF_RUN_BEGINTOD
  ch_run_delay = DEF_RUN_DELAY
  ch_run_tod = DEF_RUN_TOD
EndSub

Sub populate_sch_choices()
  Move(sch_choice(1),NUM_SCHEDULE,sch_settings(1),NUM_SCHEDULE)
EndSub

Sub save_current_sch_choices()
  'Input validation
  ch_run_duration = LongTimeToFP(ch_run_duration)
  If (ch_run_duration < RUNTIME_MIN) Then ch_run_duration = RUNTIME_MIN
  If (ch_run_duration > RUNTIME_MAX) Then ch_run_duration = RUNTIME_MAX
  ch_run_tod = LongTimeToFP(ch_run_tod)
  ch_run_tod = IIF(ch_run_tod < 0, 0, ch_run_tod MOD 24)
  
  'Populate dependent variables
  If (ch_run_begintod) Then
    start_run = ch_run_tod * 60
  Else
    update_delayed_start_time()
  EndIf
  run_dur = ch_run_duration * 60

  Move(sch_settings(1),NUM_SCHEDULE,sch_choice(1),NUM_SCHEDULE)
  Calfile(sch_settings,NUM_SCHEDULE,SCHEDULE_FILE,WRITEFILE)
EndSub

Sub load_sch_settings()
  filehandle = FileOpen(SCHEDULE_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then 'file not found
    set_default_sch_settings()
  Else
    Calfile(sch_settings,NUM_SCHEDULE,SCHEDULE_FILE,READFILE)
    populate_sch_choices()
  EndIf
  save_current_sch_choices()
EndSub

Sub setdefault_sch_settings()
  FileManage(SCHEDULE_FILE,8) 'delete file
  load_sch_settings()
EndSub

'--------------------
Sub save_shield_state()
  Calfile(lastrun_shield_ON,1,SHLDSTATE_FILE,WRITEFILE)
EndSub

Sub load_shield_state()
  filehandle = FileOpen(SHLDSTATE_FILE,"rb",0)
  FileClose(filehandle)
  If (filehandle=0) Then 'file not found
    lastrun_shield_ON = False
  Else
    Calfile(lastrun_shield_ON,1,SHLDSTATE_FILE,READFILE)
  EndIf
  save_shield_state()
EndSub

Sub update_shield_state()
  If (shield_ON) Then
    If (NOT shld_already_ON) Then
      save_shield_state()
      shld_already_ON = True
      'HINT initialize sample flow SP here but update SP within autothrottle()
      'XXX is this IIF() vulnerable to wild values issue?
      setpnt_updn = IIF(flowSP_auto, (UPDNFLOW_MAX/MFC_UPDN_MULT), flowSP_updn)
    EndIf
    'HACK an IIF is preferable except it returns wild values
    If (is_running) Then
      setpnt_zero = zero_SPval
    Else
      setpnt_zero = shld_SPval
    EndIf
  Else
    setpnt_updn = 0
    setpnt_zero = 0
    If (shld_already_ON) Then
      save_shield_state()
      shld_already_ON = False
    EndIf
  EndIf
EndSub

Sub autothrottle()
  AvgRun(mean_up_flow,1,flow_up,10)
  AvgRun(mean_dn_flow,1,flow_dn,10)
  If (ABS(mean_up_flow - mean_dn_flow) > 0.1) Then
    decreasing_flow = True
  EndIf
EndSub

'---------------------
Sub setup()
  rot_angles(1) = 1.0 'XXX add runtime stuff file!
  deadband = NAN
  
  load_settings()
  load_sch_settings()
  load_shield_state()
  If (flow_auto_shld AND lastrun_shield_ON) Then
    shield_ON = True
  EndIf

  SDMSpeed(SDM_SPEED)
  CallTable(info)
EndSub


'===============================  MAIN PROGRAM  ==============================
BeginProg
  Call setup()
  Move(sonic(1),5,NAN,1)
  Move(irga(1),4,NAN,1)

  Scan(FAST_INTV,mSec,FAST_BUFF,0)
    'impose logical order on run controls
    If (run_aborted) Then 'priority given to abort signal; no-op outside runs
      end_run()
    ElseIf (is_running) Then
      shield_ON = Enable 'disallow turning off shield flow during sampling run
      run_queued = Cancel 'or attempting queue run while one still in-progress
    ElseIf (run_queued) Then
      If (NOT shield_ON) Then
        run_queued = Cancel 'force enabling shield flow before can queue run
        run_already_queued = False
      ElseIf (NOT run_begintod AND NOT run_already_queued) Then
        update_delayed_start_time()
        run_already_queued = True
      Else
        shield_ON = Enable 'prevent disabling shield once run is queued
      EndIf
    Else 'used as a lazy catch => ElseIf(NOT run_queued)
      run_already_queued = False
    EndIf

    If (run_queued AND TimeIntoInterval(start_run, 1440, Min)) Then
      is_running = True
      elapsed_time = Timer(RUN_TIMER,min,START) 'XXX TODO check what happens
        'to this timer if run wraps around past it's start time the next day!
    ElseIf (is_running) Then
      elapsed_time = Timer(RUN_TIMER,min,QUERY)
      If (elapsed_time >= run_dur) Then end_run()
    EndIf

    update_shield_state()
    PortSet(C_MFC_ON, shield_ON)
    PortSet(C_UPDN_OFF, NOT is_running)
    ExciteCAO(MFC_UPDN_CAO,setpnt_updn,False,True) 'XXX do MFCs need boost opt?
    ExciteCAO(MFC_ZERO_CAO,setpnt_zero,False,True)


    #If (DATA_SRCS=SDM_CSAT3A_EC150) Then
      EC100(ec100_raw(1),EC100_ADDR,1)
      Move(sonic(1),5,ec100_raw(1),5)
      irga_CO2 = ec100_raw(6)/MW_co2 'mg/m^3 --> mmol/m^3
      irga_H2O = ec100_raw(7)*1000/MW_h2o 'g/m^3 --> mmol/m^3
      irga_diag = ec100_raw(8)
      irga_tmpr = ec100_raw(9)
      irga_press = ec100_raw(10)
      irga_CO2_signal = ec100_raw(11)
      irga_H2O_signal = ec100_raw(12)
    #ElseIf (DATA_SRCS=SDM_CSAT3_LI7500) Then
      CS7500(irga_CO2,1,LI7500_ADDR,LI7500_CMD)
      CSAT3(sonic_Ux,1,CSAT_ADDR,CSAT3_CMD,CSAT3_OPT)
    #EndIf
    
    Uz_rot = sonic_Uz*CT - sonic_Ux*ST*CE - sonic_Uy*ST*SE
    If (NOT is_running) Then
      vlv_up_is_on = False
      vlv_dn_is_on = False
    ElseIf (Uz_rot >= deadband) Then
      vlv_up_is_on = True
      vlv_dn_is_on = False
    ElseIf (Uz_rot <= neg_deadband) Then
      vlv_up_is_on = False
      vlv_dn_is_on = True
    Else 'deadband
      vlv_up_is_on = False
      vlv_dn_is_on = False
    EndIf
    PortSet(C_VLV_UP,vlv_up_is_on) 'HINT PortSet occurs as measurement task
    PortSet(C_VLV_DN,vlv_dn_is_on) '  but WriteIO is processing task (delayed)

    CallTable(ts_fast)
    CallTable(work_lag)
    If (work_lag.Output(1,LAG_SCANS)) Then
      #If (DATA_SRCS=SDM_CSAT3A_EC150) Then
        GetRecord(lagged(1),work_lag,LAG_SCANS-EC100_DELAY)
        Move(aligned(1),14,lagged(1),14)
        disable_sonic = lag_sonic_diag > 0
        'XXX possibly check for Ux=-99999; see 2014 PROPHET FIS DAQ v1.0.5
        '  and v1.1 changelog for details on why
        disable_irga = lag_irga_diag > 0
      #ElseIf (DATA_SRCS=SDM_CSAT3_LI7500) Then
        GetRecord(lagged(1),work_lag,LAG_SCANS-CSAT3_DELAY)
        Move(aligned(1),5,lagged(1),5)
        disable_sonic = lag_sonic_diag AND &hF000 'bits 12-15 are flags
        
        GetRecord(lagged(1),work_lag,LAG_SCANS-LI7500_DELAY)
        Move(aligned(6),4,lagged(6),4)
        Move(aligned(10),3,NAN,1)
        'bits 4-7 are "OK" flags & AGC% encoded in bits 0-3
        disable_irga = (lag_irga_diag XOR &hF0) AND &hF0
      #EndIf

      GetRecord(lagged(1),work_lag,LAG_SCANS)
      Move(aligned(13),2,lagged(13),2) 'inst. valve state
      
      cov_sonic(1,1) = lag_Ts
      Move(cov_sonic(1,2),3,lag_Ux,3)
      cov_irga(1,1) = lag_CO2
      cov_irga(2,1) = lag_H2O
      'cov_irga(3,1) = lag_Tc
      Move(cov_irga(1,2),3,lag_Ux,3)
      Move(cov_irga(2,2),3,lag_Ux,3)
      'Move(cov_irga(3,2),3,lag_Ux,3)

      CallTable(work_cov)
      If (work_cov.Output(1,1)) Then
        GetRecord(cov_out(1),work_cov,1)
        
        'TODO sonic_uptime
        'TODO irga_uptime
        
        'Wind coordinate rotation: met->natural as described in: 
        '  Chapter 3, Appendix A from Handbook of Micrometeorology, ed. Lee, 
        '    Massman and Law
        '
        'Also in:
        '  Finnigan J.J., Clement R., Malhi Y., Leuning R., Cleugh H.A. A 
        '  re-evaluation of long-term flux measurement techniques, Part I: 
        '  Averaging and Coordinate Rotation. Boundary-Layer Meteorology 
        '  107: 1-48, 2003.
        '
        'Given original met components: Ux, Uy, Uz
        '
        'By forcing mean lateral & vertical winds towards zero, the rotated
        ' "streamwise" vectors are given by:
        '    U2 = Ux*CT*CE + Uy*CT*SE + Uz*ST
        '    V2 = Uy*CE - Ux*SE
        '    W2 = Uz*CT - Ux*ST*CE - Uy*ST*SE
        '  where
        '    CE = |U1|/sqrt( |U1|^2 + |V1|^2 )
        '    SE = |V1|/sqrt( |U1|^2 + |V1|^2 )
        '    CT = sqrt( |U1|^2 + |V1|^2 )/sqrt( |U1|^2 + |V1|^2 + |W1|^2 )
        '    ST = |W1|/sqrt( |U1|^2 + |V1|^2 + |W1|^2 )
        '
        'These two rotations align base vector e1 (x-axis) to mean HZ WD and a 
        'third rotation is needed to fix e2,e3. This is done by forcing 
        'Cov(Uy,Uw) to zero but since it often results in physically 
        'unrealistic orientations, this step is also often ignored.
        '    U3 = U2
        '    V3 = V2*CB + W2*SB
        '    W3 = W2*CB - V2*SB
        '  where
        '    CB = cos( 0.5*atan(2*Cov(V2,W2) / (Cov(V2,V2) - Cov(W2,W2))) )
        '    SB = sin( 0.5*atan*2*Cov(V2,W2) / (Cov(V2,V2) - Cov(W2,W2))) )
        '
        'In this program, only first two rotations are performed. Rotated 
        'values are used in flux calcs but be aware this procecure acts as a 
        'high-pass filter removing contributions from eddies of period greater 
        'than averaging time (30min)!
        sqrt_UV = SQR(Ux_Avg^2 + Uy_Avg)
        sqrt_UVW = SQR(Ux_Avg^2 + Uy_Avg^2 + Uz_Avg^2)
        CE = Ux_Avg/sqrt_UV
        SE = Uy_Avg/sqrt_UV
        CT = sqrt_UV/sqrt_UVW
        ST = Uz_Avg/sqrt_UVW
'XXX
'        U_Avg = Ux_Avg*CT*CE + Uy_Avg*CT*SE + Uz_Avg*ST
'        V_Avg = Uy_Avg*CE - Ux_Avg*SE
'        W_Avg = Uz_Avg*CT - Ux_Avg*ST*CE - Uy_Avg*ST*SE
        
        'adjust WD to relect sonic azimuth
        WD_unit_Avg = (360+WD_unit_Avg+sonic_azimuth+site_declin) MOD 360
        WD_rslt_Avg = (360+WD_rslt_Avg+sonic_azimuth+site_declin) MOD 360

        Uz_Std = SQR(Uz_Std) 'variances -> stdevs
        Ts_Std = SQR(Ts_Std)
        CO2_Std = SQR(CO2_Std)
        H2O_Std = SQR(H2O_Std)
        
        SatVP(hmp_e_sat_Avg,hmp_T_Avg)
        hmp_RH_Avg = 100*hmp_e_Avg/hmp_e_sat_Avg

        Lv = LatentHeatVapH2O(hmp_T_Avg)
        '? specific heat capacity of moist air: Cpm
        rho_d = (irga_press_Avg - hmp_e_Avg)/(Rd*(hmp_T_Avg+273.15))
        rho_a = NAN 'XXX FIXME
        
        tau = SQR(cov_Ux_Uz^2 + cov_Uy_Uz^2)
        u_star = SQR(tau)
        tau *= rho_a
        L = -u_star^3 *(hmp_T_Avg+273.15)/(K_*G_*cov_Ts_Uz)

        Fco2 = cov_CO2_Uz
        LE = cov_H2O_Uz * Lv
        Hs = cov_Ts_Uz * rho_a * Cpd

        'WPL terms for water vapor flux
        'corrected sensible heat flux
        'WPL terms for carbon dioxide flux
        
        'stability parameter
        'footprint
        'is within fetch
        'integral turbulence test
        '(bonus: stationarity)
        
        'new deadband size deadband

        'correction factors for std. L -> L
        'new sampling flow rate
        'new zero air flow rate
        
        'calculate valve
        
        'control REA sampling state
        'check timer, etc

      EndIf

    EndIf
    
    If (save_schedule) Then
      save_current_sch_choices()
      save_schedule = Cancel
    ElseIf (discard_schedule) Then
      populate_sch_choices()
      discard_schedule = Cancel
    ElseIf (reset_schedule) Then
      setdefault_sch_settings()
      reset_schedule = Cancel
    ElseIf (save_settings) Then
      save_current_choices()
      save_settings = Cancel
      CallTable(info)
    ElseIf (discard_settings) Then
      populate_choices()
      discard_settings = Cancel
    ElseIf (reset_settings) Then
      setdefault_settings()
      reset_settings = Cancel
      CallTable(info)
    EndIf

    inbetween_1hz_scan = True
    If (just_had_1hz_scan) Then
      just_had_1hz_scan = False
      inbetween_1hz_scan = False
    EndIf
  NextScan


  SlowSequence
  Scan(SLOW_INTV,Sec,0,0)
    VoltDiff(hmp_T,1,mv1000,HMP_T_DF,True,0,INTEG,HMP_T_MULT,HMP_T_OFF)
    VoltDiff(hmp_RH,1,mv1000,HMP_RH_DF,True,0,INTEG,HMP_RH_MULT,HMP_RH_OFF)
    
    VoltDiff(flow_up,1,mv5000,MFC_UP_DF,True,0,INTEG,MFC_UPDN_MULT,MFC_UPDN_OFF)
    VoltDiff(flow_dn,1,mv5000,MFC_DN_DF,True,0,INTEG,MFC_UPDN_MULT,MFC_UPDN_OFF)
    VoltSe(flow_zero,1,mv5000,MFC_ZERO_SE,True,0,INTEG,MFC_ZERO_MULT,MFC_ZERO_OFF)
    autothrottle()

    VaporPressure(hmp_e, hmp_T, hmp_RH)

    CallTable(ts_slow)
    CallTable(rea)
    CallTable(met)
    
    just_had_1hz_scan = True
  NextScan
EndProg

